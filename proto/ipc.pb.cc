// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {
namespace ipc {

namespace {

const ::google::protobuf::Descriptor* ProcessorConnectRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorConnectRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProcessorUpgrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProcessorUpgrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeLogLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeLogLevel_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ipc_2eproto() {
  protobuf_AddDesc_ipc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ipc.proto");
  GOOGLE_CHECK(file != NULL);
  ProcessorConnectRequest_descriptor_ = file->message_type(0);
  static const int ProcessorConnectRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorConnectRequest, from_processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorConnectRequest, from_idx_),
  };
  ProcessorConnectRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorConnectRequest_descriptor_,
      ProcessorConnectRequest::default_instance_,
      ProcessorConnectRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorConnectRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorConnectRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorConnectRequest));
  HeartBeatNotify_descriptor_ = file->message_type(1);
  static const int HeartBeatNotify_offsets_[1] = {
  };
  HeartBeatNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatNotify_descriptor_,
      HeartBeatNotify::default_instance_,
      HeartBeatNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatNotify));
  RedisRequest_descriptor_ = file->message_type(2);
  static const int RedisRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, shardkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, readonly_),
  };
  RedisRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisRequest_descriptor_,
      RedisRequest::default_instance_,
      RedisRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisRequest));
  RedisResponse_descriptor_ = file->message_type(3);
  static const int RedisResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, intv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, floatv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, elements_),
  };
  RedisResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisResponse_descriptor_,
      RedisResponse::default_instance_,
      RedisResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisResponse));
  StatItem_descriptor_ = file->message_type(4);
  static const int StatItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatItem, stat_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatItem, inc_value_),
  };
  StatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatItem_descriptor_,
      StatItem::default_instance_,
      StatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatItem));
  StatReport_descriptor_ = file->message_type(5);
  static const int StatReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReport, items_),
  };
  StatReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatReport_descriptor_,
      StatReport::default_instance_,
      StatReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatReport));
  ProcessorUpgrade_descriptor_ = file->message_type(6);
  static const int ProcessorUpgrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorUpgrade, old_processor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorUpgrade, new_processor_),
  };
  ProcessorUpgrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProcessorUpgrade_descriptor_,
      ProcessorUpgrade::default_instance_,
      ProcessorUpgrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorUpgrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProcessorUpgrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProcessorUpgrade));
  ChangeLogLevel_descriptor_ = file->message_type(7);
  static const int ChangeLogLevel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogLevel, level_),
  };
  ChangeLogLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeLogLevel_descriptor_,
      ChangeLogLevel::default_instance_,
      ChangeLogLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeLogLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeLogLevel));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ipc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorConnectRequest_descriptor_, &ProcessorConnectRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatNotify_descriptor_, &HeartBeatNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisRequest_descriptor_, &RedisRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisResponse_descriptor_, &RedisResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatItem_descriptor_, &StatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatReport_descriptor_, &StatReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProcessorUpgrade_descriptor_, &ProcessorUpgrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeLogLevel_descriptor_, &ChangeLogLevel::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ipc_2eproto() {
  delete ProcessorConnectRequest::default_instance_;
  delete ProcessorConnectRequest_reflection_;
  delete HeartBeatNotify::default_instance_;
  delete HeartBeatNotify_reflection_;
  delete RedisRequest::default_instance_;
  delete RedisRequest_reflection_;
  delete RedisResponse::default_instance_;
  delete RedisResponse_reflection_;
  delete StatItem::default_instance_;
  delete StatItem_reflection_;
  delete StatReport::default_instance_;
  delete StatReport_reflection_;
  delete ProcessorUpgrade::default_instance_;
  delete ProcessorUpgrade_reflection_;
  delete ChangeLogLevel::default_instance_;
  delete ChangeLogLevel_reflection_;
}

void protobuf_AddDesc_ipc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tipc.proto\022\026lbs.da.openservice.ipc\"C\n\027P"
    "rocessorConnectRequest\022\026\n\016from_processor"
    "\030\001 \002(\t\022\020\n\010from_idx\030\002 \002(\005\"\021\n\017HeartBeatNot"
    "ify\"P\n\014RedisRequest\022\016\n\006source\030\001 \002(\t\022\020\n\010s"
    "hardkey\030\002 \002(\014\022\014\n\004args\030\003 \003(\014\022\020\n\010readonly\030"
    "\004 \002(\010\"\201\001\n\rRedisResponse\022\014\n\004type\030\001 \002(\005\022\014\n"
    "\004intv\030\002 \001(\003\022\016\n\006floatv\030\003 \001(\001\022\013\n\003str\030\004 \001(\014"
    "\0227\n\010elements\030\005 \003(\0132%.lbs.da.openservice."
    "ipc.RedisResponse\"/\n\010StatItem\022\020\n\010stat_ke"
    "y\030\001 \002(\t\022\021\n\tinc_value\030\002 \002(\003\"=\n\nStatReport"
    "\022/\n\005items\030\001 \003(\0132 .lbs.da.openservice.ipc"
    ".StatItem\"@\n\020ProcessorUpgrade\022\025\n\rold_pro"
    "cessor\030\001 \002(\t\022\025\n\rnew_processor\030\002 \002(\t\"\037\n\016C"
    "hangeLogLevel\022\r\n\005level\030\001 \002(\rB\002H\001", 552);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ipc.proto", &protobuf_RegisterTypes);
  ProcessorConnectRequest::default_instance_ = new ProcessorConnectRequest();
  HeartBeatNotify::default_instance_ = new HeartBeatNotify();
  RedisRequest::default_instance_ = new RedisRequest();
  RedisResponse::default_instance_ = new RedisResponse();
  StatItem::default_instance_ = new StatItem();
  StatReport::default_instance_ = new StatReport();
  ProcessorUpgrade::default_instance_ = new ProcessorUpgrade();
  ChangeLogLevel::default_instance_ = new ChangeLogLevel();
  ProcessorConnectRequest::default_instance_->InitAsDefaultInstance();
  HeartBeatNotify::default_instance_->InitAsDefaultInstance();
  RedisRequest::default_instance_->InitAsDefaultInstance();
  RedisResponse::default_instance_->InitAsDefaultInstance();
  StatItem::default_instance_->InitAsDefaultInstance();
  StatReport::default_instance_->InitAsDefaultInstance();
  ProcessorUpgrade::default_instance_->InitAsDefaultInstance();
  ChangeLogLevel::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ipc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ipc_2eproto {
  StaticDescriptorInitializer_ipc_2eproto() {
    protobuf_AddDesc_ipc_2eproto();
  }
} static_descriptor_initializer_ipc_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ProcessorConnectRequest::kFromProcessorFieldNumber;
const int ProcessorConnectRequest::kFromIdxFieldNumber;
#endif  // !_MSC_VER

ProcessorConnectRequest::ProcessorConnectRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorConnectRequest::InitAsDefaultInstance() {
}

ProcessorConnectRequest::ProcessorConnectRequest(const ProcessorConnectRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorConnectRequest::SharedCtor() {
  _cached_size_ = 0;
  from_processor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  from_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorConnectRequest::~ProcessorConnectRequest() {
  SharedDtor();
}

void ProcessorConnectRequest::SharedDtor() {
  if (from_processor_ != &::google::protobuf::internal::kEmptyString) {
    delete from_processor_;
  }
  if (this != default_instance_) {
  }
}

void ProcessorConnectRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorConnectRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorConnectRequest_descriptor_;
}

const ProcessorConnectRequest& ProcessorConnectRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

ProcessorConnectRequest* ProcessorConnectRequest::default_instance_ = NULL;

ProcessorConnectRequest* ProcessorConnectRequest::New() const {
  return new ProcessorConnectRequest;
}

void ProcessorConnectRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from_processor()) {
      if (from_processor_ != &::google::protobuf::internal::kEmptyString) {
        from_processor_->clear();
      }
    }
    from_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorConnectRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from_processor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from_processor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from_processor().data(), this->from_processor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_from_idx;
        break;
      }
      
      // required int32 from_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &from_idx_)));
          set_has_from_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorConnectRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from_processor = 1;
  if (has_from_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_processor().data(), this->from_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from_processor(), output);
  }
  
  // required int32 from_idx = 2;
  if (has_from_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->from_idx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorConnectRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from_processor = 1;
  if (has_from_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from_processor().data(), this->from_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from_processor(), target);
  }
  
  // required int32 from_idx = 2;
  if (has_from_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->from_idx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorConnectRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from_processor = 1;
    if (has_from_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from_processor());
    }
    
    // required int32 from_idx = 2;
    if (has_from_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->from_idx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorConnectRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorConnectRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorConnectRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorConnectRequest::MergeFrom(const ProcessorConnectRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from_processor()) {
      set_from_processor(from.from_processor());
    }
    if (from.has_from_idx()) {
      set_from_idx(from.from_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorConnectRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorConnectRequest::CopyFrom(const ProcessorConnectRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorConnectRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProcessorConnectRequest::Swap(ProcessorConnectRequest* other) {
  if (other != this) {
    std::swap(from_processor_, other->from_processor_);
    std::swap(from_idx_, other->from_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorConnectRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorConnectRequest_descriptor_;
  metadata.reflection = ProcessorConnectRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

HeartBeatNotify::HeartBeatNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeartBeatNotify::InitAsDefaultInstance() {
}

HeartBeatNotify::HeartBeatNotify(const HeartBeatNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeartBeatNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatNotify::~HeartBeatNotify() {
  SharedDtor();
}

void HeartBeatNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatNotify_descriptor_;
}

const HeartBeatNotify& HeartBeatNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

HeartBeatNotify* HeartBeatNotify::default_instance_ = NULL;

HeartBeatNotify* HeartBeatNotify::New() const {
  return new HeartBeatNotify;
}

void HeartBeatNotify::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void HeartBeatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeartBeatNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeartBeatNotify::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatNotify::MergeFrom(const HeartBeatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatNotify::CopyFrom(const HeartBeatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatNotify::IsInitialized() const {
  
  return true;
}

void HeartBeatNotify::Swap(HeartBeatNotify* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatNotify_descriptor_;
  metadata.reflection = HeartBeatNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisRequest::kSourceFieldNumber;
const int RedisRequest::kShardkeyFieldNumber;
const int RedisRequest::kArgsFieldNumber;
const int RedisRequest::kReadonlyFieldNumber;
#endif  // !_MSC_VER

RedisRequest::RedisRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedisRequest::InitAsDefaultInstance() {
}

RedisRequest::RedisRequest(const RedisRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedisRequest::SharedCtor() {
  _cached_size_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shardkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readonly_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisRequest::~RedisRequest() {
  SharedDtor();
}

void RedisRequest::SharedDtor() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (shardkey_ != &::google::protobuf::internal::kEmptyString) {
    delete shardkey_;
  }
  if (this != default_instance_) {
  }
}

void RedisRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisRequest_descriptor_;
}

const RedisRequest& RedisRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

RedisRequest* RedisRequest::default_instance_ = NULL;

RedisRequest* RedisRequest::New() const {
  return new RedisRequest;
}

void RedisRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_shardkey()) {
      if (shardkey_ != &::google::protobuf::internal::kEmptyString) {
        shardkey_->clear();
      }
    }
    readonly_ = false;
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shardkey;
        break;
      }
      
      // required bytes shardkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shardkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_shardkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        break;
      }
      
      // repeated bytes args = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_args;
        if (input->ExpectTag(32)) goto parse_readonly;
        break;
      }
      
      // required bool readonly = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_readonly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &readonly_)));
          set_has_readonly();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedisRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(), output);
  }
  
  // required bytes shardkey = 2;
  if (has_shardkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->shardkey(), output);
  }
  
  // repeated bytes args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->args(i), output);
  }
  
  // required bool readonly = 4;
  if (has_readonly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->readonly(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedisRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }
  
  // required bytes shardkey = 2;
  if (has_shardkey()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->shardkey(), target);
  }
  
  // repeated bytes args = 3;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->args(i), target);
  }
  
  // required bool readonly = 4;
  if (has_readonly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->readonly(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedisRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string source = 1;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }
    
    // required bytes shardkey = 2;
    if (has_shardkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->shardkey());
    }
    
    // required bool readonly = 4;
    if (has_readonly()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bytes args = 3;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisRequest::MergeFrom(const RedisRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_shardkey()) {
      set_shardkey(from.shardkey());
    }
    if (from.has_readonly()) {
      set_readonly(from.readonly());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisRequest::CopyFrom(const RedisRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  return true;
}

void RedisRequest::Swap(RedisRequest* other) {
  if (other != this) {
    std::swap(source_, other->source_);
    std::swap(shardkey_, other->shardkey_);
    args_.Swap(&other->args_);
    std::swap(readonly_, other->readonly_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisRequest_descriptor_;
  metadata.reflection = RedisRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisResponse::kTypeFieldNumber;
const int RedisResponse::kIntvFieldNumber;
const int RedisResponse::kFloatvFieldNumber;
const int RedisResponse::kStrFieldNumber;
const int RedisResponse::kElementsFieldNumber;
#endif  // !_MSC_VER

RedisResponse::RedisResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedisResponse::InitAsDefaultInstance() {
}

RedisResponse::RedisResponse(const RedisResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedisResponse::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  intv_ = GOOGLE_LONGLONG(0);
  floatv_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisResponse::~RedisResponse() {
  SharedDtor();
}

void RedisResponse::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
  }
}

void RedisResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisResponse_descriptor_;
}

const RedisResponse& RedisResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

RedisResponse* RedisResponse::default_instance_ = NULL;

RedisResponse* RedisResponse::New() const {
  return new RedisResponse;
}

void RedisResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    intv_ = GOOGLE_LONGLONG(0);
    floatv_ = 0;
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intv;
        break;
      }
      
      // optional int64 intv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &intv_)));
          set_has_intv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_floatv;
        break;
      }
      
      // optional double floatv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_floatv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &floatv_)));
          set_has_floatv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str;
        break;
      }
      
      // optional bytes str = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elements;
        break;
      }
      
      // repeated .lbs.da.openservice.ipc.RedisResponse elements = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedisResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // optional int64 intv = 2;
  if (has_intv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->intv(), output);
  }
  
  // optional double floatv = 3;
  if (has_floatv()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->floatv(), output);
  }
  
  // optional bytes str = 4;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->str(), output);
  }
  
  // repeated .lbs.da.openservice.ipc.RedisResponse elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elements(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedisResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // optional int64 intv = 2;
  if (has_intv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->intv(), target);
  }
  
  // optional double floatv = 3;
  if (has_floatv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->floatv(), target);
  }
  
  // optional bytes str = 4;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->str(), target);
  }
  
  // repeated .lbs.da.openservice.ipc.RedisResponse elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elements(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedisResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional int64 intv = 2;
    if (has_intv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->intv());
    }
    
    // optional double floatv = 3;
    if (has_floatv()) {
      total_size += 1 + 8;
    }
    
    // optional bytes str = 4;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }
    
  }
  // repeated .lbs.da.openservice.ipc.RedisResponse elements = 5;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisResponse::MergeFrom(const RedisResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_intv()) {
      set_intv(from.intv());
    }
    if (from.has_floatv()) {
      set_floatv(from.floatv());
    }
    if (from.has_str()) {
      set_str(from.str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisResponse::CopyFrom(const RedisResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void RedisResponse::Swap(RedisResponse* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(intv_, other->intv_);
    std::swap(floatv_, other->floatv_);
    std::swap(str_, other->str_);
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisResponse_descriptor_;
  metadata.reflection = RedisResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatItem::kStatKeyFieldNumber;
const int StatItem::kIncValueFieldNumber;
#endif  // !_MSC_VER

StatItem::StatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatItem::InitAsDefaultInstance() {
}

StatItem::StatItem(const StatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatItem::SharedCtor() {
  _cached_size_ = 0;
  stat_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inc_value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatItem::~StatItem() {
  SharedDtor();
}

void StatItem::SharedDtor() {
  if (stat_key_ != &::google::protobuf::internal::kEmptyString) {
    delete stat_key_;
  }
  if (this != default_instance_) {
  }
}

void StatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatItem_descriptor_;
}

const StatItem& StatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

StatItem* StatItem::default_instance_ = NULL;

StatItem* StatItem::New() const {
  return new StatItem;
}

void StatItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stat_key()) {
      if (stat_key_ != &::google::protobuf::internal::kEmptyString) {
        stat_key_->clear();
      }
    }
    inc_value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stat_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stat_key().data(), this->stat_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inc_value;
        break;
      }
      
      // required int64 inc_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inc_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inc_value_)));
          set_has_inc_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stat_key = 1;
  if (has_stat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_key().data(), this->stat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stat_key(), output);
  }
  
  // required int64 inc_value = 2;
  if (has_inc_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->inc_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stat_key = 1;
  if (has_stat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_key().data(), this->stat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_key(), target);
  }
  
  // required int64 inc_value = 2;
  if (has_inc_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->inc_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stat_key = 1;
    if (has_stat_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stat_key());
    }
    
    // required int64 inc_value = 2;
    if (has_inc_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inc_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatItem::MergeFrom(const StatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_key()) {
      set_stat_key(from.stat_key());
    }
    if (from.has_inc_value()) {
      set_inc_value(from.inc_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatItem::CopyFrom(const StatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StatItem::Swap(StatItem* other) {
  if (other != this) {
    std::swap(stat_key_, other->stat_key_);
    std::swap(inc_value_, other->inc_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatItem_descriptor_;
  metadata.reflection = StatItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatReport::kItemsFieldNumber;
#endif  // !_MSC_VER

StatReport::StatReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatReport::InitAsDefaultInstance() {
}

StatReport::StatReport(const StatReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatReport::~StatReport() {
  SharedDtor();
}

void StatReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatReport_descriptor_;
}

const StatReport& StatReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

StatReport* StatReport::default_instance_ = NULL;

StatReport* StatReport::New() const {
  return new StatReport;
}

void StatReport::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.ipc.StatItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.ipc.StatItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.ipc.StatItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatReport::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.ipc.StatItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatReport::MergeFrom(const StatReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatReport::CopyFrom(const StatReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReport::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void StatReport::Swap(StatReport* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatReport_descriptor_;
  metadata.reflection = StatReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProcessorUpgrade::kOldProcessorFieldNumber;
const int ProcessorUpgrade::kNewProcessorFieldNumber;
#endif  // !_MSC_VER

ProcessorUpgrade::ProcessorUpgrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProcessorUpgrade::InitAsDefaultInstance() {
}

ProcessorUpgrade::ProcessorUpgrade(const ProcessorUpgrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProcessorUpgrade::SharedCtor() {
  _cached_size_ = 0;
  old_processor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_processor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProcessorUpgrade::~ProcessorUpgrade() {
  SharedDtor();
}

void ProcessorUpgrade::SharedDtor() {
  if (old_processor_ != &::google::protobuf::internal::kEmptyString) {
    delete old_processor_;
  }
  if (new_processor_ != &::google::protobuf::internal::kEmptyString) {
    delete new_processor_;
  }
  if (this != default_instance_) {
  }
}

void ProcessorUpgrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProcessorUpgrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessorUpgrade_descriptor_;
}

const ProcessorUpgrade& ProcessorUpgrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

ProcessorUpgrade* ProcessorUpgrade::default_instance_ = NULL;

ProcessorUpgrade* ProcessorUpgrade::New() const {
  return new ProcessorUpgrade;
}

void ProcessorUpgrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_old_processor()) {
      if (old_processor_ != &::google::protobuf::internal::kEmptyString) {
        old_processor_->clear();
      }
    }
    if (has_new_processor()) {
      if (new_processor_ != &::google::protobuf::internal::kEmptyString) {
        new_processor_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProcessorUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string old_processor = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_processor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->old_processor().data(), this->old_processor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_new_processor;
        break;
      }
      
      // required string new_processor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_processor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_processor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_processor().data(), this->new_processor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProcessorUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string old_processor = 1;
  if (has_old_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_processor().data(), this->old_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->old_processor(), output);
  }
  
  // required string new_processor = 2;
  if (has_new_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_processor().data(), this->new_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->new_processor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProcessorUpgrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string old_processor = 1;
  if (has_old_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->old_processor().data(), this->old_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->old_processor(), target);
  }
  
  // required string new_processor = 2;
  if (has_new_processor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_processor().data(), this->new_processor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->new_processor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProcessorUpgrade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string old_processor = 1;
    if (has_old_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->old_processor());
    }
    
    // required string new_processor = 2;
    if (has_new_processor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_processor());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProcessorUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProcessorUpgrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProcessorUpgrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProcessorUpgrade::MergeFrom(const ProcessorUpgrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_old_processor()) {
      set_old_processor(from.old_processor());
    }
    if (from.has_new_processor()) {
      set_new_processor(from.new_processor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProcessorUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessorUpgrade::CopyFrom(const ProcessorUpgrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessorUpgrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ProcessorUpgrade::Swap(ProcessorUpgrade* other) {
  if (other != this) {
    std::swap(old_processor_, other->old_processor_);
    std::swap(new_processor_, other->new_processor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProcessorUpgrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProcessorUpgrade_descriptor_;
  metadata.reflection = ProcessorUpgrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeLogLevel::kLevelFieldNumber;
#endif  // !_MSC_VER

ChangeLogLevel::ChangeLogLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeLogLevel::InitAsDefaultInstance() {
}

ChangeLogLevel::ChangeLogLevel(const ChangeLogLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeLogLevel::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeLogLevel::~ChangeLogLevel() {
  SharedDtor();
}

void ChangeLogLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeLogLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeLogLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeLogLevel_descriptor_;
}

const ChangeLogLevel& ChangeLogLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ipc_2eproto();  return *default_instance_;
}

ChangeLogLevel* ChangeLogLevel::default_instance_ = NULL;

ChangeLogLevel* ChangeLogLevel::New() const {
  return new ChangeLogLevel;
}

void ChangeLogLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeLogLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeLogLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeLogLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeLogLevel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeLogLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeLogLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeLogLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeLogLevel::MergeFrom(const ChangeLogLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeLogLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeLogLevel::CopyFrom(const ChangeLogLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeLogLevel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ChangeLogLevel::Swap(ChangeLogLevel* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeLogLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeLogLevel_descriptor_;
  metadata.reflection = ChangeLogLevel_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
