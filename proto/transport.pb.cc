// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "transport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* TransportFileRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportFileRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransportFileResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportFileResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransportType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TransportRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_transport_2eproto() {
  protobuf_AddDesc_transport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "transport.proto");
  GOOGLE_CHECK(file != NULL);
  TransportFileRequest_descriptor_ = file->message_type(0);
  static const int TransportFileRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, filecontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, filecmd_),
  };
  TransportFileRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportFileRequest_descriptor_,
      TransportFileRequest::default_instance_,
      TransportFileRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportFileRequest));
  TransportFileResponse_descriptor_ = file->message_type(1);
  static const int TransportFileResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileResponse, errmsg_),
  };
  TransportFileResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportFileResponse_descriptor_,
      TransportFileResponse::default_instance_,
      TransportFileResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportFileResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportFileResponse));
  TransportType_descriptor_ = file->enum_type(0);
  TransportRet_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_transport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportFileRequest_descriptor_, &TransportFileRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportFileResponse_descriptor_, &TransportFileResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_transport_2eproto() {
  delete TransportFileRequest::default_instance_;
  delete TransportFileRequest_reflection_;
  delete TransportFileResponse::default_instance_;
  delete TransportFileResponse_reflection_;
}

void protobuf_AddDesc_transport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lbs::da::openservice::protobuf_AddDesc_pbrpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017transport.proto\022\022lbs.da.openservice\032\013p"
    "brpc.proto\"\304\001\n\024TransportFileRequest\0221\n\006h"
    "eader\030\001 \002(\0132!.lbs.da.openservice.Request"
    "Header\022/\n\004type\030\002 \002(\0162!.lbs.da.openservic"
    "e.TransportType\022\020\n\010fileName\030\003 \002(\t\022\023\n\013fil"
    "eContent\030\004 \002(\t\022\020\n\010filePath\030\005 \001(\t\022\017\n\007file"
    "Cmd\030\006 \001(\t\"X\n\025TransportFileResponse\022/\n\005va"
    "lue\030\001 \002(\0162 .lbs.da.openservice.Transport"
    "Ret\022\016\n\006errmsg\030\002 \001(\t*\274\001\n\rTransportType\022\020\n"
    "\014SO_CONF_FILE\020\000\022\023\n\017SO_DOWNLOAD_CMD\020\001\022\021\n\r"
    "SO_DELETE_CMD\020\002\022\023\n\017REDIS_CONF_FILE\020\003\022\021\n\r"
    "DIS_CONF_FILE\020\004\022\027\n\023INTERFACE_CONF_FILE\020\005"
    "\022\027\n\023SAFECHECK_CONF_FILE\020\006\022\027\n\023SAFECHECK_D"
    "ATA_FILE\020\007*7\n\014TransportRet\022\022\n\016TRANSPORT_"
    "SUCC\020\000\022\023\n\017TRANSPORT_FAILD\020\001B\002H\001", 591);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "transport.proto", &protobuf_RegisterTypes);
  TransportFileRequest::default_instance_ = new TransportFileRequest();
  TransportFileResponse::default_instance_ = new TransportFileResponse();
  TransportFileRequest::default_instance_->InitAsDefaultInstance();
  TransportFileResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_transport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_transport_2eproto {
  StaticDescriptorInitializer_transport_2eproto() {
    protobuf_AddDesc_transport_2eproto();
  }
} static_descriptor_initializer_transport_2eproto_;

const ::google::protobuf::EnumDescriptor* TransportType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportType_descriptor_;
}
bool TransportType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TransportRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportRet_descriptor_;
}
bool TransportRet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TransportFileRequest::kHeaderFieldNumber;
const int TransportFileRequest::kTypeFieldNumber;
const int TransportFileRequest::kFileNameFieldNumber;
const int TransportFileRequest::kFileContentFieldNumber;
const int TransportFileRequest::kFilePathFieldNumber;
const int TransportFileRequest::kFileCmdFieldNumber;
#endif  // !_MSC_VER

TransportFileRequest::TransportFileRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportFileRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

TransportFileRequest::TransportFileRequest(const TransportFileRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportFileRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  type_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filecmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportFileRequest::~TransportFileRequest() {
  SharedDtor();
}

void TransportFileRequest::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  if (filecontent_ != &::google::protobuf::internal::kEmptyString) {
    delete filecontent_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (filecmd_ != &::google::protobuf::internal::kEmptyString) {
    delete filecmd_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void TransportFileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportFileRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportFileRequest_descriptor_;
}

const TransportFileRequest& TransportFileRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transport_2eproto();  return *default_instance_;
}

TransportFileRequest* TransportFileRequest::default_instance_ = NULL;

TransportFileRequest* TransportFileRequest::New() const {
  return new TransportFileRequest;
}

void TransportFileRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    type_ = 0;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_filecontent()) {
      if (filecontent_ != &::google::protobuf::internal::kEmptyString) {
        filecontent_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    if (has_filecmd()) {
      if (filecmd_ != &::google::protobuf::internal::kEmptyString) {
        filecmd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .lbs.da.openservice.TransportType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::TransportType_IsValid(value)) {
            set_type(static_cast< lbs::da::openservice::TransportType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }
      
      // required string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fileContent;
        break;
      }
      
      // required string fileContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filecontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filecontent().data(), this->filecontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filePath;
        break;
      }
      
      // optional string filePath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fileCmd;
        break;
      }
      
      // optional string fileCmd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileCmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filecmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filecmd().data(), this->filecmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .lbs.da.openservice.TransportType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // required string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }
  
  // required string fileContent = 4;
  if (has_filecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filecontent().data(), this->filecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->filecontent(), output);
  }
  
  // optional string filePath = 5;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filepath(), output);
  }
  
  // optional string fileCmd = 6;
  if (has_filecmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filecmd().data(), this->filecmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->filecmd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportFileRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .lbs.da.openservice.TransportType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // required string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->filename(), target);
  }
  
  // required string fileContent = 4;
  if (has_filecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filecontent().data(), this->filecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->filecontent(), target);
  }
  
  // optional string filePath = 5;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->filepath(), target);
  }
  
  // optional string fileCmd = 6;
  if (has_filecmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filecmd().data(), this->filecmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->filecmd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportFileRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .lbs.da.openservice.TransportType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }
    
    // required string fileContent = 4;
    if (has_filecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filecontent());
    }
    
    // optional string filePath = 5;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
    // optional string fileCmd = 6;
    if (has_filecmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filecmd());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportFileRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportFileRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportFileRequest::MergeFrom(const TransportFileRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filecontent()) {
      set_filecontent(from.filecontent());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_filecmd()) {
      set_filecmd(from.filecmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportFileRequest::CopyFrom(const TransportFileRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportFileRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void TransportFileRequest::Swap(TransportFileRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(type_, other->type_);
    std::swap(filename_, other->filename_);
    std::swap(filecontent_, other->filecontent_);
    std::swap(filepath_, other->filepath_);
    std::swap(filecmd_, other->filecmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportFileRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportFileRequest_descriptor_;
  metadata.reflection = TransportFileRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportFileResponse::kValueFieldNumber;
const int TransportFileResponse::kErrmsgFieldNumber;
#endif  // !_MSC_VER

TransportFileResponse::TransportFileResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransportFileResponse::InitAsDefaultInstance() {
}

TransportFileResponse::TransportFileResponse(const TransportFileResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransportFileResponse::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportFileResponse::~TransportFileResponse() {
  SharedDtor();
}

void TransportFileResponse::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void TransportFileResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportFileResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportFileResponse_descriptor_;
}

const TransportFileResponse& TransportFileResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_transport_2eproto();  return *default_instance_;
}

TransportFileResponse* TransportFileResponse::default_instance_ = NULL;

TransportFileResponse* TransportFileResponse::New() const {
  return new TransportFileResponse;
}

void TransportFileResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0;
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
        errmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.TransportRet value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::TransportRet_IsValid(value)) {
            set_value(static_cast< lbs::da::openservice::TransportRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_errmsg;
        break;
      }
      
      // optional string errmsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransportFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.TransportRet value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->value(), output);
  }
  
  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->errmsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransportFileResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.TransportRet value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->value(), target);
  }
  
  // optional string errmsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errmsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransportFileResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.TransportRet value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }
    
    // optional string errmsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportFileResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportFileResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportFileResponse::MergeFrom(const TransportFileResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportFileResponse::CopyFrom(const TransportFileResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportFileResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void TransportFileResponse::Swap(TransportFileResponse* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportFileResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportFileResponse_descriptor_;
  metadata.reflection = TransportFileResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
