// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef PROTOBUF_common_2eproto__INCLUDED
#define PROTOBUF_common_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace helloworld {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_2eproto();
void protobuf_AssignDesc_common_2eproto();
void protobuf_ShutdownFile_common_2eproto();

class phonenumber;

enum phonetype {
  MOBILE = 0,
  HOME = 1,
  WORK = 2
};
bool phonetype_IsValid(int value);
const phonetype phonetype_MIN = MOBILE;
const phonetype phonetype_MAX = WORK;
const int phonetype_ARRAYSIZE = phonetype_MAX + 1;

const ::google::protobuf::EnumDescriptor* phonetype_descriptor();
inline const ::std::string& phonetype_Name(phonetype value) {
  return ::google::protobuf::internal::NameOfEnum(
    phonetype_descriptor(), value);
}
inline bool phonetype_Parse(
    const ::std::string& name, phonetype* value) {
  return ::google::protobuf::internal::ParseNamedEnum<phonetype>(
    phonetype_descriptor(), name, value);
}
// ===================================================================

class phonenumber : public ::google::protobuf::Message {
 public:
  phonenumber();
  virtual ~phonenumber();
  
  phonenumber(const phonenumber& from);
  
  inline phonenumber& operator=(const phonenumber& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const phonenumber& default_instance();
  
  void Swap(phonenumber* other);
  
  // implements Message ----------------------------------------------
  
  phonenumber* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const phonenumber& from);
  void MergeFrom(const phonenumber& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline const ::std::string& number() const;
  inline void set_number(const ::std::string& value);
  inline void set_number(const char* value);
  inline void set_number(const char* value, size_t size);
  inline ::std::string* mutable_number();
  inline ::std::string* release_number();
  
  // optional .helloworld.phonetype type = 2 [default = MOBILE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline helloworld::phonetype type() const;
  inline void set_type(helloworld::phonetype value);
  
  // @@protoc_insertion_point(class_scope:helloworld.phonenumber)
 private:
  inline void set_has_number();
  inline void clear_has_number();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* number_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_common_2eproto();
  friend void protobuf_AssignDesc_common_2eproto();
  friend void protobuf_ShutdownFile_common_2eproto();
  
  void InitAsDefaultInstance();
  static phonenumber* default_instance_;
};
// ===================================================================


// ===================================================================

// phonenumber

// required string number = 1;
inline bool phonenumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void phonenumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void phonenumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void phonenumber::clear_number() {
  if (number_ != &::google::protobuf::internal::kEmptyString) {
    number_->clear();
  }
  clear_has_number();
}
inline const ::std::string& phonenumber::number() const {
  return *number_;
}
inline void phonenumber::set_number(const ::std::string& value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void phonenumber::set_number(const char* value) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(value);
}
inline void phonenumber::set_number(const char* value, size_t size) {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* phonenumber::mutable_number() {
  set_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    number_ = new ::std::string;
  }
  return number_;
}
inline ::std::string* phonenumber::release_number() {
  clear_has_number();
  if (number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = number_;
    number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .helloworld.phonetype type = 2 [default = MOBILE];
inline bool phonenumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void phonenumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void phonenumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void phonenumber::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline helloworld::phonetype phonenumber::type() const {
  return static_cast< helloworld::phonetype >(type_);
}
inline void phonenumber::set_type(helloworld::phonetype value) {
  GOOGLE_DCHECK(helloworld::phonetype_IsValid(value));
  set_has_type();
  type_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace helloworld

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< helloworld::phonetype>() {
  return helloworld::phonetype_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_2eproto__INCLUDED
