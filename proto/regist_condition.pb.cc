// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "regist_condition.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* NameVal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NameVal_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* TimeRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TimeRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* SourceRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SourceRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajStatusRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajStatusRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* IsStayRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IsStayRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoiRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* AoiRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AoiRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrMatchRule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrMatchRule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rule_reflection_ = NULL;
const ::google::protobuf::Descriptor* Condition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Condition_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistConditionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistConditionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistConditionResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistConditionResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTriggerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTriggerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetTriggerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetTriggerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RuleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Operation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_regist_5fcondition_2eproto() {
  protobuf_AddDesc_regist_5fcondition_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "regist_condition.proto");
  GOOGLE_CHECK(file != NULL);
  NameVal_descriptor_ = file->message_type(0);
  static const int NameVal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameVal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameVal, value_),
  };
  NameVal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NameVal_descriptor_,
      NameVal::default_instance_,
      NameVal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameVal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NameVal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NameVal));
  LocationRule_descriptor_ = file->message_type(1);
  static const int LocationRule_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationRule, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationRule, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationRule, r_),
  };
  LocationRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationRule_descriptor_,
      LocationRule::default_instance_,
      LocationRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationRule));
  TimeRule_descriptor_ = file->message_type(2);
  static const int TimeRule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRule, t_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRule, range_),
  };
  TimeRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TimeRule_descriptor_,
      TimeRule::default_instance_,
      TimeRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TimeRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TimeRule));
  SourceRule_descriptor_ = file->message_type(3);
  static const int SourceRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRule, source_),
  };
  SourceRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SourceRule_descriptor_,
      SourceRule::default_instance_,
      SourceRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SourceRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SourceRule));
  TrajStatusRule_descriptor_ = file->message_type(4);
  static const int TrajStatusRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusRule, traj_status_),
  };
  TrajStatusRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajStatusRule_descriptor_,
      TrajStatusRule::default_instance_,
      TrajStatusRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajStatusRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajStatusRule));
  IsStayRule_descriptor_ = file->message_type(5);
  static const int IsStayRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsStayRule, is_stay_),
  };
  IsStayRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IsStayRule_descriptor_,
      IsStayRule::default_instance_,
      IsStayRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsStayRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IsStayRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IsStayRule));
  PoiRule_descriptor_ = file->message_type(6);
  static const int PoiRule_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, poi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, poi_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, poi_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, poi_r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, poi_tag_),
  };
  PoiRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoiRule_descriptor_,
      PoiRule::default_instance_,
      PoiRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoiRule));
  AoiRule_descriptor_ = file->message_type(7);
  static const int AoiRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiRule, aoi_id_),
  };
  AoiRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AoiRule_descriptor_,
      AoiRule::default_instance_,
      AoiRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AoiRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AoiRule));
  StrMatchRule_descriptor_ = file->message_type(8);
  static const int StrMatchRule_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrMatchRule, str_rules_),
  };
  StrMatchRule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrMatchRule_descriptor_,
      StrMatchRule::default_instance_,
      StrMatchRule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrMatchRule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrMatchRule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrMatchRule));
  Rule_descriptor_ = file->message_type(9);
  static const int Rule_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, traj_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, is_stay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, aoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, str_rule_),
  };
  Rule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rule_descriptor_,
      Rule::default_instance_,
      Rule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rule));
  Condition_descriptor_ = file->message_type(10);
  static const int Condition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, rules_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, append_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, tag_),
  };
  Condition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Condition_descriptor_,
      Condition::default_instance_,
      Condition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Condition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Condition));
  RegistInfo_descriptor_ = file->message_type(11);
  static const int RegistInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistInfo, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistInfo, cond_),
  };
  RegistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistInfo_descriptor_,
      RegistInfo::default_instance_,
      RegistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistInfo));
  RegistConditionRequest_descriptor_ = file->message_type(12);
  static const int RegistConditionRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionRequest, regist_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionRequest, operation_),
  };
  RegistConditionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistConditionRequest_descriptor_,
      RegistConditionRequest::default_instance_,
      RegistConditionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistConditionRequest));
  RegistConditionResponse_descriptor_ = file->message_type(13);
  static const int RegistConditionResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionResponse, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionResponse, error_),
  };
  RegistConditionResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistConditionResponse_descriptor_,
      RegistConditionResponse::default_instance_,
      RegistConditionResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistConditionResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistConditionResponse));
  Trigger_descriptor_ = file->message_type(14);
  static const int Trigger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, post_url_),
  };
  Trigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trigger_descriptor_,
      Trigger::default_instance_,
      Trigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trigger));
  SetTriggerRequest_descriptor_ = file->message_type(15);
  static const int SetTriggerRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerRequest, trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerRequest, operation_),
  };
  SetTriggerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTriggerRequest_descriptor_,
      SetTriggerRequest::default_instance_,
      SetTriggerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTriggerRequest));
  SetTriggerResponse_descriptor_ = file->message_type(16);
  static const int SetTriggerResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerResponse, is_success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerResponse, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerResponse, error_),
  };
  SetTriggerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetTriggerResponse_descriptor_,
      SetTriggerResponse::default_instance_,
      SetTriggerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetTriggerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetTriggerResponse));
  RuleType_descriptor_ = file->enum_type(0);
  Operation_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_regist_5fcondition_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NameVal_descriptor_, &NameVal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationRule_descriptor_, &LocationRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TimeRule_descriptor_, &TimeRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SourceRule_descriptor_, &SourceRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajStatusRule_descriptor_, &TrajStatusRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IsStayRule_descriptor_, &IsStayRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoiRule_descriptor_, &PoiRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AoiRule_descriptor_, &AoiRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrMatchRule_descriptor_, &StrMatchRule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rule_descriptor_, &Rule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Condition_descriptor_, &Condition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistInfo_descriptor_, &RegistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistConditionRequest_descriptor_, &RegistConditionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistConditionResponse_descriptor_, &RegistConditionResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trigger_descriptor_, &Trigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTriggerRequest_descriptor_, &SetTriggerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetTriggerResponse_descriptor_, &SetTriggerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_regist_5fcondition_2eproto() {
  delete NameVal::default_instance_;
  delete NameVal_reflection_;
  delete LocationRule::default_instance_;
  delete LocationRule_reflection_;
  delete TimeRule::default_instance_;
  delete TimeRule_reflection_;
  delete SourceRule::default_instance_;
  delete SourceRule_reflection_;
  delete TrajStatusRule::default_instance_;
  delete TrajStatusRule_reflection_;
  delete IsStayRule::default_instance_;
  delete IsStayRule_reflection_;
  delete PoiRule::default_instance_;
  delete PoiRule_reflection_;
  delete AoiRule::default_instance_;
  delete AoiRule_reflection_;
  delete StrMatchRule::default_instance_;
  delete StrMatchRule_reflection_;
  delete Rule::default_instance_;
  delete Rule_reflection_;
  delete Condition::default_instance_;
  delete Condition_reflection_;
  delete RegistInfo::default_instance_;
  delete RegistInfo_reflection_;
  delete RegistConditionRequest::default_instance_;
  delete RegistConditionRequest_reflection_;
  delete RegistConditionResponse::default_instance_;
  delete RegistConditionResponse_reflection_;
  delete Trigger::default_instance_;
  delete Trigger_reflection_;
  delete SetTriggerRequest::default_instance_;
  delete SetTriggerRequest_reflection_;
  delete SetTriggerResponse::default_instance_;
  delete SetTriggerResponse_reflection_;
}

void protobuf_AddDesc_regist_5fcondition_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::lbs::da::openservice::protobuf_AddDesc_pbrpc_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026regist_condition.proto\022\022lbs.da.openser"
    "vice\032\013pbrpc.proto\"&\n\007NameVal\022\014\n\004name\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\t\"/\n\014LocationRule\022\t\n\001x\030\001"
    " \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001r\030\003 \001(\001\"$\n\010TimeRule\022\t"
    "\n\001t\030\001 \001(\005\022\r\n\005range\030\002 \001(\005\"\034\n\nSourceRule\022\016"
    "\n\006source\030\001 \003(\t\"I\n\016TrajStatusRule\0227\n\013traj"
    "_status\030\001 \003(\0162\".lbs.da.openservice.UserT"
    "rajStatus\"\035\n\nIsStayRule\022\017\n\007is_stay\030\001 \001(\010"
    "\"W\n\007PoiRule\022\016\n\006poi_id\030\001 \001(\t\022\r\n\005poi_x\030\002 \001"
    "(\001\022\r\n\005poi_y\030\003 \001(\001\022\r\n\005poi_r\030\004 \001(\001\022\017\n\007poi_"
    "tag\030\005 \001(\t\"\031\n\007AoiRule\022\016\n\006aoi_id\030\001 \001(\t\">\n\014"
    "StrMatchRule\022.\n\tstr_rules\030\001 \003(\0132\033.lbs.da"
    ".openservice.NameVal\"\264\003\n\004Rule\022*\n\004type\030\001 "
    "\002(\0162\034.lbs.da.openservice.RuleType\0222\n\010loc"
    "ation\030\002 \001(\0132 .lbs.da.openservice.Locatio"
    "nRule\022*\n\004time\030\003 \001(\0132\034.lbs.da.openservice"
    ".TimeRule\022.\n\006source\030\004 \001(\0132\036.lbs.da.opens"
    "ervice.SourceRule\0227\n\013traj_status\030\005 \001(\0132\""
    ".lbs.da.openservice.TrajStatusRule\022/\n\007is"
    "_stay\030\006 \001(\0132\036.lbs.da.openservice.IsStayR"
    "ule\022(\n\003poi\030\007 \001(\0132\033.lbs.da.openservice.Po"
    "iRule\022(\n\003aoi\030\010 \001(\0132\033.lbs.da.openservice."
    "AoiRule\0222\n\010str_rule\030d \001(\0132 .lbs.da.opens"
    "ervice.StrMatchRule\"Q\n\tCondition\022\'\n\005rule"
    "s\030\001 \003(\0132\030.lbs.da.openservice.Rule\022\016\n\006app"
    "end\030\002 \001(\t\022\013\n\003tag\030\003 \001(\t\"G\n\nRegistInfo\022\014\n\004"
    "cuid\030\001 \001(\t\022+\n\004cond\030\002 \001(\0132\035.lbs.da.opense"
    "rvice.Condition\"\262\001\n\026RegistConditionReque"
    "st\0221\n\006header\030\001 \002(\0132!.lbs.da.openservice."
    "RequestHeader\0223\n\013regist_info\030\002 \003(\0132\036.lbs"
    ".da.openservice.RegistInfo\0220\n\toperation\030"
    "\003 \002(\0162\035.lbs.da.openservice.Operation\"I\n\027"
    "RegistConditionResponse\022\022\n\nis_success\030\001 "
    "\001(\010\022\013\n\003num\030\002 \001(\005\022\r\n\005error\030\003 \001(\t\"(\n\007Trigg"
    "er\022\013\n\003tag\030\001 \001(\t\022\020\n\010post_url\030\002 \001(\t\"\246\001\n\021Se"
    "tTriggerRequest\0221\n\006header\030\001 \002(\0132!.lbs.da"
    ".openservice.RequestHeader\022,\n\007trigger\030\002 "
    "\003(\0132\033.lbs.da.openservice.Trigger\0220\n\toper"
    "ation\030\003 \002(\0162\035.lbs.da.openservice.Operati"
    "on\"D\n\022SetTriggerResponse\022\022\n\nis_success\030\001"
    " \001(\010\022\013\n\003num\030\002 \001(\005\022\r\n\005error\030\003 \001(\t*\222\001\n\010Rul"
    "eType\022\021\n\rLOCATION_RULE\020\001\022\r\n\tTIME_RULE\020\002\022"
    "\017\n\013SOURCE_RULE\020\003\022\023\n\017TRAJSTATUS_RULE\020\004\022\017\n"
    "\013ISSTAY_RULE\020\005\022\014\n\010POI_RULE\020\006\022\014\n\010AOI_RULE"
    "\020\007\022\021\n\rSTRMATCH_RULE\020\010*[\n\tOperation\022\n\n\006TO"
    "_ADD\020\001\022\r\n\tTO_DELETE\020\002\022\031\n\025TO_DELETE_BY_US"
    "ER_TAG\020\003\022\030\n\024TO_DELETE_BY_POI_TAG\020\004B\002H\001", 1878);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "regist_condition.proto", &protobuf_RegisterTypes);
  NameVal::default_instance_ = new NameVal();
  LocationRule::default_instance_ = new LocationRule();
  TimeRule::default_instance_ = new TimeRule();
  SourceRule::default_instance_ = new SourceRule();
  TrajStatusRule::default_instance_ = new TrajStatusRule();
  IsStayRule::default_instance_ = new IsStayRule();
  PoiRule::default_instance_ = new PoiRule();
  AoiRule::default_instance_ = new AoiRule();
  StrMatchRule::default_instance_ = new StrMatchRule();
  Rule::default_instance_ = new Rule();
  Condition::default_instance_ = new Condition();
  RegistInfo::default_instance_ = new RegistInfo();
  RegistConditionRequest::default_instance_ = new RegistConditionRequest();
  RegistConditionResponse::default_instance_ = new RegistConditionResponse();
  Trigger::default_instance_ = new Trigger();
  SetTriggerRequest::default_instance_ = new SetTriggerRequest();
  SetTriggerResponse::default_instance_ = new SetTriggerResponse();
  NameVal::default_instance_->InitAsDefaultInstance();
  LocationRule::default_instance_->InitAsDefaultInstance();
  TimeRule::default_instance_->InitAsDefaultInstance();
  SourceRule::default_instance_->InitAsDefaultInstance();
  TrajStatusRule::default_instance_->InitAsDefaultInstance();
  IsStayRule::default_instance_->InitAsDefaultInstance();
  PoiRule::default_instance_->InitAsDefaultInstance();
  AoiRule::default_instance_->InitAsDefaultInstance();
  StrMatchRule::default_instance_->InitAsDefaultInstance();
  Rule::default_instance_->InitAsDefaultInstance();
  Condition::default_instance_->InitAsDefaultInstance();
  RegistInfo::default_instance_->InitAsDefaultInstance();
  RegistConditionRequest::default_instance_->InitAsDefaultInstance();
  RegistConditionResponse::default_instance_->InitAsDefaultInstance();
  Trigger::default_instance_->InitAsDefaultInstance();
  SetTriggerRequest::default_instance_->InitAsDefaultInstance();
  SetTriggerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_regist_5fcondition_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_regist_5fcondition_2eproto {
  StaticDescriptorInitializer_regist_5fcondition_2eproto() {
    protobuf_AddDesc_regist_5fcondition_2eproto();
  }
} static_descriptor_initializer_regist_5fcondition_2eproto_;

const ::google::protobuf::EnumDescriptor* RuleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuleType_descriptor_;
}
bool RuleType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Operation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Operation_descriptor_;
}
bool Operation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int NameVal::kNameFieldNumber;
const int NameVal::kValueFieldNumber;
#endif  // !_MSC_VER

NameVal::NameVal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NameVal::InitAsDefaultInstance() {
}

NameVal::NameVal(const NameVal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NameVal::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NameVal::~NameVal() {
  SharedDtor();
}

void NameVal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void NameVal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NameVal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NameVal_descriptor_;
}

const NameVal& NameVal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

NameVal* NameVal::default_instance_ = NULL;

NameVal* NameVal::New() const {
  return new NameVal;
}

void NameVal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NameVal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NameVal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NameVal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NameVal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NameVal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NameVal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NameVal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NameVal::MergeFrom(const NameVal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NameVal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NameVal::CopyFrom(const NameVal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameVal::IsInitialized() const {
  
  return true;
}

void NameVal::Swap(NameVal* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NameVal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NameVal_descriptor_;
  metadata.reflection = NameVal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LocationRule::kXFieldNumber;
const int LocationRule::kYFieldNumber;
const int LocationRule::kRFieldNumber;
#endif  // !_MSC_VER

LocationRule::LocationRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LocationRule::InitAsDefaultInstance() {
}

LocationRule::LocationRule(const LocationRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LocationRule::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  r_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationRule::~LocationRule() {
  SharedDtor();
}

void LocationRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LocationRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationRule_descriptor_;
}

const LocationRule& LocationRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

LocationRule* LocationRule::default_instance_ = NULL;

LocationRule* LocationRule::New() const {
  return new LocationRule;
}

void LocationRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    r_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_r;
        break;
      }
      
      // optional double r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LocationRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // optional double r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LocationRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // optional double r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->r(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LocationRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double r = 3;
    if (has_r()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationRule::MergeFrom(const LocationRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationRule::CopyFrom(const LocationRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationRule::IsInitialized() const {
  
  return true;
}

void LocationRule::Swap(LocationRule* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(r_, other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationRule_descriptor_;
  metadata.reflection = LocationRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TimeRule::kTFieldNumber;
const int TimeRule::kRangeFieldNumber;
#endif  // !_MSC_VER

TimeRule::TimeRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TimeRule::InitAsDefaultInstance() {
}

TimeRule::TimeRule(const TimeRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TimeRule::SharedCtor() {
  _cached_size_ = 0;
  t_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeRule::~TimeRule() {
  SharedDtor();
}

void TimeRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TimeRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TimeRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TimeRule_descriptor_;
}

const TimeRule& TimeRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

TimeRule* TimeRule::default_instance_ = NULL;

TimeRule* TimeRule::New() const {
  return new TimeRule;
}

void TimeRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    t_ = 0;
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TimeRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 t = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &t_)));
          set_has_t();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_range;
        break;
      }
      
      // optional int32 range = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 t = 1;
  if (has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->t(), output);
  }
  
  // optional int32 range = 2;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TimeRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 t = 1;
  if (has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->t(), target);
  }
  
  // optional int32 range = 2;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TimeRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 t = 1;
    if (has_t()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->t());
    }
    
    // optional int32 range = 2;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TimeRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TimeRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TimeRule::MergeFrom(const TimeRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_t()) {
      set_t(from.t());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TimeRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeRule::CopyFrom(const TimeRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRule::IsInitialized() const {
  
  return true;
}

void TimeRule::Swap(TimeRule* other) {
  if (other != this) {
    std::swap(t_, other->t_);
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TimeRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TimeRule_descriptor_;
  metadata.reflection = TimeRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SourceRule::kSourceFieldNumber;
#endif  // !_MSC_VER

SourceRule::SourceRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SourceRule::InitAsDefaultInstance() {
}

SourceRule::SourceRule(const SourceRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SourceRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SourceRule::~SourceRule() {
  SharedDtor();
}

void SourceRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SourceRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SourceRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceRule_descriptor_;
}

const SourceRule& SourceRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

SourceRule* SourceRule::default_instance_ = NULL;

SourceRule* SourceRule::New() const {
  return new SourceRule;
}

void SourceRule::Clear() {
  source_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SourceRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source(0).data(), this->source(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_source;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SourceRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string source = 1;
  for (int i = 0; i < this->source_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->source(i).data(), this->source(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->source(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SourceRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string source = 1;
  for (int i = 0; i < this->source_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source(i).data(), this->source(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->source(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SourceRule::ByteSize() const {
  int total_size = 0;
  
  // repeated string source = 1;
  total_size += 1 * this->source_size();
  for (int i = 0; i < this->source_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->source(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SourceRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SourceRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SourceRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SourceRule::MergeFrom(const SourceRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  source_.MergeFrom(from.source_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SourceRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SourceRule::CopyFrom(const SourceRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceRule::IsInitialized() const {
  
  return true;
}

void SourceRule::Swap(SourceRule* other) {
  if (other != this) {
    source_.Swap(&other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SourceRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SourceRule_descriptor_;
  metadata.reflection = SourceRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajStatusRule::kTrajStatusFieldNumber;
#endif  // !_MSC_VER

TrajStatusRule::TrajStatusRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajStatusRule::InitAsDefaultInstance() {
}

TrajStatusRule::TrajStatusRule(const TrajStatusRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajStatusRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajStatusRule::~TrajStatusRule() {
  SharedDtor();
}

void TrajStatusRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajStatusRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajStatusRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajStatusRule_descriptor_;
}

const TrajStatusRule& TrajStatusRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

TrajStatusRule* TrajStatusRule::default_instance_ = NULL;

TrajStatusRule* TrajStatusRule::New() const {
  return new TrajStatusRule;
}

void TrajStatusRule::Clear() {
  traj_status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajStatusRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.UserTrajStatus traj_status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_traj_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::UserTrajStatus_IsValid(value)) {
            add_traj_status(static_cast< lbs::da::openservice::UserTrajStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &lbs::da::openservice::UserTrajStatus_IsValid,
                 this->mutable_traj_status())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_traj_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajStatusRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.UserTrajStatus traj_status = 1;
  for (int i = 0; i < this->traj_status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->traj_status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajStatusRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.UserTrajStatus traj_status = 1;
  for (int i = 0; i < this->traj_status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->traj_status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajStatusRule::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.UserTrajStatus traj_status = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->traj_status_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->traj_status(i));
    }
    total_size += 1 * this->traj_status_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajStatusRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajStatusRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajStatusRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajStatusRule::MergeFrom(const TrajStatusRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  traj_status_.MergeFrom(from.traj_status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajStatusRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajStatusRule::CopyFrom(const TrajStatusRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajStatusRule::IsInitialized() const {
  
  return true;
}

void TrajStatusRule::Swap(TrajStatusRule* other) {
  if (other != this) {
    traj_status_.Swap(&other->traj_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajStatusRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajStatusRule_descriptor_;
  metadata.reflection = TrajStatusRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IsStayRule::kIsStayFieldNumber;
#endif  // !_MSC_VER

IsStayRule::IsStayRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IsStayRule::InitAsDefaultInstance() {
}

IsStayRule::IsStayRule(const IsStayRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IsStayRule::SharedCtor() {
  _cached_size_ = 0;
  is_stay_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IsStayRule::~IsStayRule() {
  SharedDtor();
}

void IsStayRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IsStayRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IsStayRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IsStayRule_descriptor_;
}

const IsStayRule& IsStayRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

IsStayRule* IsStayRule::default_instance_ = NULL;

IsStayRule* IsStayRule::New() const {
  return new IsStayRule;
}

void IsStayRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_stay_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IsStayRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_stay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_stay_)));
          set_has_is_stay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IsStayRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_stay = 1;
  if (has_is_stay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_stay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IsStayRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_stay = 1;
  if (has_is_stay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_stay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IsStayRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_stay = 1;
    if (has_is_stay()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IsStayRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IsStayRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IsStayRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IsStayRule::MergeFrom(const IsStayRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_stay()) {
      set_is_stay(from.is_stay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IsStayRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsStayRule::CopyFrom(const IsStayRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsStayRule::IsInitialized() const {
  
  return true;
}

void IsStayRule::Swap(IsStayRule* other) {
  if (other != this) {
    std::swap(is_stay_, other->is_stay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IsStayRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IsStayRule_descriptor_;
  metadata.reflection = IsStayRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoiRule::kPoiIdFieldNumber;
const int PoiRule::kPoiXFieldNumber;
const int PoiRule::kPoiYFieldNumber;
const int PoiRule::kPoiRFieldNumber;
const int PoiRule::kPoiTagFieldNumber;
#endif  // !_MSC_VER

PoiRule::PoiRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoiRule::InitAsDefaultInstance() {
}

PoiRule::PoiRule(const PoiRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoiRule::SharedCtor() {
  _cached_size_ = 0;
  poi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poi_x_ = 0;
  poi_y_ = 0;
  poi_r_ = 0;
  poi_tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiRule::~PoiRule() {
  SharedDtor();
}

void PoiRule::SharedDtor() {
  if (poi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_id_;
  }
  if (poi_tag_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_tag_;
  }
  if (this != default_instance_) {
  }
}

void PoiRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiRule_descriptor_;
}

const PoiRule& PoiRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

PoiRule* PoiRule::default_instance_ = NULL;

PoiRule* PoiRule::New() const {
  return new PoiRule;
}

void PoiRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poi_id()) {
      if (poi_id_ != &::google::protobuf::internal::kEmptyString) {
        poi_id_->clear();
      }
    }
    poi_x_ = 0;
    poi_y_ = 0;
    poi_r_ = 0;
    if (has_poi_tag()) {
      if (poi_tag_ != &::google::protobuf::internal::kEmptyString) {
        poi_tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoiRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi_id().data(), this->poi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_poi_x;
        break;
      }
      
      // optional double poi_x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_x_)));
          set_has_poi_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_poi_y;
        break;
      }
      
      // optional double poi_y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_y_)));
          set_has_poi_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_poi_r;
        break;
      }
      
      // optional double poi_r = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poi_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poi_r_)));
          set_has_poi_r();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poi_tag;
        break;
      }
      
      // optional string poi_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi_tag().data(), this->poi_tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoiRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poi_id = 1;
  if (has_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_id().data(), this->poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poi_id(), output);
  }
  
  // optional double poi_x = 2;
  if (has_poi_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->poi_x(), output);
  }
  
  // optional double poi_y = 3;
  if (has_poi_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->poi_y(), output);
  }
  
  // optional double poi_r = 4;
  if (has_poi_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->poi_r(), output);
  }
  
  // optional string poi_tag = 5;
  if (has_poi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_tag().data(), this->poi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poi_tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoiRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poi_id = 1;
  if (has_poi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_id().data(), this->poi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poi_id(), target);
  }
  
  // optional double poi_x = 2;
  if (has_poi_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->poi_x(), target);
  }
  
  // optional double poi_y = 3;
  if (has_poi_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->poi_y(), target);
  }
  
  // optional double poi_r = 4;
  if (has_poi_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->poi_r(), target);
  }
  
  // optional string poi_tag = 5;
  if (has_poi_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi_tag().data(), this->poi_tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poi_tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoiRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poi_id = 1;
    if (has_poi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi_id());
    }
    
    // optional double poi_x = 2;
    if (has_poi_x()) {
      total_size += 1 + 8;
    }
    
    // optional double poi_y = 3;
    if (has_poi_y()) {
      total_size += 1 + 8;
    }
    
    // optional double poi_r = 4;
    if (has_poi_r()) {
      total_size += 1 + 8;
    }
    
    // optional string poi_tag = 5;
    if (has_poi_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi_tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoiRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoiRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoiRule::MergeFrom(const PoiRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poi_id()) {
      set_poi_id(from.poi_id());
    }
    if (from.has_poi_x()) {
      set_poi_x(from.poi_x());
    }
    if (from.has_poi_y()) {
      set_poi_y(from.poi_y());
    }
    if (from.has_poi_r()) {
      set_poi_r(from.poi_r());
    }
    if (from.has_poi_tag()) {
      set_poi_tag(from.poi_tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoiRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiRule::CopyFrom(const PoiRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiRule::IsInitialized() const {
  
  return true;
}

void PoiRule::Swap(PoiRule* other) {
  if (other != this) {
    std::swap(poi_id_, other->poi_id_);
    std::swap(poi_x_, other->poi_x_);
    std::swap(poi_y_, other->poi_y_);
    std::swap(poi_r_, other->poi_r_);
    std::swap(poi_tag_, other->poi_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoiRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiRule_descriptor_;
  metadata.reflection = PoiRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AoiRule::kAoiIdFieldNumber;
#endif  // !_MSC_VER

AoiRule::AoiRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AoiRule::InitAsDefaultInstance() {
}

AoiRule::AoiRule(const AoiRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AoiRule::SharedCtor() {
  _cached_size_ = 0;
  aoi_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AoiRule::~AoiRule() {
  SharedDtor();
}

void AoiRule::SharedDtor() {
  if (aoi_id_ != &::google::protobuf::internal::kEmptyString) {
    delete aoi_id_;
  }
  if (this != default_instance_) {
  }
}

void AoiRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AoiRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AoiRule_descriptor_;
}

const AoiRule& AoiRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

AoiRule* AoiRule::default_instance_ = NULL;

AoiRule* AoiRule::New() const {
  return new AoiRule;
}

void AoiRule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_aoi_id()) {
      if (aoi_id_ != &::google::protobuf::internal::kEmptyString) {
        aoi_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AoiRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string aoi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_aoi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_id().data(), this->aoi_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AoiRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string aoi_id = 1;
  if (has_aoi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id().data(), this->aoi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->aoi_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AoiRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string aoi_id = 1;
  if (has_aoi_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id().data(), this->aoi_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->aoi_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AoiRule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string aoi_id = 1;
    if (has_aoi_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->aoi_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AoiRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AoiRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AoiRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AoiRule::MergeFrom(const AoiRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_aoi_id()) {
      set_aoi_id(from.aoi_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AoiRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AoiRule::CopyFrom(const AoiRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AoiRule::IsInitialized() const {
  
  return true;
}

void AoiRule::Swap(AoiRule* other) {
  if (other != this) {
    std::swap(aoi_id_, other->aoi_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AoiRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AoiRule_descriptor_;
  metadata.reflection = AoiRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrMatchRule::kStrRulesFieldNumber;
#endif  // !_MSC_VER

StrMatchRule::StrMatchRule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrMatchRule::InitAsDefaultInstance() {
}

StrMatchRule::StrMatchRule(const StrMatchRule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrMatchRule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrMatchRule::~StrMatchRule() {
  SharedDtor();
}

void StrMatchRule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StrMatchRule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrMatchRule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrMatchRule_descriptor_;
}

const StrMatchRule& StrMatchRule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

StrMatchRule* StrMatchRule::default_instance_ = NULL;

StrMatchRule* StrMatchRule::New() const {
  return new StrMatchRule;
}

void StrMatchRule::Clear() {
  str_rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrMatchRule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.NameVal str_rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_str_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_str_rules;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrMatchRule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.NameVal str_rules = 1;
  for (int i = 0; i < this->str_rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->str_rules(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrMatchRule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.NameVal str_rules = 1;
  for (int i = 0; i < this->str_rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->str_rules(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrMatchRule::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.NameVal str_rules = 1;
  total_size += 1 * this->str_rules_size();
  for (int i = 0; i < this->str_rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->str_rules(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrMatchRule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrMatchRule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrMatchRule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrMatchRule::MergeFrom(const StrMatchRule& from) {
  GOOGLE_CHECK_NE(&from, this);
  str_rules_.MergeFrom(from.str_rules_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrMatchRule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrMatchRule::CopyFrom(const StrMatchRule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrMatchRule::IsInitialized() const {
  
  return true;
}

void StrMatchRule::Swap(StrMatchRule* other) {
  if (other != this) {
    str_rules_.Swap(&other->str_rules_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrMatchRule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrMatchRule_descriptor_;
  metadata.reflection = StrMatchRule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rule::kTypeFieldNumber;
const int Rule::kLocationFieldNumber;
const int Rule::kTimeFieldNumber;
const int Rule::kSourceFieldNumber;
const int Rule::kTrajStatusFieldNumber;
const int Rule::kIsStayFieldNumber;
const int Rule::kPoiFieldNumber;
const int Rule::kAoiFieldNumber;
const int Rule::kStrRuleFieldNumber;
#endif  // !_MSC_VER

Rule::Rule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rule::InitAsDefaultInstance() {
  location_ = const_cast< ::lbs::da::openservice::LocationRule*>(&::lbs::da::openservice::LocationRule::default_instance());
  time_ = const_cast< ::lbs::da::openservice::TimeRule*>(&::lbs::da::openservice::TimeRule::default_instance());
  source_ = const_cast< ::lbs::da::openservice::SourceRule*>(&::lbs::da::openservice::SourceRule::default_instance());
  traj_status_ = const_cast< ::lbs::da::openservice::TrajStatusRule*>(&::lbs::da::openservice::TrajStatusRule::default_instance());
  is_stay_ = const_cast< ::lbs::da::openservice::IsStayRule*>(&::lbs::da::openservice::IsStayRule::default_instance());
  poi_ = const_cast< ::lbs::da::openservice::PoiRule*>(&::lbs::da::openservice::PoiRule::default_instance());
  aoi_ = const_cast< ::lbs::da::openservice::AoiRule*>(&::lbs::da::openservice::AoiRule::default_instance());
  str_rule_ = const_cast< ::lbs::da::openservice::StrMatchRule*>(&::lbs::da::openservice::StrMatchRule::default_instance());
}

Rule::Rule(const Rule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rule::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  location_ = NULL;
  time_ = NULL;
  source_ = NULL;
  traj_status_ = NULL;
  is_stay_ = NULL;
  poi_ = NULL;
  aoi_ = NULL;
  str_rule_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rule::~Rule() {
  SharedDtor();
}

void Rule::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete time_;
    delete source_;
    delete traj_status_;
    delete is_stay_;
    delete poi_;
    delete aoi_;
    delete str_rule_;
  }
}

void Rule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rule_descriptor_;
}

const Rule& Rule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

Rule* Rule::default_instance_ = NULL;

Rule* Rule::New() const {
  return new Rule;
}

void Rule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_location()) {
      if (location_ != NULL) location_->::lbs::da::openservice::LocationRule::Clear();
    }
    if (has_time()) {
      if (time_ != NULL) time_->::lbs::da::openservice::TimeRule::Clear();
    }
    if (has_source()) {
      if (source_ != NULL) source_->::lbs::da::openservice::SourceRule::Clear();
    }
    if (has_traj_status()) {
      if (traj_status_ != NULL) traj_status_->::lbs::da::openservice::TrajStatusRule::Clear();
    }
    if (has_is_stay()) {
      if (is_stay_ != NULL) is_stay_->::lbs::da::openservice::IsStayRule::Clear();
    }
    if (has_poi()) {
      if (poi_ != NULL) poi_->::lbs::da::openservice::PoiRule::Clear();
    }
    if (has_aoi()) {
      if (aoi_ != NULL) aoi_->::lbs::da::openservice::AoiRule::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_str_rule()) {
      if (str_rule_ != NULL) str_rule_->::lbs::da::openservice::StrMatchRule::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RuleType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::RuleType_IsValid(value)) {
            set_type(static_cast< lbs::da::openservice::RuleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_location;
        break;
      }
      
      // optional .lbs.da.openservice.LocationRule location = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_time;
        break;
      }
      
      // optional .lbs.da.openservice.TimeRule time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source;
        break;
      }
      
      // optional .lbs.da.openservice.SourceRule source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_traj_status;
        break;
      }
      
      // optional .lbs.da.openservice.TrajStatusRule traj_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traj_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_is_stay;
        break;
      }
      
      // optional .lbs.da.openservice.IsStayRule is_stay = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_is_stay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_is_stay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_poi;
        break;
      }
      
      // optional .lbs.da.openservice.PoiRule poi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_aoi;
        break;
      }
      
      // optional .lbs.da.openservice.AoiRule aoi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aoi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_str_rule;
        break;
      }
      
      // optional .lbs.da.openservice.StrMatchRule str_rule = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_rule:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_str_rule()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RuleType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional .lbs.da.openservice.LocationRule location = 2;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location(), output);
  }
  
  // optional .lbs.da.openservice.TimeRule time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->time(), output);
  }
  
  // optional .lbs.da.openservice.SourceRule source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->source(), output);
  }
  
  // optional .lbs.da.openservice.TrajStatusRule traj_status = 5;
  if (has_traj_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->traj_status(), output);
  }
  
  // optional .lbs.da.openservice.IsStayRule is_stay = 6;
  if (has_is_stay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->is_stay(), output);
  }
  
  // optional .lbs.da.openservice.PoiRule poi = 7;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->poi(), output);
  }
  
  // optional .lbs.da.openservice.AoiRule aoi = 8;
  if (has_aoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aoi(), output);
  }
  
  // optional .lbs.da.openservice.StrMatchRule str_rule = 100;
  if (has_str_rule()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->str_rule(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RuleType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional .lbs.da.openservice.LocationRule location = 2;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location(), target);
  }
  
  // optional .lbs.da.openservice.TimeRule time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->time(), target);
  }
  
  // optional .lbs.da.openservice.SourceRule source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->source(), target);
  }
  
  // optional .lbs.da.openservice.TrajStatusRule traj_status = 5;
  if (has_traj_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->traj_status(), target);
  }
  
  // optional .lbs.da.openservice.IsStayRule is_stay = 6;
  if (has_is_stay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->is_stay(), target);
  }
  
  // optional .lbs.da.openservice.PoiRule poi = 7;
  if (has_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->poi(), target);
  }
  
  // optional .lbs.da.openservice.AoiRule aoi = 8;
  if (has_aoi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aoi(), target);
  }
  
  // optional .lbs.da.openservice.StrMatchRule str_rule = 100;
  if (has_str_rule()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->str_rule(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rule::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RuleType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional .lbs.da.openservice.LocationRule location = 2;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional .lbs.da.openservice.TimeRule time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }
    
    // optional .lbs.da.openservice.SourceRule source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }
    
    // optional .lbs.da.openservice.TrajStatusRule traj_status = 5;
    if (has_traj_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_status());
    }
    
    // optional .lbs.da.openservice.IsStayRule is_stay = 6;
    if (has_is_stay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->is_stay());
    }
    
    // optional .lbs.da.openservice.PoiRule poi = 7;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poi());
    }
    
    // optional .lbs.da.openservice.AoiRule aoi = 8;
    if (has_aoi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aoi());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .lbs.da.openservice.StrMatchRule str_rule = 100;
    if (has_str_rule()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->str_rule());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rule::MergeFrom(const Rule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_location()) {
      mutable_location()->::lbs::da::openservice::LocationRule::MergeFrom(from.location());
    }
    if (from.has_time()) {
      mutable_time()->::lbs::da::openservice::TimeRule::MergeFrom(from.time());
    }
    if (from.has_source()) {
      mutable_source()->::lbs::da::openservice::SourceRule::MergeFrom(from.source());
    }
    if (from.has_traj_status()) {
      mutable_traj_status()->::lbs::da::openservice::TrajStatusRule::MergeFrom(from.traj_status());
    }
    if (from.has_is_stay()) {
      mutable_is_stay()->::lbs::da::openservice::IsStayRule::MergeFrom(from.is_stay());
    }
    if (from.has_poi()) {
      mutable_poi()->::lbs::da::openservice::PoiRule::MergeFrom(from.poi());
    }
    if (from.has_aoi()) {
      mutable_aoi()->::lbs::da::openservice::AoiRule::MergeFrom(from.aoi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_str_rule()) {
      mutable_str_rule()->::lbs::da::openservice::StrMatchRule::MergeFrom(from.str_rule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rule::CopyFrom(const Rule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Rule::Swap(Rule* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(location_, other->location_);
    std::swap(time_, other->time_);
    std::swap(source_, other->source_);
    std::swap(traj_status_, other->traj_status_);
    std::swap(is_stay_, other->is_stay_);
    std::swap(poi_, other->poi_);
    std::swap(aoi_, other->aoi_);
    std::swap(str_rule_, other->str_rule_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rule_descriptor_;
  metadata.reflection = Rule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Condition::kRulesFieldNumber;
const int Condition::kAppendFieldNumber;
const int Condition::kTagFieldNumber;
#endif  // !_MSC_VER

Condition::Condition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Condition::InitAsDefaultInstance() {
}

Condition::Condition(const Condition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Condition::SharedCtor() {
  _cached_size_ = 0;
  append_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Condition::~Condition() {
  SharedDtor();
}

void Condition::SharedDtor() {
  if (append_ != &::google::protobuf::internal::kEmptyString) {
    delete append_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void Condition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Condition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Condition_descriptor_;
}

const Condition& Condition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

Condition* Condition::default_instance_ = NULL;

Condition* Condition::New() const {
  return new Condition;
}

void Condition::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_append()) {
      if (append_ != &::google::protobuf::internal::kEmptyString) {
        append_->clear();
      }
    }
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
  }
  rules_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Condition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.Rule rules = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rules:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rules()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rules;
        if (input->ExpectTag(18)) goto parse_append;
        break;
      }
      
      // optional string append = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_append()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->append().data(), this->append().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }
      
      // optional string tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Condition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.Rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rules(i), output);
  }
  
  // optional string append = 2;
  if (has_append()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->append().data(), this->append().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->append(), output);
  }
  
  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Condition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.Rule rules = 1;
  for (int i = 0; i < this->rules_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rules(i), target);
  }
  
  // optional string append = 2;
  if (has_append()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->append().data(), this->append().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->append(), target);
  }
  
  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Condition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string append = 2;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->append());
    }
    
    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
  }
  // repeated .lbs.da.openservice.Rule rules = 1;
  total_size += 1 * this->rules_size();
  for (int i = 0; i < this->rules_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rules(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Condition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Condition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Condition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
  GOOGLE_CHECK_NE(&from, this);
  rules_.MergeFrom(from.rules_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_append()) {
      set_append(from.append());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Condition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  
  for (int i = 0; i < rules_size(); i++) {
    if (!this->rules(i).IsInitialized()) return false;
  }
  return true;
}

void Condition::Swap(Condition* other) {
  if (other != this) {
    rules_.Swap(&other->rules_);
    std::swap(append_, other->append_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Condition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Condition_descriptor_;
  metadata.reflection = Condition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistInfo::kCuidFieldNumber;
const int RegistInfo::kCondFieldNumber;
#endif  // !_MSC_VER

RegistInfo::RegistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistInfo::InitAsDefaultInstance() {
  cond_ = const_cast< ::lbs::da::openservice::Condition*>(&::lbs::da::openservice::Condition::default_instance());
}

RegistInfo::RegistInfo(const RegistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistInfo::SharedCtor() {
  _cached_size_ = 0;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cond_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistInfo::~RegistInfo() {
  SharedDtor();
}

void RegistInfo::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (this != default_instance_) {
    delete cond_;
  }
}

void RegistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistInfo_descriptor_;
}

const RegistInfo& RegistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

RegistInfo* RegistInfo::default_instance_ = NULL;

RegistInfo* RegistInfo::New() const {
  return new RegistInfo;
}

void RegistInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_cond()) {
      if (cond_ != NULL) cond_->::lbs::da::openservice::Condition::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cond;
        break;
      }
      
      // optional .lbs.da.openservice.Condition cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cuid = 1;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cuid(), output);
  }
  
  // optional .lbs.da.openservice.Condition cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cuid = 1;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cuid(), target);
  }
  
  // optional .lbs.da.openservice.Condition cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cuid = 1;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional .lbs.da.openservice.Condition cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistInfo::MergeFrom(const RegistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_cond()) {
      mutable_cond()->::lbs::da::openservice::Condition::MergeFrom(from.cond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistInfo::CopyFrom(const RegistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistInfo::IsInitialized() const {
  
  if (has_cond()) {
    if (!this->cond().IsInitialized()) return false;
  }
  return true;
}

void RegistInfo::Swap(RegistInfo* other) {
  if (other != this) {
    std::swap(cuid_, other->cuid_);
    std::swap(cond_, other->cond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistInfo_descriptor_;
  metadata.reflection = RegistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistConditionRequest::kHeaderFieldNumber;
const int RegistConditionRequest::kRegistInfoFieldNumber;
const int RegistConditionRequest::kOperationFieldNumber;
#endif  // !_MSC_VER

RegistConditionRequest::RegistConditionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistConditionRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

RegistConditionRequest::RegistConditionRequest(const RegistConditionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistConditionRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  operation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistConditionRequest::~RegistConditionRequest() {
  SharedDtor();
}

void RegistConditionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void RegistConditionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistConditionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistConditionRequest_descriptor_;
}

const RegistConditionRequest& RegistConditionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

RegistConditionRequest* RegistConditionRequest::default_instance_ = NULL;

RegistConditionRequest* RegistConditionRequest::New() const {
  return new RegistConditionRequest;
}

void RegistConditionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    operation_ = 1;
  }
  regist_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistConditionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_regist_info;
        break;
      }
      
      // repeated .lbs.da.openservice.RegistInfo regist_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_regist_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_regist_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_regist_info;
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }
      
      // required .lbs.da.openservice.Operation operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::Operation_IsValid(value)) {
            set_operation(static_cast< lbs::da::openservice::Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistConditionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .lbs.da.openservice.RegistInfo regist_info = 2;
  for (int i = 0; i < this->regist_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->regist_info(i), output);
  }
  
  // required .lbs.da.openservice.Operation operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistConditionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .lbs.da.openservice.RegistInfo regist_info = 2;
  for (int i = 0; i < this->regist_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->regist_info(i), target);
  }
  
  // required .lbs.da.openservice.Operation operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistConditionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .lbs.da.openservice.Operation operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
  }
  // repeated .lbs.da.openservice.RegistInfo regist_info = 2;
  total_size += 1 * this->regist_info_size();
  for (int i = 0; i < this->regist_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->regist_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistConditionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistConditionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistConditionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistConditionRequest::MergeFrom(const RegistConditionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  regist_info_.MergeFrom(from.regist_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistConditionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistConditionRequest::CopyFrom(const RegistConditionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistConditionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < regist_info_size(); i++) {
    if (!this->regist_info(i).IsInitialized()) return false;
  }
  return true;
}

void RegistConditionRequest::Swap(RegistConditionRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    regist_info_.Swap(&other->regist_info_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistConditionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistConditionRequest_descriptor_;
  metadata.reflection = RegistConditionRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistConditionResponse::kIsSuccessFieldNumber;
const int RegistConditionResponse::kNumFieldNumber;
const int RegistConditionResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

RegistConditionResponse::RegistConditionResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegistConditionResponse::InitAsDefaultInstance() {
}

RegistConditionResponse::RegistConditionResponse(const RegistConditionResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegistConditionResponse::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  num_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistConditionResponse::~RegistConditionResponse() {
  SharedDtor();
}

void RegistConditionResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void RegistConditionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistConditionResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistConditionResponse_descriptor_;
}

const RegistConditionResponse& RegistConditionResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

RegistConditionResponse* RegistConditionResponse::default_instance_ = NULL;

RegistConditionResponse* RegistConditionResponse::New() const {
  return new RegistConditionResponse;
}

void RegistConditionResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    num_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistConditionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }
      
      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegistConditionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegistConditionResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegistConditionResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistConditionResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistConditionResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistConditionResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistConditionResponse::MergeFrom(const RegistConditionResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistConditionResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistConditionResponse::CopyFrom(const RegistConditionResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistConditionResponse::IsInitialized() const {
  
  return true;
}

void RegistConditionResponse::Swap(RegistConditionResponse* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(num_, other->num_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistConditionResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistConditionResponse_descriptor_;
  metadata.reflection = RegistConditionResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trigger::kTagFieldNumber;
const int Trigger::kPostUrlFieldNumber;
#endif  // !_MSC_VER

Trigger::Trigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trigger::InitAsDefaultInstance() {
}

Trigger::Trigger(const Trigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trigger::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  post_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trigger::~Trigger() {
  SharedDtor();
}

void Trigger::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (post_url_ != &::google::protobuf::internal::kEmptyString) {
    delete post_url_;
  }
  if (this != default_instance_) {
  }
}

void Trigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trigger_descriptor_;
}

const Trigger& Trigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

Trigger* Trigger::default_instance_ = NULL;

Trigger* Trigger::New() const {
  return new Trigger;
}

void Trigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_post_url()) {
      if (post_url_ != &::google::protobuf::internal::kEmptyString) {
        post_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_post_url;
        break;
      }
      
      // optional string post_url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_post_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_post_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->post_url().data(), this->post_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(), output);
  }
  
  // optional string post_url = 2;
  if (has_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post_url().data(), this->post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->post_url(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }
  
  // optional string post_url = 2;
  if (has_post_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->post_url().data(), this->post_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->post_url(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trigger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional string post_url = 2;
    if (has_post_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->post_url());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_post_url()) {
      set_post_url(from.post_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  
  return true;
}

void Trigger::Swap(Trigger* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(post_url_, other->post_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trigger_descriptor_;
  metadata.reflection = Trigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTriggerRequest::kHeaderFieldNumber;
const int SetTriggerRequest::kTriggerFieldNumber;
const int SetTriggerRequest::kOperationFieldNumber;
#endif  // !_MSC_VER

SetTriggerRequest::SetTriggerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTriggerRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

SetTriggerRequest::SetTriggerRequest(const SetTriggerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTriggerRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  operation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTriggerRequest::~SetTriggerRequest() {
  SharedDtor();
}

void SetTriggerRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void SetTriggerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTriggerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTriggerRequest_descriptor_;
}

const SetTriggerRequest& SetTriggerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

SetTriggerRequest* SetTriggerRequest::default_instance_ = NULL;

SetTriggerRequest* SetTriggerRequest::New() const {
  return new SetTriggerRequest;
}

void SetTriggerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    operation_ = 1;
  }
  trigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTriggerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trigger;
        break;
      }
      
      // repeated .lbs.da.openservice.Trigger trigger = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trigger;
        if (input->ExpectTag(24)) goto parse_operation;
        break;
      }
      
      // required .lbs.da.openservice.Operation operation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::Operation_IsValid(value)) {
            set_operation(static_cast< lbs::da::openservice::Operation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTriggerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .lbs.da.openservice.Trigger trigger = 2;
  for (int i = 0; i < this->trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trigger(i), output);
  }
  
  // required .lbs.da.openservice.Operation operation = 3;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->operation(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTriggerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .lbs.da.openservice.Trigger trigger = 2;
  for (int i = 0; i < this->trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trigger(i), target);
  }
  
  // required .lbs.da.openservice.Operation operation = 3;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->operation(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTriggerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .lbs.da.openservice.Operation operation = 3;
    if (has_operation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
    }
    
  }
  // repeated .lbs.da.openservice.Trigger trigger = 2;
  total_size += 1 * this->trigger_size();
  for (int i = 0; i < this->trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTriggerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTriggerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTriggerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTriggerRequest::MergeFrom(const SetTriggerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  trigger_.MergeFrom(from.trigger_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTriggerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTriggerRequest::CopyFrom(const SetTriggerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTriggerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void SetTriggerRequest::Swap(SetTriggerRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    trigger_.Swap(&other->trigger_);
    std::swap(operation_, other->operation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTriggerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTriggerRequest_descriptor_;
  metadata.reflection = SetTriggerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetTriggerResponse::kIsSuccessFieldNumber;
const int SetTriggerResponse::kNumFieldNumber;
const int SetTriggerResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

SetTriggerResponse::SetTriggerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SetTriggerResponse::InitAsDefaultInstance() {
}

SetTriggerResponse::SetTriggerResponse(const SetTriggerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SetTriggerResponse::SharedCtor() {
  _cached_size_ = 0;
  is_success_ = false;
  num_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetTriggerResponse::~SetTriggerResponse() {
  SharedDtor();
}

void SetTriggerResponse::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void SetTriggerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetTriggerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetTriggerResponse_descriptor_;
}

const SetTriggerResponse& SetTriggerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_regist_5fcondition_2eproto();  return *default_instance_;
}

SetTriggerResponse* SetTriggerResponse::default_instance_ = NULL;

SetTriggerResponse* SetTriggerResponse::New() const {
  return new SetTriggerResponse;
}

void SetTriggerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_success_ = false;
    num_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetTriggerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool is_success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_success_)));
          set_has_is_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }
      
      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_error;
        break;
      }
      
      // optional string error = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SetTriggerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool is_success = 1;
  if (has_is_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_success(), output);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SetTriggerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool is_success = 1;
  if (has_is_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_success(), target);
  }
  
  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }
  
  // optional string error = 3;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SetTriggerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool is_success = 1;
    if (has_is_success()) {
      total_size += 1 + 1;
    }
    
    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }
    
    // optional string error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetTriggerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetTriggerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetTriggerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetTriggerResponse::MergeFrom(const SetTriggerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_success()) {
      set_is_success(from.is_success());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetTriggerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTriggerResponse::CopyFrom(const SetTriggerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTriggerResponse::IsInitialized() const {
  
  return true;
}

void SetTriggerResponse::Swap(SetTriggerResponse* other) {
  if (other != this) {
    std::swap(is_success_, other->is_success_);
    std::swap(num_, other->num_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetTriggerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetTriggerResponse_descriptor_;
  metadata.reflection = SetTriggerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
