// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbrpc_service.proto

#ifndef PROTOBUF_pbrpc_5fservice_2eproto__INCLUDED
#define PROTOBUF_pbrpc_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/service.h>
#include "pbrpc.pb.h"
#include "transport.pb.h"
#include "regist_condition.pb.h"
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pbrpc_5fservice_2eproto();
void protobuf_AssignDesc_pbrpc_5fservice_2eproto();
void protobuf_ShutdownFile_pbrpc_5fservice_2eproto();


// ===================================================================


// ===================================================================

class UserService_Stub;

class UserService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline UserService() {};
 public:
  virtual ~UserService();
  
  typedef UserService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetUserPreference(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetUserPreferenceRequest* request,
                       ::lbs::da::openservice::GetUserPreferenceResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetUserRegularStayPoint(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetRegularStayPointRequest* request,
                       ::lbs::da::openservice::GetRegularStayPointResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetLatestUserTrajStatus(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetLatestUserTrajRequest* request,
                       ::lbs::da::openservice::GetLatestUserTrajResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPlaceSemanticInfo(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::PlaceSemanticRequest* request,
                       ::lbs::da::openservice::PlaceSemanticResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNuomiUserPreference(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::NuomiUserPreferenceRequest* request,
                       ::lbs::da::openservice::NuomiUserPreferenceResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetAOIByLocation(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetAOIRequest* request,
                       ::lbs::da::openservice::GetAOIResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetNearPoiInfo(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetNearPoiRequest* request,
                       ::lbs::da::openservice::GetNearPoiResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService);
};

class UserService_Stub : public UserService {
 public:
  UserService_Stub(::google::protobuf::RpcChannel* channel);
  UserService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~UserService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements UserService ------------------------------------------
  
  void GetUserPreference(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetUserPreferenceRequest* request,
                       ::lbs::da::openservice::GetUserPreferenceResponse* response,
                       ::google::protobuf::Closure* done);
  void GetUserRegularStayPoint(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetRegularStayPointRequest* request,
                       ::lbs::da::openservice::GetRegularStayPointResponse* response,
                       ::google::protobuf::Closure* done);
  void GetLatestUserTrajStatus(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetLatestUserTrajRequest* request,
                       ::lbs::da::openservice::GetLatestUserTrajResponse* response,
                       ::google::protobuf::Closure* done);
  void GetPlaceSemanticInfo(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::PlaceSemanticRequest* request,
                       ::lbs::da::openservice::PlaceSemanticResponse* response,
                       ::google::protobuf::Closure* done);
  void GetNuomiUserPreference(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::NuomiUserPreferenceRequest* request,
                       ::lbs::da::openservice::NuomiUserPreferenceResponse* response,
                       ::google::protobuf::Closure* done);
  void GetAOIByLocation(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetAOIRequest* request,
                       ::lbs::da::openservice::GetAOIResponse* response,
                       ::google::protobuf::Closure* done);
  void GetNearPoiInfo(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetNearPoiRequest* request,
                       ::lbs::da::openservice::GetNearPoiResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(UserService_Stub);
};


// -------------------------------------------------------------------

class ItemService_Stub;

class ItemService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline ItemService() {};
 public:
  virtual ~ItemService();
  
  typedef ItemService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetItemsByItem(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetItemsByItemRequest* request,
                       ::lbs::da::openservice::GetItemsByItemResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetBNItemsByItem(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetBNItemsRequest* request,
                       ::lbs::da::openservice::GetBNItemsResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ItemService);
};

class ItemService_Stub : public ItemService {
 public:
  ItemService_Stub(::google::protobuf::RpcChannel* channel);
  ItemService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~ItemService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements ItemService ------------------------------------------
  
  void GetItemsByItem(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetItemsByItemRequest* request,
                       ::lbs::da::openservice::GetItemsByItemResponse* response,
                       ::google::protobuf::Closure* done);
  void GetBNItemsByItem(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::GetBNItemsRequest* request,
                       ::lbs::da::openservice::GetBNItemsResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(ItemService_Stub);
};


// -------------------------------------------------------------------

class TransportFileService_Stub;

class TransportFileService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TransportFileService() {};
 public:
  virtual ~TransportFileService();
  
  typedef TransportFileService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void TransportFile(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::TransportFileRequest* request,
                       ::lbs::da::openservice::TransportFileResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TransportFileService);
};

class TransportFileService_Stub : public TransportFileService {
 public:
  TransportFileService_Stub(::google::protobuf::RpcChannel* channel);
  TransportFileService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TransportFileService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements TransportFileService ------------------------------------------
  
  void TransportFile(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::TransportFileRequest* request,
                       ::lbs::da::openservice::TransportFileResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TransportFileService_Stub);
};


// -------------------------------------------------------------------

class DynamicPlanService_Stub;

class DynamicPlanService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline DynamicPlanService() {};
 public:
  virtual ~DynamicPlanService();
  
  typedef DynamicPlanService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetDynamicTripPlan(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::DynamicTripPlanRequest* request,
                       ::lbs::da::openservice::DynamicTripPlanResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DynamicPlanService);
};

class DynamicPlanService_Stub : public DynamicPlanService {
 public:
  DynamicPlanService_Stub(::google::protobuf::RpcChannel* channel);
  DynamicPlanService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~DynamicPlanService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements DynamicPlanService ------------------------------------------
  
  void GetDynamicTripPlan(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::DynamicTripPlanRequest* request,
                       ::lbs::da::openservice::DynamicTripPlanResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(DynamicPlanService_Stub);
};


// -------------------------------------------------------------------

class LvPlanService_Stub;

class LvPlanService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LvPlanService() {};
 public:
  virtual ~LvPlanService();
  
  typedef LvPlanService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void GetLvTripPlan(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::LvTripPlanRequest* request,
                       ::lbs::da::openservice::LvTripPlanResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LvPlanService);
};

class LvPlanService_Stub : public LvPlanService {
 public:
  LvPlanService_Stub(::google::protobuf::RpcChannel* channel);
  LvPlanService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~LvPlanService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements LvPlanService ------------------------------------------
  
  void GetLvTripPlan(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::LvTripPlanRequest* request,
                       ::lbs::da::openservice::LvTripPlanResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LvPlanService_Stub);
};


// -------------------------------------------------------------------

class PushService_Stub;

class PushService : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline PushService() {};
 public:
  virtual ~PushService();
  
  typedef PushService_Stub Stub;
  
  static const ::google::protobuf::ServiceDescriptor* descriptor();
  
  virtual void RegistCondition(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::RegistConditionRequest* request,
                       ::lbs::da::openservice::RegistConditionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetTrigger(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::SetTriggerRequest* request,
                       ::lbs::da::openservice::SetTriggerResponse* response,
                       ::google::protobuf::Closure* done);
  
  // implements Service ----------------------------------------------
  
  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PushService);
};

class PushService_Stub : public PushService {
 public:
  PushService_Stub(::google::protobuf::RpcChannel* channel);
  PushService_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~PushService_Stub();
  
  inline ::google::protobuf::RpcChannel* channel() { return channel_; }
  
  // implements PushService ------------------------------------------
  
  void RegistCondition(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::RegistConditionRequest* request,
                       ::lbs::da::openservice::RegistConditionResponse* response,
                       ::google::protobuf::Closure* done);
  void SetTrigger(::google::protobuf::RpcController* controller,
                       const ::lbs::da::openservice::SetTriggerRequest* request,
                       ::lbs::da::openservice::SetTriggerResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(PushService_Stub);
};


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pbrpc_5fservice_2eproto__INCLUDED
