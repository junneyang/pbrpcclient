// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport.proto

#ifndef PROTOBUF_transport_2eproto__INCLUDED
#define PROTOBUF_transport_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "pbrpc.pb.h"
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_transport_2eproto();
void protobuf_AssignDesc_transport_2eproto();
void protobuf_ShutdownFile_transport_2eproto();

class TransportFileRequest;
class TransportFileResponse;

enum TransportType {
  SO_CONF_FILE = 0,
  SO_DOWNLOAD_CMD = 1,
  SO_DELETE_CMD = 2,
  REDIS_CONF_FILE = 3,
  DIS_CONF_FILE = 4,
  INTERFACE_CONF_FILE = 5,
  SAFECHECK_CONF_FILE = 6,
  SAFECHECK_DATA_FILE = 7
};
bool TransportType_IsValid(int value);
const TransportType TransportType_MIN = SO_CONF_FILE;
const TransportType TransportType_MAX = SAFECHECK_DATA_FILE;
const int TransportType_ARRAYSIZE = TransportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransportType_descriptor();
inline const ::std::string& TransportType_Name(TransportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransportType_descriptor(), value);
}
inline bool TransportType_Parse(
    const ::std::string& name, TransportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransportType>(
    TransportType_descriptor(), name, value);
}
enum TransportRet {
  TRANSPORT_SUCC = 0,
  TRANSPORT_FAILD = 1
};
bool TransportRet_IsValid(int value);
const TransportRet TransportRet_MIN = TRANSPORT_SUCC;
const TransportRet TransportRet_MAX = TRANSPORT_FAILD;
const int TransportRet_ARRAYSIZE = TransportRet_MAX + 1;

const ::google::protobuf::EnumDescriptor* TransportRet_descriptor();
inline const ::std::string& TransportRet_Name(TransportRet value) {
  return ::google::protobuf::internal::NameOfEnum(
    TransportRet_descriptor(), value);
}
inline bool TransportRet_Parse(
    const ::std::string& name, TransportRet* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TransportRet>(
    TransportRet_descriptor(), name, value);
}
// ===================================================================

class TransportFileRequest : public ::google::protobuf::Message {
 public:
  TransportFileRequest();
  virtual ~TransportFileRequest();
  
  TransportFileRequest(const TransportFileRequest& from);
  
  inline TransportFileRequest& operator=(const TransportFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportFileRequest& default_instance();
  
  void Swap(TransportFileRequest* other);
  
  // implements Message ----------------------------------------------
  
  TransportFileRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransportFileRequest& from);
  void MergeFrom(const TransportFileRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .lbs.da.openservice.RequestHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::lbs::da::openservice::RequestHeader& header() const;
  inline ::lbs::da::openservice::RequestHeader* mutable_header();
  inline ::lbs::da::openservice::RequestHeader* release_header();
  
  // required .lbs.da.openservice.TransportType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline lbs::da::openservice::TransportType type() const;
  inline void set_type(lbs::da::openservice::TransportType value);
  
  // required string fileName = 3;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFileNameFieldNumber = 3;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  
  // required string fileContent = 4;
  inline bool has_filecontent() const;
  inline void clear_filecontent();
  static const int kFileContentFieldNumber = 4;
  inline const ::std::string& filecontent() const;
  inline void set_filecontent(const ::std::string& value);
  inline void set_filecontent(const char* value);
  inline void set_filecontent(const char* value, size_t size);
  inline ::std::string* mutable_filecontent();
  inline ::std::string* release_filecontent();
  
  // optional string filePath = 5;
  inline bool has_filepath() const;
  inline void clear_filepath();
  static const int kFilePathFieldNumber = 5;
  inline const ::std::string& filepath() const;
  inline void set_filepath(const ::std::string& value);
  inline void set_filepath(const char* value);
  inline void set_filepath(const char* value, size_t size);
  inline ::std::string* mutable_filepath();
  inline ::std::string* release_filepath();
  
  // optional string fileCmd = 6;
  inline bool has_filecmd() const;
  inline void clear_filecmd();
  static const int kFileCmdFieldNumber = 6;
  inline const ::std::string& filecmd() const;
  inline void set_filecmd(const ::std::string& value);
  inline void set_filecmd(const char* value);
  inline void set_filecmd(const char* value, size_t size);
  inline ::std::string* mutable_filecmd();
  inline ::std::string* release_filecmd();
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.TransportFileRequest)
 private:
  inline void set_has_header();
  inline void clear_has_header();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_filecontent();
  inline void clear_has_filecontent();
  inline void set_has_filepath();
  inline void clear_has_filepath();
  inline void set_has_filecmd();
  inline void clear_has_filecmd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::lbs::da::openservice::RequestHeader* header_;
  ::std::string* filename_;
  ::std::string* filecontent_;
  ::std::string* filepath_;
  ::std::string* filecmd_;
  int type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_transport_2eproto();
  friend void protobuf_AssignDesc_transport_2eproto();
  friend void protobuf_ShutdownFile_transport_2eproto();
  
  void InitAsDefaultInstance();
  static TransportFileRequest* default_instance_;
};
// -------------------------------------------------------------------

class TransportFileResponse : public ::google::protobuf::Message {
 public:
  TransportFileResponse();
  virtual ~TransportFileResponse();
  
  TransportFileResponse(const TransportFileResponse& from);
  
  inline TransportFileResponse& operator=(const TransportFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransportFileResponse& default_instance();
  
  void Swap(TransportFileResponse* other);
  
  // implements Message ----------------------------------------------
  
  TransportFileResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TransportFileResponse& from);
  void MergeFrom(const TransportFileResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .lbs.da.openservice.TransportRet value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline lbs::da::openservice::TransportRet value() const;
  inline void set_value(lbs::da::openservice::TransportRet value);
  
  // optional string errmsg = 2;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 2;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  
  // @@protoc_insertion_point(class_scope:lbs.da.openservice.TransportFileResponse)
 private:
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* errmsg_;
  int value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_transport_2eproto();
  friend void protobuf_AssignDesc_transport_2eproto();
  friend void protobuf_ShutdownFile_transport_2eproto();
  
  void InitAsDefaultInstance();
  static TransportFileResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// TransportFileRequest

// required .lbs.da.openservice.RequestHeader header = 1;
inline bool TransportFileRequest::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportFileRequest::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransportFileRequest::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransportFileRequest::clear_header() {
  if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
  clear_has_header();
}
inline const ::lbs::da::openservice::RequestHeader& TransportFileRequest::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::lbs::da::openservice::RequestHeader* TransportFileRequest::mutable_header() {
  set_has_header();
  if (header_ == NULL) header_ = new ::lbs::da::openservice::RequestHeader;
  return header_;
}
inline ::lbs::da::openservice::RequestHeader* TransportFileRequest::release_header() {
  clear_has_header();
  ::lbs::da::openservice::RequestHeader* temp = header_;
  header_ = NULL;
  return temp;
}

// required .lbs.da.openservice.TransportType type = 2;
inline bool TransportFileRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportFileRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransportFileRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransportFileRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline lbs::da::openservice::TransportType TransportFileRequest::type() const {
  return static_cast< lbs::da::openservice::TransportType >(type_);
}
inline void TransportFileRequest::set_type(lbs::da::openservice::TransportType value) {
  GOOGLE_DCHECK(lbs::da::openservice::TransportType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required string fileName = 3;
inline bool TransportFileRequest::has_filename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TransportFileRequest::set_has_filename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TransportFileRequest::clear_has_filename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TransportFileRequest::clear_filename() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& TransportFileRequest::filename() const {
  return *filename_;
}
inline void TransportFileRequest::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TransportFileRequest::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
}
inline void TransportFileRequest::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportFileRequest::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    filename_ = new ::std::string;
  }
  return filename_;
}
inline ::std::string* TransportFileRequest::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string fileContent = 4;
inline bool TransportFileRequest::has_filecontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TransportFileRequest::set_has_filecontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TransportFileRequest::clear_has_filecontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TransportFileRequest::clear_filecontent() {
  if (filecontent_ != &::google::protobuf::internal::kEmptyString) {
    filecontent_->clear();
  }
  clear_has_filecontent();
}
inline const ::std::string& TransportFileRequest::filecontent() const {
  return *filecontent_;
}
inline void TransportFileRequest::set_filecontent(const ::std::string& value) {
  set_has_filecontent();
  if (filecontent_ == &::google::protobuf::internal::kEmptyString) {
    filecontent_ = new ::std::string;
  }
  filecontent_->assign(value);
}
inline void TransportFileRequest::set_filecontent(const char* value) {
  set_has_filecontent();
  if (filecontent_ == &::google::protobuf::internal::kEmptyString) {
    filecontent_ = new ::std::string;
  }
  filecontent_->assign(value);
}
inline void TransportFileRequest::set_filecontent(const char* value, size_t size) {
  set_has_filecontent();
  if (filecontent_ == &::google::protobuf::internal::kEmptyString) {
    filecontent_ = new ::std::string;
  }
  filecontent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportFileRequest::mutable_filecontent() {
  set_has_filecontent();
  if (filecontent_ == &::google::protobuf::internal::kEmptyString) {
    filecontent_ = new ::std::string;
  }
  return filecontent_;
}
inline ::std::string* TransportFileRequest::release_filecontent() {
  clear_has_filecontent();
  if (filecontent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filecontent_;
    filecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string filePath = 5;
inline bool TransportFileRequest::has_filepath() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TransportFileRequest::set_has_filepath() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TransportFileRequest::clear_has_filepath() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TransportFileRequest::clear_filepath() {
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    filepath_->clear();
  }
  clear_has_filepath();
}
inline const ::std::string& TransportFileRequest::filepath() const {
  return *filepath_;
}
inline void TransportFileRequest::set_filepath(const ::std::string& value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void TransportFileRequest::set_filepath(const char* value) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(value);
}
inline void TransportFileRequest::set_filepath(const char* value, size_t size) {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  filepath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportFileRequest::mutable_filepath() {
  set_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    filepath_ = new ::std::string;
  }
  return filepath_;
}
inline ::std::string* TransportFileRequest::release_filepath() {
  clear_has_filepath();
  if (filepath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filepath_;
    filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string fileCmd = 6;
inline bool TransportFileRequest::has_filecmd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TransportFileRequest::set_has_filecmd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TransportFileRequest::clear_has_filecmd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TransportFileRequest::clear_filecmd() {
  if (filecmd_ != &::google::protobuf::internal::kEmptyString) {
    filecmd_->clear();
  }
  clear_has_filecmd();
}
inline const ::std::string& TransportFileRequest::filecmd() const {
  return *filecmd_;
}
inline void TransportFileRequest::set_filecmd(const ::std::string& value) {
  set_has_filecmd();
  if (filecmd_ == &::google::protobuf::internal::kEmptyString) {
    filecmd_ = new ::std::string;
  }
  filecmd_->assign(value);
}
inline void TransportFileRequest::set_filecmd(const char* value) {
  set_has_filecmd();
  if (filecmd_ == &::google::protobuf::internal::kEmptyString) {
    filecmd_ = new ::std::string;
  }
  filecmd_->assign(value);
}
inline void TransportFileRequest::set_filecmd(const char* value, size_t size) {
  set_has_filecmd();
  if (filecmd_ == &::google::protobuf::internal::kEmptyString) {
    filecmd_ = new ::std::string;
  }
  filecmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportFileRequest::mutable_filecmd() {
  set_has_filecmd();
  if (filecmd_ == &::google::protobuf::internal::kEmptyString) {
    filecmd_ = new ::std::string;
  }
  return filecmd_;
}
inline ::std::string* TransportFileRequest::release_filecmd() {
  clear_has_filecmd();
  if (filecmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filecmd_;
    filecmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TransportFileResponse

// required .lbs.da.openservice.TransportRet value = 1;
inline bool TransportFileResponse::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TransportFileResponse::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TransportFileResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TransportFileResponse::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline lbs::da::openservice::TransportRet TransportFileResponse::value() const {
  return static_cast< lbs::da::openservice::TransportRet >(value_);
}
inline void TransportFileResponse::set_value(lbs::da::openservice::TransportRet value) {
  GOOGLE_DCHECK(lbs::da::openservice::TransportRet_IsValid(value));
  set_has_value();
  value_ = value;
}

// optional string errmsg = 2;
inline bool TransportFileResponse::has_errmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TransportFileResponse::set_has_errmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TransportFileResponse::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TransportFileResponse::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::kEmptyString) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& TransportFileResponse::errmsg() const {
  return *errmsg_;
}
inline void TransportFileResponse::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void TransportFileResponse::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
}
inline void TransportFileResponse::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TransportFileResponse::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    errmsg_ = new ::std::string;
  }
  return errmsg_;
}
inline ::std::string* TransportFileResponse::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< lbs::da::openservice::TransportType>() {
  return lbs::da::openservice::TransportType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< lbs::da::openservice::TransportRet>() {
  return lbs::da::openservice::TransportRet_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_transport_2eproto__INCLUDED
