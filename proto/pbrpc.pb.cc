// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "pbrpc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace lbs {
namespace da {
namespace openservice {

namespace {

const ::google::protobuf::Descriptor* RequestHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPreferenceTags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPreferenceTags_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserPreference_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserPreference_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserPreferenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserPreferenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserPreferenceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserPreferenceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegularStayPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegularStayPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegularStayPointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegularStayPointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRegularStayPointResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRegularStayPointResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemBytes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemBytes_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemsByItemRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemsByItemRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetItemsByItemResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetItemsByItemResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBNItemsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBNItemsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetBNItemsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetBNItemsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLatestUserTrajRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLatestUserTrajRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetLatestUserTrajResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetLatestUserTrajResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatElement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatElement_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatReportRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatReportRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatReportResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatReportResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayRoute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayRoute_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicTripPlanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicTripPlanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicTripPlanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicTripPlanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayRouteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayRouteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LvTripPlanRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LvTripPlanRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LvTripPlanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LvTripPlanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WifiFinger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WifiFinger_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceSemanticRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceSemanticRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoiProbability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiProbability_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlaceSemanticResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlaceSemanticResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NuomiUserPreferenceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NuomiUserPreferenceRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StrFeatureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StrFeatureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUpInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUpInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NuomiUserPreferenceResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NuomiUserPreferenceResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAOIRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAOIRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAOIResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAOIResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNearPoiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNearPoiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PoiInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PoiInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetNearPoiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetNearPoiResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserPreferenceSourceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* UserTrajStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RequestIdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NuomiDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NuomiUpResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_pbrpc_2eproto() {
  protobuf_AddDesc_pbrpc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "pbrpc.proto");
  GOOGLE_CHECK(file != NULL);
  RequestHeader_descriptor_ = file->message_type(0);
  static const int RequestHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, servicekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, secretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, subservice_),
  };
  RequestHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestHeader_descriptor_,
      RequestHeader::default_instance_,
      RequestHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestHeader));
  Arg_descriptor_ = file->message_type(1);
  static const int Arg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, int_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, double_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, str_v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, elements_),
  };
  Arg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Arg));
  UserPreferenceTags_descriptor_ = file->message_type(2);
  static const int UserPreferenceTags_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreferenceTags, values_),
  };
  UserPreferenceTags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPreferenceTags_descriptor_,
      UserPreferenceTags::default_instance_,
      UserPreferenceTags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreferenceTags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreferenceTags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPreferenceTags));
  UserPreference_descriptor_ = file->message_type(3);
  static const int UserPreference_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, srctype_),
  };
  UserPreference_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserPreference_descriptor_,
      UserPreference::default_instance_,
      UserPreference_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserPreference, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserPreference));
  GetUserPreferenceRequest_descriptor_ = file->message_type(4);
  static const int GetUserPreferenceRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, srctype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, include_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, exclude_tag_),
  };
  GetUserPreferenceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserPreferenceRequest_descriptor_,
      GetUserPreferenceRequest::default_instance_,
      GetUserPreferenceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserPreferenceRequest));
  GetUserPreferenceResponse_descriptor_ = file->message_type(5);
  static const int GetUserPreferenceResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceResponse, values_),
  };
  GetUserPreferenceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserPreferenceResponse_descriptor_,
      GetUserPreferenceResponse::default_instance_,
      GetUserPreferenceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserPreferenceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserPreferenceResponse));
  RegularStayPoint_descriptor_ = file->message_type(6);
  static const int RegularStayPoint_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, areaid_),
  };
  RegularStayPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegularStayPoint_descriptor_,
      RegularStayPoint::default_instance_,
      RegularStayPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegularStayPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegularStayPoint));
  GetRegularStayPointRequest_descriptor_ = file->message_type(7);
  static const int GetRegularStayPointRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointRequest, type_),
  };
  GetRegularStayPointRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegularStayPointRequest_descriptor_,
      GetRegularStayPointRequest::default_instance_,
      GetRegularStayPointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegularStayPointRequest));
  GetRegularStayPointResponse_descriptor_ = file->message_type(8);
  static const int GetRegularStayPointResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointResponse, value_),
  };
  GetRegularStayPointResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRegularStayPointResponse_descriptor_,
      GetRegularStayPointResponse::default_instance_,
      GetRegularStayPointResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRegularStayPointResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRegularStayPointResponse));
  Item_descriptor_ = file->message_type(9);
  static const int Item_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, str_value_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  ItemBytes_descriptor_ = file->message_type(10);
  static const int ItemBytes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBytes, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBytes, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBytes, str_value_),
  };
  ItemBytes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemBytes_descriptor_,
      ItemBytes::default_instance_,
      ItemBytes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBytes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemBytes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemBytes));
  GetItemsByItemRequest_descriptor_ = file->message_type(11);
  static const int GetItemsByItemRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, algorithmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, useridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, args_),
  };
  GetItemsByItemRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemsByItemRequest_descriptor_,
      GetItemsByItemRequest::default_instance_,
      GetItemsByItemRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemsByItemRequest));
  GetItemsByItemResponse_descriptor_ = file->message_type(12);
  static const int GetItemsByItemResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, algorithmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, uniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, args_),
  };
  GetItemsByItemResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetItemsByItemResponse_descriptor_,
      GetItemsByItemResponse::default_instance_,
      GetItemsByItemResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetItemsByItemResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetItemsByItemResponse));
  GetBNItemsRequest_descriptor_ = file->message_type(13);
  static const int GetBNItemsRequest_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, algorithmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, baidu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, nm_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, useridtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, coor_sys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, area_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, vec_catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, vec_subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, vec_thdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, vec_shop_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, vec_shop_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, item_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, item_id_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_brand_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_thdcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_subcatg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_catg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_shop_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_shop_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, qrw_vec_shop_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, args_),
  };
  GetBNItemsRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBNItemsRequest_descriptor_,
      GetBNItemsRequest::default_instance_,
      GetBNItemsRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBNItemsRequest));
  GetBNItemsResponse_descriptor_ = file->message_type(14);
  static const int GetBNItemsResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, algorithmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, uniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, bid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, args_),
  };
  GetBNItemsResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetBNItemsResponse_descriptor_,
      GetBNItemsResponse::default_instance_,
      GetBNItemsResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetBNItemsResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetBNItemsResponse));
  GetLatestUserTrajRequest_descriptor_ = file->message_type(15);
  static const int GetLatestUserTrajRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajRequest, cuid_),
  };
  GetLatestUserTrajRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLatestUserTrajRequest_descriptor_,
      GetLatestUserTrajRequest::default_instance_,
      GetLatestUserTrajRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLatestUserTrajRequest));
  GetLatestUserTrajResponse_descriptor_ = file->message_type(16);
  static const int GetLatestUserTrajResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, is_sticked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, staytime_),
  };
  GetLatestUserTrajResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetLatestUserTrajResponse_descriptor_,
      GetLatestUserTrajResponse::default_instance_,
      GetLatestUserTrajResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLatestUserTrajResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLatestUserTrajResponse));
  StatElement_descriptor_ = file->message_type(17);
  static const int StatElement_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatElement, stat_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatElement, value_),
  };
  StatElement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatElement_descriptor_,
      StatElement::default_instance_,
      StatElement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatElement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatElement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatElement));
  StatReportRequest_descriptor_ = file->message_type(18);
  static const int StatReportRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportRequest, items_),
  };
  StatReportRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatReportRequest_descriptor_,
      StatReportRequest::default_instance_,
      StatReportRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatReportRequest));
  StatReportResponse_descriptor_ = file->message_type(19);
  static const int StatReportResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportResponse, items_),
  };
  StatReportResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatReportResponse_descriptor_,
      StatReportResponse::default_instance_,
      StatReportResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatReportResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatReportResponse));
  DayRoute_descriptor_ = file->message_type(20);
  static const int DayRoute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, scene_dura_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, cater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, hotel_),
  };
  DayRoute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayRoute_descriptor_,
      DayRoute::default_instance_,
      DayRoute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRoute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayRoute));
  DynamicTripPlanRequest_descriptor_ = file->message_type(21);
  static const int DynamicTripPlanRequest_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, cater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, args_),
  };
  DynamicTripPlanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynamicTripPlanRequest_descriptor_,
      DynamicTripPlanRequest::default_instance_,
      DynamicTripPlanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynamicTripPlanRequest));
  DynamicTripPlanResponse_descriptor_ = file->message_type(22);
  static const int DynamicTripPlanResponse_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, total_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, dayroute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, origin_lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, uniq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, args_),
  };
  DynamicTripPlanResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DynamicTripPlanResponse_descriptor_,
      DynamicTripPlanResponse::default_instance_,
      DynamicTripPlanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicTripPlanResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DynamicTripPlanResponse));
  DayRouteInfo_descriptor_ = file->message_type(23);
  static const int DayRouteInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, scene_dura_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, cater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, lvid_cater_hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, opt_json_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, args_),
  };
  DayRouteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayRouteInfo_descriptor_,
      DayRouteInfo::default_instance_,
      DayRouteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayRouteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayRouteInfo));
  LvTripPlanRequest_descriptor_ = file->message_type(24);
  static const int LvTripPlanRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, algorithmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, cater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, hotel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, opt_json_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, args_),
  };
  LvTripPlanRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LvTripPlanRequest_descriptor_,
      LvTripPlanRequest::default_instance_,
      LvTripPlanRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LvTripPlanRequest));
  LvTripPlanResponse_descriptor_ = file->message_type(25);
  static const int LvTripPlanResponse_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, original_total_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, original_total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, planned_total_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, planned_total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, dayroute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, origin_lv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, uniq_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, opt_json_str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, args_),
  };
  LvTripPlanResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LvTripPlanResponse_descriptor_,
      LvTripPlanResponse::default_instance_,
      LvTripPlanResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LvTripPlanResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LvTripPlanResponse));
  WifiFinger_descriptor_ = file->message_type(26);
  static const int WifiFinger_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiFinger, mac_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiFinger, strength_),
  };
  WifiFinger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WifiFinger_descriptor_,
      WifiFinger::default_instance_,
      WifiFinger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiFinger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WifiFinger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WifiFinger));
  PlaceSemanticRequest_descriptor_ = file->message_type(27);
  static const int PlaceSemanticRequest_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, wifi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, similarity_threadhold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, algorithm_id_),
  };
  PlaceSemanticRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceSemanticRequest_descriptor_,
      PlaceSemanticRequest::default_instance_,
      PlaceSemanticRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceSemanticRequest));
  PoiProbability_descriptor_ = file->message_type(28);
  static const int PoiProbability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiProbability, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiProbability, probability_),
  };
  PoiProbability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoiProbability_descriptor_,
      PoiProbability::default_instance_,
      PoiProbability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiProbability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiProbability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoiProbability));
  PlaceSemanticResponse_descriptor_ = file->message_type(29);
  static const int PlaceSemanticResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticResponse, aoi_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticResponse, poi_prob_list_),
  };
  PlaceSemanticResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlaceSemanticResponse_descriptor_,
      PlaceSemanticResponse::default_instance_,
      PlaceSemanticResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlaceSemanticResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlaceSemanticResponse));
  NuomiUserPreferenceRequest_descriptor_ = file->message_type(30);
  static const int NuomiUserPreferenceRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, id_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, feature_names_),
  };
  NuomiUserPreferenceRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NuomiUserPreferenceRequest_descriptor_,
      NuomiUserPreferenceRequest::default_instance_,
      NuomiUserPreferenceRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NuomiUserPreferenceRequest));
  ScoreInfo_descriptor_ = file->message_type(31);
  static const int ScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, featureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, score_),
  };
  ScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreInfo_descriptor_,
      ScoreInfo::default_instance_,
      ScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreInfo));
  FeatureInfo_descriptor_ = file->message_type(32);
  static const int FeatureInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureInfo, feature_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureInfo, score_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureInfo, data_type_),
  };
  FeatureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FeatureInfo_descriptor_,
      FeatureInfo::default_instance_,
      FeatureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FeatureInfo));
  StrInfo_descriptor_ = file->message_type(33);
  static const int StrInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrInfo, featureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrInfo, value_),
  };
  StrInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrInfo_descriptor_,
      StrInfo::default_instance_,
      StrInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrInfo));
  StrFeatureInfo_descriptor_ = file->message_type(34);
  static const int StrFeatureInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrFeatureInfo, feature_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrFeatureInfo, str_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrFeatureInfo, data_type_),
  };
  StrFeatureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StrFeatureInfo_descriptor_,
      StrFeatureInfo::default_instance_,
      StrFeatureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrFeatureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StrFeatureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StrFeatureInfo));
  ItemUpInfo_descriptor_ = file->message_type(35);
  static const int ItemUpInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, date_),
  };
  ItemUpInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUpInfo_descriptor_,
      ItemUpInfo::default_instance_,
      ItemUpInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUpInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUpInfo));
  NuomiUserPreferenceResponse_descriptor_ = file->message_type(36);
  static const int NuomiUserPreferenceResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, features_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, other_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, item_infos_),
  };
  NuomiUserPreferenceResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NuomiUserPreferenceResponse_descriptor_,
      NuomiUserPreferenceResponse::default_instance_,
      NuomiUserPreferenceResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NuomiUserPreferenceResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NuomiUserPreferenceResponse));
  GetAOIRequest_descriptor_ = file->message_type(37);
  static const int GetAOIRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, cuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, mercator_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, mercator_y_),
  };
  GetAOIRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAOIRequest_descriptor_,
      GetAOIRequest::default_instance_,
      GetAOIRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAOIRequest));
  GetAOIResponse_descriptor_ = file->message_type(38);
  static const int GetAOIResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIResponse, aoi_id_),
  };
  GetAOIResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAOIResponse_descriptor_,
      GetAOIResponse::default_instance_,
      GetAOIResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAOIResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAOIResponse));
  GetNearPoiRequest_descriptor_ = file->message_type(39);
  static const int GetNearPoiRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, radius_),
  };
  GetNearPoiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNearPoiRequest_descriptor_,
      GetNearPoiRequest::default_instance_,
      GetNearPoiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNearPoiRequest));
  PoiInfo_descriptor_ = file->message_type(40);
  static const int PoiInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, poi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, latitude_),
  };
  PoiInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PoiInfo_descriptor_,
      PoiInfo::default_instance_,
      PoiInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PoiInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PoiInfo));
  GetNearPoiResponse_descriptor_ = file->message_type(41);
  static const int GetNearPoiResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiResponse, poi_list_),
  };
  GetNearPoiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetNearPoiResponse_descriptor_,
      GetNearPoiResponse::default_instance_,
      GetNearPoiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetNearPoiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetNearPoiResponse));
  UserPreferenceSourceType_descriptor_ = file->enum_type(0);
  UserTrajStatus_descriptor_ = file->enum_type(1);
  RequestIdType_descriptor_ = file->enum_type(2);
  NuomiDataType_descriptor_ = file->enum_type(3);
  NuomiUpResultType_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_pbrpc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestHeader_descriptor_, &RequestHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPreferenceTags_descriptor_, &UserPreferenceTags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserPreference_descriptor_, &UserPreference::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserPreferenceRequest_descriptor_, &GetUserPreferenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserPreferenceResponse_descriptor_, &GetUserPreferenceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegularStayPoint_descriptor_, &RegularStayPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegularStayPointRequest_descriptor_, &GetRegularStayPointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRegularStayPointResponse_descriptor_, &GetRegularStayPointResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemBytes_descriptor_, &ItemBytes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemsByItemRequest_descriptor_, &GetItemsByItemRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetItemsByItemResponse_descriptor_, &GetItemsByItemResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBNItemsRequest_descriptor_, &GetBNItemsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetBNItemsResponse_descriptor_, &GetBNItemsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLatestUserTrajRequest_descriptor_, &GetLatestUserTrajRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLatestUserTrajResponse_descriptor_, &GetLatestUserTrajResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatElement_descriptor_, &StatElement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatReportRequest_descriptor_, &StatReportRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatReportResponse_descriptor_, &StatReportResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayRoute_descriptor_, &DayRoute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynamicTripPlanRequest_descriptor_, &DynamicTripPlanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DynamicTripPlanResponse_descriptor_, &DynamicTripPlanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayRouteInfo_descriptor_, &DayRouteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LvTripPlanRequest_descriptor_, &LvTripPlanRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LvTripPlanResponse_descriptor_, &LvTripPlanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WifiFinger_descriptor_, &WifiFinger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceSemanticRequest_descriptor_, &PlaceSemanticRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoiProbability_descriptor_, &PoiProbability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlaceSemanticResponse_descriptor_, &PlaceSemanticResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NuomiUserPreferenceRequest_descriptor_, &NuomiUserPreferenceRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreInfo_descriptor_, &ScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FeatureInfo_descriptor_, &FeatureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrInfo_descriptor_, &StrInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StrFeatureInfo_descriptor_, &StrFeatureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUpInfo_descriptor_, &ItemUpInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NuomiUserPreferenceResponse_descriptor_, &NuomiUserPreferenceResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAOIRequest_descriptor_, &GetAOIRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAOIResponse_descriptor_, &GetAOIResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNearPoiRequest_descriptor_, &GetNearPoiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PoiInfo_descriptor_, &PoiInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetNearPoiResponse_descriptor_, &GetNearPoiResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_pbrpc_2eproto() {
  delete RequestHeader::default_instance_;
  delete RequestHeader_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete UserPreferenceTags::default_instance_;
  delete UserPreferenceTags_reflection_;
  delete UserPreference::default_instance_;
  delete UserPreference_reflection_;
  delete GetUserPreferenceRequest::default_instance_;
  delete GetUserPreferenceRequest_reflection_;
  delete GetUserPreferenceResponse::default_instance_;
  delete GetUserPreferenceResponse_reflection_;
  delete RegularStayPoint::default_instance_;
  delete RegularStayPoint_reflection_;
  delete GetRegularStayPointRequest::default_instance_;
  delete GetRegularStayPointRequest_reflection_;
  delete GetRegularStayPointResponse::default_instance_;
  delete GetRegularStayPointResponse_reflection_;
  delete Item::default_instance_;
  delete Item_reflection_;
  delete ItemBytes::default_instance_;
  delete ItemBytes_reflection_;
  delete GetItemsByItemRequest::default_instance_;
  delete GetItemsByItemRequest_reflection_;
  delete GetItemsByItemResponse::default_instance_;
  delete GetItemsByItemResponse_reflection_;
  delete GetBNItemsRequest::default_instance_;
  delete GetBNItemsRequest_reflection_;
  delete GetBNItemsResponse::default_instance_;
  delete GetBNItemsResponse_reflection_;
  delete GetLatestUserTrajRequest::default_instance_;
  delete GetLatestUserTrajRequest_reflection_;
  delete GetLatestUserTrajResponse::default_instance_;
  delete GetLatestUserTrajResponse_reflection_;
  delete StatElement::default_instance_;
  delete StatElement_reflection_;
  delete StatReportRequest::default_instance_;
  delete StatReportRequest_reflection_;
  delete StatReportResponse::default_instance_;
  delete StatReportResponse_reflection_;
  delete DayRoute::default_instance_;
  delete DayRoute_reflection_;
  delete DynamicTripPlanRequest::default_instance_;
  delete DynamicTripPlanRequest_reflection_;
  delete DynamicTripPlanResponse::default_instance_;
  delete DynamicTripPlanResponse_reflection_;
  delete DayRouteInfo::default_instance_;
  delete DayRouteInfo_reflection_;
  delete LvTripPlanRequest::default_instance_;
  delete LvTripPlanRequest_reflection_;
  delete LvTripPlanResponse::default_instance_;
  delete LvTripPlanResponse_reflection_;
  delete WifiFinger::default_instance_;
  delete WifiFinger_reflection_;
  delete PlaceSemanticRequest::default_instance_;
  delete PlaceSemanticRequest_reflection_;
  delete PoiProbability::default_instance_;
  delete PoiProbability_reflection_;
  delete PlaceSemanticResponse::default_instance_;
  delete PlaceSemanticResponse_reflection_;
  delete NuomiUserPreferenceRequest::default_instance_;
  delete NuomiUserPreferenceRequest_reflection_;
  delete ScoreInfo::default_instance_;
  delete ScoreInfo_reflection_;
  delete FeatureInfo::default_instance_;
  delete FeatureInfo_reflection_;
  delete StrInfo::default_instance_;
  delete StrInfo_reflection_;
  delete StrFeatureInfo::default_instance_;
  delete StrFeatureInfo_reflection_;
  delete ItemUpInfo::default_instance_;
  delete ItemUpInfo_reflection_;
  delete NuomiUserPreferenceResponse::default_instance_;
  delete NuomiUserPreferenceResponse_reflection_;
  delete GetAOIRequest::default_instance_;
  delete GetAOIRequest_reflection_;
  delete GetAOIResponse::default_instance_;
  delete GetAOIResponse_reflection_;
  delete GetNearPoiRequest::default_instance_;
  delete GetNearPoiRequest_reflection_;
  delete PoiInfo::default_instance_;
  delete PoiInfo_reflection_;
  delete GetNearPoiResponse::default_instance_;
  delete GetNearPoiResponse_reflection_;
}

void protobuf_AddDesc_pbrpc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013pbrpc.proto\022\022lbs.da.openservice\"J\n\rReq"
    "uestHeader\022\022\n\nservicekey\030\001 \001(\t\022\021\n\tsecret"
    "key\030\002 \001(\t\022\022\n\nsubservice\030\003 \001(\t\"n\n\003Arg\022\014\n\004"
    "name\030\001 \002(\t\022\r\n\005int_v\030\002 \001(\003\022\020\n\010double_v\030\003 "
    "\001(\001\022\r\n\005str_v\030\004 \001(\t\022)\n\010elements\030\005 \003(\0132\027.l"
    "bs.da.openservice.Arg\"$\n\022UserPreferenceT"
    "ags\022\016\n\006values\030\001 \003(\t\"L\n\016UserPreference\022\013\n"
    "\003tag\030\001 \002(\t\022\r\n\005level\030\002 \001(\005\022\r\n\005value\030\003 \001(\002"
    "\022\017\n\007srcType\030\004 \001(\t\"\226\001\n\030GetUserPreferenceR"
    "equest\0221\n\006header\030\001 \002(\0132!.lbs.da.openserv"
    "ice.RequestHeader\022\014\n\004cuid\030\002 \002(\t\022\017\n\007srcTy"
    "pe\030\003 \003(\t\022\023\n\013include_tag\030\004 \003(\t\022\023\n\013exclude"
    "_tag\030\005 \003(\t\"O\n\031GetUserPreferenceResponse\022"
    "2\n\006values\030\001 \003(\0132\".lbs.da.openservice.Use"
    "rPreference\"\211\001\n\020RegularStayPoint\0220\n\004type"
    "\030\001 \002(\0162\".lbs.da.openservice.UserTrajStat"
    "us\022\021\n\tlongitude\030\002 \002(\001\022\020\n\010latitude\030\003 \002(\001\022"
    "\016\n\006radius\030\004 \001(\001\022\016\n\006areaid\030\005 \001(\005\"\217\001\n\032GetR"
    "egularStayPointRequest\0221\n\006header\030\001 \002(\0132!"
    ".lbs.da.openservice.RequestHeader\022\014\n\004cui"
    "d\030\002 \002(\t\0220\n\004type\030\003 \003(\0162\".lbs.da.openservi"
    "ce.UserTrajStatus\"R\n\033GetRegularStayPoint"
    "Response\0223\n\005value\030\001 \003(\0132$.lbs.da.openser"
    "vice.RegularStayPoint\"4\n\004Item\022\n\n\002id\030\001 \002("
    "\t\022\r\n\005value\030\002 \003(\001\022\021\n\tstr_value\030\003 \003(\t\"9\n\tI"
    "temBytes\022\n\n\002id\030\001 \002(\t\022\r\n\005value\030\002 \003(\001\022\021\n\ts"
    "tr_value\030\003 \003(\014\"\313\001\n\025GetItemsByItemRequest"
    "\0221\n\006header\030\001 \002(\0132!.lbs.da.openservice.Re"
    "questHeader\022\023\n\013algorithmId\030\002 \001(\t\022\020\n\010item"
    "_ids\030\003 \003(\t\022\016\n\006userid\030\004 \001(\t\022\022\n\nuseridtype"
    "\030\005 \001(\t\022\r\n\005limit\030\006 \001(\005\022%\n\004args\030\007 \003(\0132\027.lb"
    "s.da.openservice.Arg\"\252\001\n\026GetItemsByItemR"
    "esponse\022\'\n\005items\030\001 \003(\0132\030.lbs.da.openserv"
    "ice.Item\022\016\n\006userid\030\002 \001(\t\022\023\n\013algorithmId\030"
    "\003 \001(\t\022\016\n\006uniqId\030\004 \001(\t\022\013\n\003bid\030\005 \001(\t\022%\n\004ar"
    "gs\030\006 \003(\0132\027.lbs.da.openservice.Arg\"\206\005\n\021Ge"
    "tBNItemsRequest\0221\n\006header\030\001 \002(\0132!.lbs.da"
    ".openservice.RequestHeader\022\023\n\013algorithmI"
    "d\030\002 \001(\014\022\r\n\005limit\030\003 \001(\005\022\016\n\006source\030\004 \001(\005\022\016"
    "\n\006userid\030\005 \001(\014\022\014\n\004cuid\030\006 \001(\014\022\020\n\010baidu_id"
    "\030\007 \001(\014\022\016\n\006nm_key\030\010 \001(\014\022\022\n\nuseridtype\030\t \001"
    "(\014\022\020\n\010coor_sys\030\n \001(\014\022\t\n\001x\030\013 \001(\002\022\t\n\001y\030\014 \001"
    "(\002\022\017\n\007area_id\030\r \001(\003\022\r\n\005query\030\016 \001(\014\022\020\n\010ve"
    "c_catg\030\017 \003(\003\022\023\n\013vec_subcatg\030\020 \003(\003\022\023\n\013vec"
    "_thdcatg\030\021 \003(\003\022\025\n\rvec_shop_dist\030\022 \003(\003\022\026\n"
    "\016vec_shop_range\030\023 \003(\003\022\020\n\010item_ids\030\024 \003(\014\022"
    "\026\n\016item_id_format\030\025 \001(\005\022\030\n\020qrw_vec_brand"
    "_id\030\026 \003(\003\022\027\n\017qrw_vec_thdcatg\030\027 \003(\003\022\027\n\017qr"
    "w_vec_subcatg\030\030 \003(\003\022\024\n\014qrw_vec_catg\030\031 \003("
    "\003\022\031\n\021qrw_vec_shop_city\030\032 \003(\003\022\031\n\021qrw_vec_"
    "shop_dist\030\033 \003(\003\022\032\n\022qrw_vec_shop_range\030\034 "
    "\003(\003\022%\n\004args\030\035 \003(\0132\027.lbs.da.openservice.A"
    "rg\"\253\001\n\022GetBNItemsResponse\022,\n\005items\030\001 \003(\013"
    "2\035.lbs.da.openservice.ItemBytes\022\016\n\006useri"
    "d\030\002 \001(\014\022\023\n\013algorithmId\030\003 \001(\014\022\016\n\006uniqId\030\004"
    " \001(\014\022\013\n\003bid\030\005 \001(\014\022%\n\004args\030\006 \003(\0132\027.lbs.da"
    ".openservice.Arg\"[\n\030GetLatestUserTrajReq"
    "uest\0221\n\006header\030\001 \002(\0132!.lbs.da.openservic"
    "e.RequestHeader\022\014\n\004cuid\030\002 \002(\t\"\303\001\n\031GetLat"
    "estUserTrajResponse\0222\n\006status\030\001 \001(\0162\".lb"
    "s.da.openservice.UserTrajStatus\022\022\n\nis_st"
    "icked\030\002 \001(\010\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010latitu"
    "de\030\004 \001(\001\022\022\n\nstart_time\030\005 \001(\003\022\023\n\013update_t"
    "ime\030\006 \001(\003\022\020\n\010staytime\030\007 \001(\005\".\n\013StatEleme"
    "nt\022\020\n\010stat_key\030\001 \002(\t\022\r\n\005value\030\002 \002(\003\"v\n\021S"
    "tatReportRequest\0221\n\006header\030\001 \002(\0132!.lbs.d"
    "a.openservice.RequestHeader\022.\n\005items\030\002 \003"
    "(\0132\037.lbs.da.openservice.StatElement\"D\n\022S"
    "tatReportResponse\022.\n\005items\030\001 \003(\0132\037.lbs.d"
    "a.openservice.StatElement\"P\n\010DayRoute\022\r\n"
    "\005lv_id\030\001 \003(\t\022\027\n\017scene_dura_time\030\002 \001(\001\022\r\n"
    "\005cater\030\003 \003(\t\022\r\n\005hotel\030\004 \003(\t\"\257\001\n\026DynamicT"
    "ripPlanRequest\0221\n\006header\030\001 \002(\0132!.lbs.da."
    "openservice.RequestHeader\022\r\n\005lv_id\030\002 \003(\t"
    "\022\016\n\006userid\030\003 \001(\t\022\r\n\005cater\030\004 \003(\t\022\r\n\005hotel"
    "\030\005 \003(\t\022%\n\004args\030\006 \003(\0132\027.lbs.da.openservic"
    "e.Arg\"\336\001\n\027DynamicTripPlanResponse\022\016\n\006sta"
    "tus\030\001 \002(\005\022\026\n\016total_distance\030\002 \002(\003\022\r\n\005lv_"
    "id\030\003 \003(\t\022.\n\010dayroute\030\004 \003(\0132\034.lbs.da.open"
    "service.DayRoute\022\024\n\014origin_lv_id\030\005 \003(\t\022\016"
    "\n\006userid\030\006 \001(\t\022\017\n\007uniq_id\030\007 \001(\t\022%\n\004args\030"
    "\010 \003(\0132\027.lbs.da.openservice.Arg\"\253\001\n\014DayRo"
    "uteInfo\022\r\n\005lv_id\030\001 \003(\t\022\027\n\017scene_dura_tim"
    "e\030\002 \001(\001\022\r\n\005cater\030\003 \003(\t\022\r\n\005hotel\030\004 \003(\t\022\030\n"
    "\020lvid_cater_hotel\030\005 \003(\t\022\024\n\014opt_json_str\030"
    "\006 \001(\t\022%\n\004args\030\007 \003(\0132\027.lbs.da.openservice"
    ".Arg\"\325\001\n\021LvTripPlanRequest\0221\n\006header\030\001 \002"
    "(\0132!.lbs.da.openservice.RequestHeader\022\r\n"
    "\005lv_id\030\002 \003(\t\022\016\n\006userid\030\003 \001(\t\022\023\n\013algorith"
    "mId\030\004 \001(\t\022\r\n\005cater\030\005 \003(\t\022\r\n\005hotel\030\006 \003(\t\022"
    "\024\n\014opt_json_str\030\007 \001(\t\022%\n\004args\030\010 \003(\0132\027.lb"
    "s.da.openservice.Arg\"\325\002\n\022LvTripPlanRespo"
    "nse\022\016\n\006status\030\001 \002(\005\022\037\n\027original_total_di"
    "stance\030\002 \002(\003\022\033\n\023original_total_time\030\003 \002("
    "\003\022\036\n\026planned_total_distance\030\004 \002(\003\022\032\n\022pla"
    "nned_total_time\030\005 \002(\003\022\r\n\005lv_id\030\010 \003(\t\0222\n\010"
    "dayroute\030\t \003(\0132 .lbs.da.openservice.DayR"
    "outeInfo\022\024\n\014origin_lv_id\030\n \003(\t\022\016\n\006userid"
    "\030\013 \001(\t\022\017\n\007uniq_id\030\014 \001(\t\022\024\n\014opt_json_str\030"
    "\r \001(\t\022%\n\004args\030\016 \003(\0132\027.lbs.da.openservice"
    ".Arg\"0\n\nWifiFinger\022\020\n\010mac_addr\030\001 \002(\t\022\020\n\010"
    "strength\030\002 \002(\005\"\361\001\n\024PlaceSemanticRequest\022"
    "1\n\006header\030\001 \002(\0132!.lbs.da.openservice.Req"
    "uestHeader\022,\n\004wifi\030\002 \003(\0132\036.lbs.da.opense"
    "rvice.WifiFinger\022\021\n\tlongitude\030\003 \001(\001\022\020\n\010l"
    "atitude\030\004 \001(\001\022\014\n\004cuid\030\005 \001(\t\022\020\n\010distance\030"
    "\006 \001(\005\022\035\n\025similarity_threadhold\030\007 \001(\001\022\024\n\014"
    "algorithm_id\030\010 \001(\t\"2\n\016PoiProbability\022\013\n\003"
    "poi\030\001 \002(\t\022\023\n\013probability\030\002 \002(\001\"b\n\025PlaceS"
    "emanticResponse\022\016\n\006aoi_id\030\001 \003(\t\0229\n\rpoi_p"
    "rob_list\030\002 \003(\0132\".lbs.da.openservice.PoiP"
    "robability\"\334\001\n\032NuomiUserPreferenceReques"
    "t\0221\n\006header\030\001 \002(\0132!.lbs.da.openservice.R"
    "equestHeader\0222\n\007id_type\030\002 \002(\0162!.lbs.da.o"
    "penservice.RequestIdType\022\n\n\002id\030\003 \002(\t\0224\n\t"
    "data_type\030\004 \001(\0162!.lbs.da.openservice.Nuo"
    "miDataType\022\025\n\rfeature_names\030\005 \003(\t\"-\n\tSco"
    "reInfo\022\021\n\tfeatureid\030\001 \002(\t\022\r\n\005score\030\002 \002(\001"
    "\"\214\001\n\013FeatureInfo\022\024\n\014feature_name\030\001 \002(\t\0221"
    "\n\nscore_info\030\002 \002(\0132\035.lbs.da.openservice."
    "ScoreInfo\0224\n\tdata_type\030\003 \001(\0162!.lbs.da.op"
    "enservice.NuomiDataType\"+\n\007StrInfo\022\021\n\tfe"
    "atureid\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\213\001\n\016StrFeat"
    "ureInfo\022\024\n\014feature_name\030\001 \002(\t\022-\n\010str_inf"
    "o\030\002 \002(\0132\033.lbs.da.openservice.StrInfo\0224\n\t"
    "data_type\030\003 \001(\0162!.lbs.da.openservice.Nuo"
    "miDataType\"C\n\nItemUpInfo\022\n\n\002id\030\001 \001(\t\022\r\n\005"
    "score\030\002 \001(\001\022\014\n\004info\030\003 \001(\t\022\014\n\004date\030\004 \001(\t\""
    "\205\002\n\033NuomiUserPreferenceResponse\0221\n\010featu"
    "res\030\001 \003(\0132\037.lbs.da.openservice.FeatureIn"
    "fo\022:\n\013result_type\030\002 \001(\0162%.lbs.da.openser"
    "vice.NuomiUpResultType\022\n\n\002id\030\003 \001(\t\0227\n\013ot"
    "her_infos\030\004 \003(\0132\".lbs.da.openservice.Str"
    "FeatureInfo\0222\n\nitem_infos\030\005 \003(\0132\036.lbs.da"
    ".openservice.ItemUpInfo\"x\n\rGetAOIRequest"
    "\0221\n\006header\030\001 \002(\0132!.lbs.da.openservice.Re"
    "questHeader\022\014\n\004cuid\030\002 \001(\t\022\022\n\nmercator_x\030"
    "\003 \001(\001\022\022\n\nmercator_y\030\004 \001(\001\" \n\016GetAOIRespo"
    "nse\022\016\n\006aoi_id\030\001 \003(\t\"{\n\021GetNearPoiRequest"
    "\0221\n\006header\030\001 \002(\0132!.lbs.da.openservice.Re"
    "questHeader\022\021\n\tlongitude\030\002 \001(\001\022\020\n\010latitu"
    "de\030\003 \001(\001\022\016\n\006radius\030\004 \001(\001\"I\n\007PoiInfo\022\013\n\003p"
    "oi\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021\n\tlongitude\030\003 \001("
    "\001\022\020\n\010latitude\030\004 \001(\001\"C\n\022GetNearPoiRespons"
    "e\022-\n\010poi_list\030\001 \003(\0132\033.lbs.da.openservice"
    ".PoiInfo*\206\001\n\030UserPreferenceSourceType\022\020\n"
    "\014MAP_CATEGORY\020\000\022\r\n\tMAP_PRICE\020\001\022\r\n\tMAP_BR"
    "AND\020\002\022\024\n\020TUANGOU_CATEGORY\020\n\022\021\n\rTUANGOU_P"
    "RICE\020\013\022\021\n\rTUANGOU_BRAND\020\014*\331\001\n\016UserTrajSt"
    "atus\022\017\n\013HOME_STATUS\020\000\022\022\n\016COMPANY_STATUS\020"
    "\001\022\017\n\013AREA_STATUS\020\002\022\020\n\014LOCAL_STATUS\020\003\022\020\n\014"
    "EWORK_STATUS\020\004\022\022\n\016ETRAVEL_STATUS\020\005\022\022\n\016EF"
    "AMILY_STATUS\020\006\022\017\n\013ELOW_STATUS\020\007\022\020\n\014EHIGH"
    "_STATUS\020\010\022\017\n\013ENEW_STATUS\020\t\022\021\n\rUNKNOW_STA"
    "TUS\020d*B\n\rRequestIdType\022\017\n\013PASSPORT_ID\020\001\022"
    "\014\n\010BAIDU_ID\020\002\022\010\n\004CUID\020\003\022\010\n\004IMEI\020\004*{\n\rNuo"
    "miDataType\022\021\n\rNUOMI_OFFLINE\020\001\022\020\n\014NUOMI_O"
    "NLINE\020\002\022\r\n\tNUOMI_ALL\020\003\022\020\n\014ITEM_OFFLINE\020\004"
    "\022\026\n\022NUOMI_ITEM_OFFLINE\020\005\022\014\n\010ALL_DATA\020d*\205"
    "\001\n\021NuomiUpResultType\022\021\n\rBY_PASSPORTID\020\001\022"
    "\016\n\nBY_BAIDUID\020\002\022\013\n\007BY_CUID\020\003\022\013\n\007BY_IMEI\020"
    "\004\022\r\n\tNO_RESULT\020d\022\021\n\rRESULTS_ERROR\020e\022\021\n\rR"
    "EQUEST_ERROR\020fB\002H\001", 6498);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "pbrpc.proto", &protobuf_RegisterTypes);
  RequestHeader::default_instance_ = new RequestHeader();
  Arg::default_instance_ = new Arg();
  UserPreferenceTags::default_instance_ = new UserPreferenceTags();
  UserPreference::default_instance_ = new UserPreference();
  GetUserPreferenceRequest::default_instance_ = new GetUserPreferenceRequest();
  GetUserPreferenceResponse::default_instance_ = new GetUserPreferenceResponse();
  RegularStayPoint::default_instance_ = new RegularStayPoint();
  GetRegularStayPointRequest::default_instance_ = new GetRegularStayPointRequest();
  GetRegularStayPointResponse::default_instance_ = new GetRegularStayPointResponse();
  Item::default_instance_ = new Item();
  ItemBytes::default_instance_ = new ItemBytes();
  GetItemsByItemRequest::default_instance_ = new GetItemsByItemRequest();
  GetItemsByItemResponse::default_instance_ = new GetItemsByItemResponse();
  GetBNItemsRequest::default_instance_ = new GetBNItemsRequest();
  GetBNItemsResponse::default_instance_ = new GetBNItemsResponse();
  GetLatestUserTrajRequest::default_instance_ = new GetLatestUserTrajRequest();
  GetLatestUserTrajResponse::default_instance_ = new GetLatestUserTrajResponse();
  StatElement::default_instance_ = new StatElement();
  StatReportRequest::default_instance_ = new StatReportRequest();
  StatReportResponse::default_instance_ = new StatReportResponse();
  DayRoute::default_instance_ = new DayRoute();
  DynamicTripPlanRequest::default_instance_ = new DynamicTripPlanRequest();
  DynamicTripPlanResponse::default_instance_ = new DynamicTripPlanResponse();
  DayRouteInfo::default_instance_ = new DayRouteInfo();
  LvTripPlanRequest::default_instance_ = new LvTripPlanRequest();
  LvTripPlanResponse::default_instance_ = new LvTripPlanResponse();
  WifiFinger::default_instance_ = new WifiFinger();
  PlaceSemanticRequest::default_instance_ = new PlaceSemanticRequest();
  PoiProbability::default_instance_ = new PoiProbability();
  PlaceSemanticResponse::default_instance_ = new PlaceSemanticResponse();
  NuomiUserPreferenceRequest::default_instance_ = new NuomiUserPreferenceRequest();
  ScoreInfo::default_instance_ = new ScoreInfo();
  FeatureInfo::default_instance_ = new FeatureInfo();
  StrInfo::default_instance_ = new StrInfo();
  StrFeatureInfo::default_instance_ = new StrFeatureInfo();
  ItemUpInfo::default_instance_ = new ItemUpInfo();
  NuomiUserPreferenceResponse::default_instance_ = new NuomiUserPreferenceResponse();
  GetAOIRequest::default_instance_ = new GetAOIRequest();
  GetAOIResponse::default_instance_ = new GetAOIResponse();
  GetNearPoiRequest::default_instance_ = new GetNearPoiRequest();
  PoiInfo::default_instance_ = new PoiInfo();
  GetNearPoiResponse::default_instance_ = new GetNearPoiResponse();
  RequestHeader::default_instance_->InitAsDefaultInstance();
  Arg::default_instance_->InitAsDefaultInstance();
  UserPreferenceTags::default_instance_->InitAsDefaultInstance();
  UserPreference::default_instance_->InitAsDefaultInstance();
  GetUserPreferenceRequest::default_instance_->InitAsDefaultInstance();
  GetUserPreferenceResponse::default_instance_->InitAsDefaultInstance();
  RegularStayPoint::default_instance_->InitAsDefaultInstance();
  GetRegularStayPointRequest::default_instance_->InitAsDefaultInstance();
  GetRegularStayPointResponse::default_instance_->InitAsDefaultInstance();
  Item::default_instance_->InitAsDefaultInstance();
  ItemBytes::default_instance_->InitAsDefaultInstance();
  GetItemsByItemRequest::default_instance_->InitAsDefaultInstance();
  GetItemsByItemResponse::default_instance_->InitAsDefaultInstance();
  GetBNItemsRequest::default_instance_->InitAsDefaultInstance();
  GetBNItemsResponse::default_instance_->InitAsDefaultInstance();
  GetLatestUserTrajRequest::default_instance_->InitAsDefaultInstance();
  GetLatestUserTrajResponse::default_instance_->InitAsDefaultInstance();
  StatElement::default_instance_->InitAsDefaultInstance();
  StatReportRequest::default_instance_->InitAsDefaultInstance();
  StatReportResponse::default_instance_->InitAsDefaultInstance();
  DayRoute::default_instance_->InitAsDefaultInstance();
  DynamicTripPlanRequest::default_instance_->InitAsDefaultInstance();
  DynamicTripPlanResponse::default_instance_->InitAsDefaultInstance();
  DayRouteInfo::default_instance_->InitAsDefaultInstance();
  LvTripPlanRequest::default_instance_->InitAsDefaultInstance();
  LvTripPlanResponse::default_instance_->InitAsDefaultInstance();
  WifiFinger::default_instance_->InitAsDefaultInstance();
  PlaceSemanticRequest::default_instance_->InitAsDefaultInstance();
  PoiProbability::default_instance_->InitAsDefaultInstance();
  PlaceSemanticResponse::default_instance_->InitAsDefaultInstance();
  NuomiUserPreferenceRequest::default_instance_->InitAsDefaultInstance();
  ScoreInfo::default_instance_->InitAsDefaultInstance();
  FeatureInfo::default_instance_->InitAsDefaultInstance();
  StrInfo::default_instance_->InitAsDefaultInstance();
  StrFeatureInfo::default_instance_->InitAsDefaultInstance();
  ItemUpInfo::default_instance_->InitAsDefaultInstance();
  NuomiUserPreferenceResponse::default_instance_->InitAsDefaultInstance();
  GetAOIRequest::default_instance_->InitAsDefaultInstance();
  GetAOIResponse::default_instance_->InitAsDefaultInstance();
  GetNearPoiRequest::default_instance_->InitAsDefaultInstance();
  PoiInfo::default_instance_->InitAsDefaultInstance();
  GetNearPoiResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_pbrpc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_pbrpc_2eproto {
  StaticDescriptorInitializer_pbrpc_2eproto() {
    protobuf_AddDesc_pbrpc_2eproto();
  }
} static_descriptor_initializer_pbrpc_2eproto_;

const ::google::protobuf::EnumDescriptor* UserPreferenceSourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPreferenceSourceType_descriptor_;
}
bool UserPreferenceSourceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* UserTrajStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTrajStatus_descriptor_;
}
bool UserTrajStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RequestIdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestIdType_descriptor_;
}
bool RequestIdType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NuomiDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NuomiDataType_descriptor_;
}
bool NuomiDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NuomiUpResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NuomiUpResultType_descriptor_;
}
bool NuomiUpResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RequestHeader::kServicekeyFieldNumber;
const int RequestHeader::kSecretkeyFieldNumber;
const int RequestHeader::kSubserviceFieldNumber;
#endif  // !_MSC_VER

RequestHeader::RequestHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestHeader::InitAsDefaultInstance() {
}

RequestHeader::RequestHeader(const RequestHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestHeader::SharedCtor() {
  _cached_size_ = 0;
  servicekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secretkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  subservice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestHeader::~RequestHeader() {
  SharedDtor();
}

void RequestHeader::SharedDtor() {
  if (servicekey_ != &::google::protobuf::internal::kEmptyString) {
    delete servicekey_;
  }
  if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
    delete secretkey_;
  }
  if (subservice_ != &::google::protobuf::internal::kEmptyString) {
    delete subservice_;
  }
  if (this != default_instance_) {
  }
}

void RequestHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestHeader_descriptor_;
}

const RequestHeader& RequestHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

RequestHeader* RequestHeader::default_instance_ = NULL;

RequestHeader* RequestHeader::New() const {
  return new RequestHeader;
}

void RequestHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_servicekey()) {
      if (servicekey_ != &::google::protobuf::internal::kEmptyString) {
        servicekey_->clear();
      }
    }
    if (has_secretkey()) {
      if (secretkey_ != &::google::protobuf::internal::kEmptyString) {
        secretkey_->clear();
      }
    }
    if (has_subservice()) {
      if (subservice_ != &::google::protobuf::internal::kEmptyString) {
        subservice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string servicekey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->servicekey().data(), this->servicekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_secretkey;
        break;
      }
      
      // optional string secretkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secretkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->secretkey().data(), this->secretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_subservice;
        break;
      }
      
      // optional string subservice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subservice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subservice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->subservice().data(), this->subservice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string servicekey = 1;
  if (has_servicekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servicekey().data(), this->servicekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->servicekey(), output);
  }
  
  // optional string secretkey = 2;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->secretkey(), output);
  }
  
  // optional string subservice = 3;
  if (has_subservice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subservice().data(), this->subservice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->subservice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string servicekey = 1;
  if (has_servicekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->servicekey().data(), this->servicekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->servicekey(), target);
  }
  
  // optional string secretkey = 2;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secretkey(), target);
  }
  
  // optional string subservice = 3;
  if (has_subservice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->subservice().data(), this->subservice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->subservice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string servicekey = 1;
    if (has_servicekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->servicekey());
    }
    
    // optional string secretkey = 2;
    if (has_secretkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->secretkey());
    }
    
    // optional string subservice = 3;
    if (has_subservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->subservice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestHeader::MergeFrom(const RequestHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_servicekey()) {
      set_servicekey(from.servicekey());
    }
    if (from.has_secretkey()) {
      set_secretkey(from.secretkey());
    }
    if (from.has_subservice()) {
      set_subservice(from.subservice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  
  return true;
}

void RequestHeader::Swap(RequestHeader* other) {
  if (other != this) {
    std::swap(servicekey_, other->servicekey_);
    std::swap(secretkey_, other->secretkey_);
    std::swap(subservice_, other->subservice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestHeader_descriptor_;
  metadata.reflection = RequestHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Arg::kNameFieldNumber;
const int Arg::kIntVFieldNumber;
const int Arg::kDoubleVFieldNumber;
const int Arg::kStrVFieldNumber;
const int Arg::kElementsFieldNumber;
#endif  // !_MSC_VER

Arg::Arg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Arg::InitAsDefaultInstance() {
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Arg::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  int_v_ = GOOGLE_LONGLONG(0);
  double_v_ = 0;
  str_v_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  SharedDtor();
}

void Arg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (str_v_ != &::google::protobuf::internal::kEmptyString) {
    delete str_v_;
  }
  if (this != default_instance_) {
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New() const {
  return new Arg;
}

void Arg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    int_v_ = GOOGLE_LONGLONG(0);
    double_v_ = 0;
    if (has_str_v()) {
      if (str_v_ != &::google::protobuf::internal::kEmptyString) {
        str_v_->clear();
      }
    }
  }
  elements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_v;
        break;
      }
      
      // optional int64 int_v = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_v_)));
          set_has_int_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_double_v;
        break;
      }
      
      // optional double double_v = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_v_)));
          set_has_double_v();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_v;
        break;
      }
      
      // optional string str_v = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_v:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str_v()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_v().data(), this->str_v().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elements;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg elements = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elements;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int64 int_v = 2;
  if (has_int_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_v(), output);
  }
  
  // optional double double_v = 3;
  if (has_double_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_v(), output);
  }
  
  // optional string str_v = 4;
  if (has_str_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_v().data(), this->str_v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->str_v(), output);
  }
  
  // repeated .lbs.da.openservice.Arg elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elements(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Arg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int64 int_v = 2;
  if (has_int_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_v(), target);
  }
  
  // optional double double_v = 3;
  if (has_double_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_v(), target);
  }
  
  // optional string str_v = 4;
  if (has_str_v()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_v().data(), this->str_v().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->str_v(), target);
  }
  
  // repeated .lbs.da.openservice.Arg elements = 5;
  for (int i = 0; i < this->elements_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elements(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Arg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int64 int_v = 2;
    if (has_int_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_v());
    }
    
    // optional double double_v = 3;
    if (has_double_v()) {
      total_size += 1 + 8;
    }
    
    // optional string str_v = 4;
    if (has_str_v()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str_v());
    }
    
  }
  // repeated .lbs.da.openservice.Arg elements = 5;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Arg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Arg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
  GOOGLE_CHECK_NE(&from, this);
  elements_.MergeFrom(from.elements_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_int_v()) {
      set_int_v(from.int_v());
    }
    if (from.has_double_v()) {
      set_double_v(from.double_v());
    }
    if (from.has_str_v()) {
      set_str_v(from.str_v());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < elements_size(); i++) {
    if (!this->elements(i).IsInitialized()) return false;
  }
  return true;
}

void Arg::Swap(Arg* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(int_v_, other->int_v_);
    std::swap(double_v_, other->double_v_);
    std::swap(str_v_, other->str_v_);
    elements_.Swap(&other->elements_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPreferenceTags::kValuesFieldNumber;
#endif  // !_MSC_VER

UserPreferenceTags::UserPreferenceTags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPreferenceTags::InitAsDefaultInstance() {
}

UserPreferenceTags::UserPreferenceTags(const UserPreferenceTags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPreferenceTags::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPreferenceTags::~UserPreferenceTags() {
  SharedDtor();
}

void UserPreferenceTags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserPreferenceTags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPreferenceTags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPreferenceTags_descriptor_;
}

const UserPreferenceTags& UserPreferenceTags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

UserPreferenceTags* UserPreferenceTags::default_instance_ = NULL;

UserPreferenceTags* UserPreferenceTags::New() const {
  return new UserPreferenceTags;
}

void UserPreferenceTags::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPreferenceTags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(0).data(), this->values(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPreferenceTags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPreferenceTags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPreferenceTags::ByteSize() const {
  int total_size = 0;
  
  // repeated string values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPreferenceTags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPreferenceTags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPreferenceTags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPreferenceTags::MergeFrom(const UserPreferenceTags& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPreferenceTags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPreferenceTags::CopyFrom(const UserPreferenceTags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPreferenceTags::IsInitialized() const {
  
  return true;
}

void UserPreferenceTags::Swap(UserPreferenceTags* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPreferenceTags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPreferenceTags_descriptor_;
  metadata.reflection = UserPreferenceTags_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserPreference::kTagFieldNumber;
const int UserPreference::kLevelFieldNumber;
const int UserPreference::kValueFieldNumber;
const int UserPreference::kSrcTypeFieldNumber;
#endif  // !_MSC_VER

UserPreference::UserPreference()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserPreference::InitAsDefaultInstance() {
}

UserPreference::UserPreference(const UserPreference& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserPreference::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  value_ = 0;
  srctype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserPreference::~UserPreference() {
  SharedDtor();
}

void UserPreference::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (srctype_ != &::google::protobuf::internal::kEmptyString) {
    delete srctype_;
  }
  if (this != default_instance_) {
  }
}

void UserPreference::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserPreference::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserPreference_descriptor_;
}

const UserPreference& UserPreference::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

UserPreference* UserPreference::default_instance_ = NULL;

UserPreference* UserPreference::New() const {
  return new UserPreference;
}

void UserPreference::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    level_ = 0;
    value_ = 0;
    if (has_srctype()) {
      if (srctype_ != &::google::protobuf::internal::kEmptyString) {
        srctype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserPreference::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }
      
      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }
      
      // optional float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_srcType;
        break;
      }
      
      // optional string srcType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srctype().data(), this->srctype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserPreference::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(), output);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }
  
  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }
  
  // optional string srcType = 4;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->srctype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserPreference::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }
  
  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }
  
  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }
  
  // optional string srcType = 4;
  if (has_srctype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype().data(), this->srctype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->srctype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserPreference::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }
    
    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
    // optional string srcType = 4;
    if (has_srctype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->srctype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserPreference::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserPreference* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserPreference*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserPreference::MergeFrom(const UserPreference& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_srctype()) {
      set_srctype(from.srctype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserPreference::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPreference::CopyFrom(const UserPreference& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPreference::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UserPreference::Swap(UserPreference* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(level_, other->level_);
    std::swap(value_, other->value_);
    std::swap(srctype_, other->srctype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserPreference::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserPreference_descriptor_;
  metadata.reflection = UserPreference_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserPreferenceRequest::kHeaderFieldNumber;
const int GetUserPreferenceRequest::kCuidFieldNumber;
const int GetUserPreferenceRequest::kSrcTypeFieldNumber;
const int GetUserPreferenceRequest::kIncludeTagFieldNumber;
const int GetUserPreferenceRequest::kExcludeTagFieldNumber;
#endif  // !_MSC_VER

GetUserPreferenceRequest::GetUserPreferenceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserPreferenceRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetUserPreferenceRequest::GetUserPreferenceRequest(const GetUserPreferenceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserPreferenceRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserPreferenceRequest::~GetUserPreferenceRequest() {
  SharedDtor();
}

void GetUserPreferenceRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetUserPreferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserPreferenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserPreferenceRequest_descriptor_;
}

const GetUserPreferenceRequest& GetUserPreferenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetUserPreferenceRequest* GetUserPreferenceRequest::default_instance_ = NULL;

GetUserPreferenceRequest* GetUserPreferenceRequest::New() const {
  return new GetUserPreferenceRequest;
}

void GetUserPreferenceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
  }
  srctype_.Clear();
  include_tag_.Clear();
  exclude_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserPreferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // required string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srcType;
        break;
      }
      
      // repeated string srcType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_srcType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_srctype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->srctype(0).data(), this->srctype(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_srcType;
        if (input->ExpectTag(34)) goto parse_include_tag;
        break;
      }
      
      // repeated string include_tag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_include_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_include_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->include_tag(0).data(), this->include_tag(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_include_tag;
        if (input->ExpectTag(42)) goto parse_exclude_tag;
        break;
      }
      
      // repeated string exclude_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exclude_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exclude_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exclude_tag(0).data(), this->exclude_tag(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_exclude_tag;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserPreferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  // repeated string srcType = 3;
  for (int i = 0; i < this->srctype_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->srctype(i).data(), this->srctype(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->srctype(i), output);
  }
  
  // repeated string include_tag = 4;
  for (int i = 0; i < this->include_tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->include_tag(i).data(), this->include_tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->include_tag(i), output);
  }
  
  // repeated string exclude_tag = 5;
  for (int i = 0; i < this->exclude_tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->exclude_tag(i).data(), this->exclude_tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->exclude_tag(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserPreferenceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  // repeated string srcType = 3;
  for (int i = 0; i < this->srctype_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->srctype(i).data(), this->srctype(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->srctype(i), target);
  }
  
  // repeated string include_tag = 4;
  for (int i = 0; i < this->include_tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->include_tag(i).data(), this->include_tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->include_tag(i), target);
  }
  
  // repeated string exclude_tag = 5;
  for (int i = 0; i < this->exclude_tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exclude_tag(i).data(), this->exclude_tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->exclude_tag(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserPreferenceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
  }
  // repeated string srcType = 3;
  total_size += 1 * this->srctype_size();
  for (int i = 0; i < this->srctype_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->srctype(i));
  }
  
  // repeated string include_tag = 4;
  total_size += 1 * this->include_tag_size();
  for (int i = 0; i < this->include_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->include_tag(i));
  }
  
  // repeated string exclude_tag = 5;
  total_size += 1 * this->exclude_tag_size();
  for (int i = 0; i < this->exclude_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exclude_tag(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserPreferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserPreferenceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserPreferenceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserPreferenceRequest::MergeFrom(const GetUserPreferenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  srctype_.MergeFrom(from.srctype_);
  include_tag_.MergeFrom(from.include_tag_);
  exclude_tag_.MergeFrom(from.exclude_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserPreferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserPreferenceRequest::CopyFrom(const GetUserPreferenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserPreferenceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetUserPreferenceRequest::Swap(GetUserPreferenceRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cuid_, other->cuid_);
    srctype_.Swap(&other->srctype_);
    include_tag_.Swap(&other->include_tag_);
    exclude_tag_.Swap(&other->exclude_tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserPreferenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserPreferenceRequest_descriptor_;
  metadata.reflection = GetUserPreferenceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserPreferenceResponse::kValuesFieldNumber;
#endif  // !_MSC_VER

GetUserPreferenceResponse::GetUserPreferenceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserPreferenceResponse::InitAsDefaultInstance() {
}

GetUserPreferenceResponse::GetUserPreferenceResponse(const GetUserPreferenceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserPreferenceResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserPreferenceResponse::~GetUserPreferenceResponse() {
  SharedDtor();
}

void GetUserPreferenceResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserPreferenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserPreferenceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserPreferenceResponse_descriptor_;
}

const GetUserPreferenceResponse& GetUserPreferenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetUserPreferenceResponse* GetUserPreferenceResponse::default_instance_ = NULL;

GetUserPreferenceResponse* GetUserPreferenceResponse::New() const {
  return new GetUserPreferenceResponse;
}

void GetUserPreferenceResponse::Clear() {
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserPreferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.UserPreference values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserPreferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.UserPreference values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserPreferenceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.UserPreference values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserPreferenceResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.UserPreference values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserPreferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserPreferenceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserPreferenceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserPreferenceResponse::MergeFrom(const GetUserPreferenceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserPreferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserPreferenceResponse::CopyFrom(const GetUserPreferenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserPreferenceResponse::IsInitialized() const {
  
  for (int i = 0; i < values_size(); i++) {
    if (!this->values(i).IsInitialized()) return false;
  }
  return true;
}

void GetUserPreferenceResponse::Swap(GetUserPreferenceResponse* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserPreferenceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserPreferenceResponse_descriptor_;
  metadata.reflection = GetUserPreferenceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegularStayPoint::kTypeFieldNumber;
const int RegularStayPoint::kLongitudeFieldNumber;
const int RegularStayPoint::kLatitudeFieldNumber;
const int RegularStayPoint::kRadiusFieldNumber;
const int RegularStayPoint::kAreaidFieldNumber;
#endif  // !_MSC_VER

RegularStayPoint::RegularStayPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegularStayPoint::InitAsDefaultInstance() {
}

RegularStayPoint::RegularStayPoint(const RegularStayPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegularStayPoint::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  longitude_ = 0;
  latitude_ = 0;
  radius_ = 0;
  areaid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegularStayPoint::~RegularStayPoint() {
  SharedDtor();
}

void RegularStayPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegularStayPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegularStayPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegularStayPoint_descriptor_;
}

const RegularStayPoint& RegularStayPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

RegularStayPoint* RegularStayPoint::default_instance_ = NULL;

RegularStayPoint* RegularStayPoint::New() const {
  return new RegularStayPoint;
}

void RegularStayPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    longitude_ = 0;
    latitude_ = 0;
    radius_ = 0;
    areaid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegularStayPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.UserTrajStatus type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::UserTrajStatus_IsValid(value)) {
            set_type(static_cast< lbs::da::openservice::UserTrajStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }
      
      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }
      
      // required double latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_radius;
        break;
      }
      
      // optional double radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_areaid;
        break;
      }
      
      // optional int32 areaid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaid_)));
          set_has_areaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegularStayPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.UserTrajStatus type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }
  
  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }
  
  // optional double radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }
  
  // optional int32 areaid = 5;
  if (has_areaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->areaid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegularStayPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.UserTrajStatus type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }
  
  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }
  
  // optional double radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }
  
  // optional int32 areaid = 5;
  if (has_areaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->areaid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegularStayPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.UserTrajStatus type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // optional double radius = 4;
    if (has_radius()) {
      total_size += 1 + 8;
    }
    
    // optional int32 areaid = 5;
    if (has_areaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegularStayPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegularStayPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegularStayPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegularStayPoint::MergeFrom(const RegularStayPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_areaid()) {
      set_areaid(from.areaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegularStayPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegularStayPoint::CopyFrom(const RegularStayPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegularStayPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RegularStayPoint::Swap(RegularStayPoint* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(radius_, other->radius_);
    std::swap(areaid_, other->areaid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegularStayPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegularStayPoint_descriptor_;
  metadata.reflection = RegularStayPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegularStayPointRequest::kHeaderFieldNumber;
const int GetRegularStayPointRequest::kCuidFieldNumber;
const int GetRegularStayPointRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

GetRegularStayPointRequest::GetRegularStayPointRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegularStayPointRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetRegularStayPointRequest::GetRegularStayPointRequest(const GetRegularStayPointRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegularStayPointRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegularStayPointRequest::~GetRegularStayPointRequest() {
  SharedDtor();
}

void GetRegularStayPointRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetRegularStayPointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegularStayPointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegularStayPointRequest_descriptor_;
}

const GetRegularStayPointRequest& GetRegularStayPointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetRegularStayPointRequest* GetRegularStayPointRequest::default_instance_ = NULL;

GetRegularStayPointRequest* GetRegularStayPointRequest::New() const {
  return new GetRegularStayPointRequest;
}

void GetRegularStayPointRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegularStayPointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // required string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }
      
      // repeated .lbs.da.openservice.UserTrajStatus type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::UserTrajStatus_IsValid(value)) {
            add_type(static_cast< lbs::da::openservice::UserTrajStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &lbs::da::openservice::UserTrajStatus_IsValid,
                 this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegularStayPointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  // repeated .lbs.da.openservice.UserTrajStatus type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegularStayPointRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  // repeated .lbs.da.openservice.UserTrajStatus type = 3;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegularStayPointRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
  }
  // repeated .lbs.da.openservice.UserTrajStatus type = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegularStayPointRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegularStayPointRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegularStayPointRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegularStayPointRequest::MergeFrom(const GetRegularStayPointRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegularStayPointRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegularStayPointRequest::CopyFrom(const GetRegularStayPointRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegularStayPointRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetRegularStayPointRequest::Swap(GetRegularStayPointRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cuid_, other->cuid_);
    type_.Swap(&other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegularStayPointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegularStayPointRequest_descriptor_;
  metadata.reflection = GetRegularStayPointRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRegularStayPointResponse::kValueFieldNumber;
#endif  // !_MSC_VER

GetRegularStayPointResponse::GetRegularStayPointResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRegularStayPointResponse::InitAsDefaultInstance() {
}

GetRegularStayPointResponse::GetRegularStayPointResponse(const GetRegularStayPointResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRegularStayPointResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRegularStayPointResponse::~GetRegularStayPointResponse() {
  SharedDtor();
}

void GetRegularStayPointResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRegularStayPointResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRegularStayPointResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRegularStayPointResponse_descriptor_;
}

const GetRegularStayPointResponse& GetRegularStayPointResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetRegularStayPointResponse* GetRegularStayPointResponse::default_instance_ = NULL;

GetRegularStayPointResponse* GetRegularStayPointResponse::New() const {
  return new GetRegularStayPointResponse;
}

void GetRegularStayPointResponse::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRegularStayPointResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.RegularStayPoint value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRegularStayPointResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.RegularStayPoint value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRegularStayPointResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.RegularStayPoint value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRegularStayPointResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.RegularStayPoint value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRegularStayPointResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRegularStayPointResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRegularStayPointResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRegularStayPointResponse::MergeFrom(const GetRegularStayPointResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRegularStayPointResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRegularStayPointResponse::CopyFrom(const GetRegularStayPointResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRegularStayPointResponse::IsInitialized() const {
  
  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void GetRegularStayPointResponse::Swap(GetRegularStayPointResponse* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRegularStayPointResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRegularStayPointResponse_descriptor_;
  metadata.reflection = GetRegularStayPointResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Item::kIdFieldNumber;
const int Item::kValueFieldNumber;
const int Item::kStrValueFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  value_.Clear();
  str_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }
      
      // repeated double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        if (input->ExpectTag(26)) goto parse_str_value;
        break;
      }
      
      // repeated string str_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_str_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str_value(0).data(), this->str_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->value(i), output);
  }
  
  // repeated string str_value = 3;
  for (int i = 0; i < this->str_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->str_value(i).data(), this->str_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->str_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->value(i), target);
  }
  
  // repeated string str_value = 3;
  for (int i = 0; i < this->str_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str_value(i).data(), this->str_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->str_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  // repeated double value = 2;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }
  
  // repeated string str_value = 3;
  total_size += 1 * this->str_value_size();
  for (int i = 0; i < this->str_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->str_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  str_value_.MergeFrom(from.str_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    value_.Swap(&other->value_);
    str_value_.Swap(&other->str_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemBytes::kIdFieldNumber;
const int ItemBytes::kValueFieldNumber;
const int ItemBytes::kStrValueFieldNumber;
#endif  // !_MSC_VER

ItemBytes::ItemBytes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemBytes::InitAsDefaultInstance() {
}

ItemBytes::ItemBytes(const ItemBytes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemBytes::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemBytes::~ItemBytes() {
  SharedDtor();
}

void ItemBytes::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void ItemBytes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemBytes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemBytes_descriptor_;
}

const ItemBytes& ItemBytes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

ItemBytes* ItemBytes::default_instance_ = NULL;

ItemBytes* ItemBytes::New() const {
  return new ItemBytes;
}

void ItemBytes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  value_.Clear();
  str_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemBytes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }
      
      // repeated double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        if (input->ExpectTag(26)) goto parse_str_value;
        break;
      }
      
      // repeated bytes str_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_str_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemBytes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->value(i), output);
  }
  
  // repeated bytes str_value = 3;
  for (int i = 0; i < this->str_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->str_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemBytes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // repeated double value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->value(i), target);
  }
  
  // repeated bytes str_value = 3;
  for (int i = 0; i < this->str_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->str_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemBytes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  // repeated double value = 2;
  {
    int data_size = 0;
    data_size = 8 * this->value_size();
    total_size += 1 * this->value_size() + data_size;
  }
  
  // repeated bytes str_value = 3;
  total_size += 1 * this->str_value_size();
  for (int i = 0; i < this->str_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->str_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemBytes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemBytes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemBytes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemBytes::MergeFrom(const ItemBytes& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  str_value_.MergeFrom(from.str_value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemBytes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemBytes::CopyFrom(const ItemBytes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemBytes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ItemBytes::Swap(ItemBytes* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    value_.Swap(&other->value_);
    str_value_.Swap(&other->str_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemBytes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemBytes_descriptor_;
  metadata.reflection = ItemBytes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemsByItemRequest::kHeaderFieldNumber;
const int GetItemsByItemRequest::kAlgorithmIdFieldNumber;
const int GetItemsByItemRequest::kItemIdsFieldNumber;
const int GetItemsByItemRequest::kUseridFieldNumber;
const int GetItemsByItemRequest::kUseridtypeFieldNumber;
const int GetItemsByItemRequest::kLimitFieldNumber;
const int GetItemsByItemRequest::kArgsFieldNumber;
#endif  // !_MSC_VER

GetItemsByItemRequest::GetItemsByItemRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemsByItemRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetItemsByItemRequest::GetItemsByItemRequest(const GetItemsByItemRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemsByItemRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  algorithmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useridtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemsByItemRequest::~GetItemsByItemRequest() {
  SharedDtor();
}

void GetItemsByItemRequest::SharedDtor() {
  if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithmid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (useridtype_ != &::google::protobuf::internal::kEmptyString) {
    delete useridtype_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetItemsByItemRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemsByItemRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemsByItemRequest_descriptor_;
}

const GetItemsByItemRequest& GetItemsByItemRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetItemsByItemRequest* GetItemsByItemRequest::default_instance_ = NULL;

GetItemsByItemRequest* GetItemsByItemRequest::New() const {
  return new GetItemsByItemRequest;
}

void GetItemsByItemRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_algorithmid()) {
      if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
        algorithmid_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_useridtype()) {
      if (useridtype_ != &::google::protobuf::internal::kEmptyString) {
        useridtype_->clear();
      }
    }
    limit_ = 0;
  }
  item_ids_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemsByItemRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_algorithmId;
        break;
      }
      
      // optional string algorithmId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithmId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithmid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algorithmid().data(), this->algorithmid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_ids;
        break;
      }
      
      // repeated string item_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_item_ids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->item_ids(0).data(), this->item_ids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item_ids;
        if (input->ExpectTag(34)) goto parse_userid;
        break;
      }
      
      // optional string userid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_useridtype;
        break;
      }
      
      // optional string useridtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useridtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useridtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useridtype().data(), this->useridtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemsByItemRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional string algorithmId = 2;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->algorithmid(), output);
  }
  
  // repeated string item_ids = 3;
  for (int i = 0; i < this->item_ids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->item_ids(i).data(), this->item_ids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->item_ids(i), output);
  }
  
  // optional string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }
  
  // optional string useridtype = 5;
  if (has_useridtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useridtype().data(), this->useridtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->useridtype(), output);
  }
  
  // optional int32 limit = 6;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->limit(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemsByItemRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional string algorithmId = 2;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->algorithmid(), target);
  }
  
  // repeated string item_ids = 3;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->item_ids(i).data(), this->item_ids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->item_ids(i), target);
  }
  
  // optional string userid = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }
  
  // optional string useridtype = 5;
  if (has_useridtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useridtype().data(), this->useridtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->useridtype(), target);
  }
  
  // optional int32 limit = 6;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->limit(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemsByItemRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string algorithmId = 2;
    if (has_algorithmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithmid());
    }
    
    // optional string userid = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string useridtype = 5;
    if (has_useridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useridtype());
    }
    
    // optional int32 limit = 6;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
  }
  // repeated string item_ids = 3;
  total_size += 1 * this->item_ids_size();
  for (int i = 0; i < this->item_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->item_ids(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemsByItemRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemsByItemRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemsByItemRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemsByItemRequest::MergeFrom(const GetItemsByItemRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_ids_.MergeFrom(from.item_ids_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_algorithmid()) {
      set_algorithmid(from.algorithmid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_useridtype()) {
      set_useridtype(from.useridtype());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemsByItemRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsByItemRequest::CopyFrom(const GetItemsByItemRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsByItemRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void GetItemsByItemRequest::Swap(GetItemsByItemRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(algorithmid_, other->algorithmid_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(userid_, other->userid_);
    std::swap(useridtype_, other->useridtype_);
    std::swap(limit_, other->limit_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemsByItemRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemsByItemRequest_descriptor_;
  metadata.reflection = GetItemsByItemRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetItemsByItemResponse::kItemsFieldNumber;
const int GetItemsByItemResponse::kUseridFieldNumber;
const int GetItemsByItemResponse::kAlgorithmIdFieldNumber;
const int GetItemsByItemResponse::kUniqIdFieldNumber;
const int GetItemsByItemResponse::kBidFieldNumber;
const int GetItemsByItemResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

GetItemsByItemResponse::GetItemsByItemResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetItemsByItemResponse::InitAsDefaultInstance() {
}

GetItemsByItemResponse::GetItemsByItemResponse(const GetItemsByItemResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetItemsByItemResponse::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algorithmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniqid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetItemsByItemResponse::~GetItemsByItemResponse() {
  SharedDtor();
}

void GetItemsByItemResponse::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithmid_;
  }
  if (uniqid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqid_;
  }
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void GetItemsByItemResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetItemsByItemResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetItemsByItemResponse_descriptor_;
}

const GetItemsByItemResponse& GetItemsByItemResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetItemsByItemResponse* GetItemsByItemResponse::default_instance_ = NULL;

GetItemsByItemResponse* GetItemsByItemResponse::New() const {
  return new GetItemsByItemResponse;
}

void GetItemsByItemResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_algorithmid()) {
      if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
        algorithmid_->clear();
      }
    }
    if (has_uniqid()) {
      if (uniqid_ != &::google::protobuf::internal::kEmptyString) {
        uniqid_->clear();
      }
    }
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
  }
  items_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetItemsByItemResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.Item items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }
      
      // optional string userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_algorithmId;
        break;
      }
      
      // optional string algorithmId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithmId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithmid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algorithmid().data(), this->algorithmid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uniqId;
        break;
      }
      
      // optional string uniqId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniqid().data(), this->uniqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bid;
        break;
      }
      
      // optional string bid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bid().data(), this->bid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetItemsByItemResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // optional string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->userid(), output);
  }
  
  // optional string algorithmId = 3;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->algorithmid(), output);
  }
  
  // optional string uniqId = 4;
  if (has_uniqid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqid().data(), this->uniqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->uniqid(), output);
  }
  
  // optional string bid = 5;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bid(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetItemsByItemResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // optional string userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->userid(), target);
  }
  
  // optional string algorithmId = 3;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->algorithmid(), target);
  }
  
  // optional string uniqId = 4;
  if (has_uniqid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniqid().data(), this->uniqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uniqid(), target);
  }
  
  // optional string bid = 5;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bid().data(), this->bid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bid(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetItemsByItemResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string algorithmId = 3;
    if (has_algorithmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithmid());
    }
    
    // optional string uniqId = 4;
    if (has_uniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniqid());
    }
    
    // optional string bid = 5;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bid());
    }
    
  }
  // repeated .lbs.da.openservice.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetItemsByItemResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetItemsByItemResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetItemsByItemResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetItemsByItemResponse::MergeFrom(const GetItemsByItemResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_algorithmid()) {
      set_algorithmid(from.algorithmid());
    }
    if (from.has_uniqid()) {
      set_uniqid(from.uniqid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetItemsByItemResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetItemsByItemResponse::CopyFrom(const GetItemsByItemResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetItemsByItemResponse::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void GetItemsByItemResponse::Swap(GetItemsByItemResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(userid_, other->userid_);
    std::swap(algorithmid_, other->algorithmid_);
    std::swap(uniqid_, other->uniqid_);
    std::swap(bid_, other->bid_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetItemsByItemResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetItemsByItemResponse_descriptor_;
  metadata.reflection = GetItemsByItemResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBNItemsRequest::kHeaderFieldNumber;
const int GetBNItemsRequest::kAlgorithmIdFieldNumber;
const int GetBNItemsRequest::kLimitFieldNumber;
const int GetBNItemsRequest::kSourceFieldNumber;
const int GetBNItemsRequest::kUseridFieldNumber;
const int GetBNItemsRequest::kCuidFieldNumber;
const int GetBNItemsRequest::kBaiduIdFieldNumber;
const int GetBNItemsRequest::kNmKeyFieldNumber;
const int GetBNItemsRequest::kUseridtypeFieldNumber;
const int GetBNItemsRequest::kCoorSysFieldNumber;
const int GetBNItemsRequest::kXFieldNumber;
const int GetBNItemsRequest::kYFieldNumber;
const int GetBNItemsRequest::kAreaIdFieldNumber;
const int GetBNItemsRequest::kQueryFieldNumber;
const int GetBNItemsRequest::kVecCatgFieldNumber;
const int GetBNItemsRequest::kVecSubcatgFieldNumber;
const int GetBNItemsRequest::kVecThdcatgFieldNumber;
const int GetBNItemsRequest::kVecShopDistFieldNumber;
const int GetBNItemsRequest::kVecShopRangeFieldNumber;
const int GetBNItemsRequest::kItemIdsFieldNumber;
const int GetBNItemsRequest::kItemIdFormatFieldNumber;
const int GetBNItemsRequest::kQrwVecBrandIdFieldNumber;
const int GetBNItemsRequest::kQrwVecThdcatgFieldNumber;
const int GetBNItemsRequest::kQrwVecSubcatgFieldNumber;
const int GetBNItemsRequest::kQrwVecCatgFieldNumber;
const int GetBNItemsRequest::kQrwVecShopCityFieldNumber;
const int GetBNItemsRequest::kQrwVecShopDistFieldNumber;
const int GetBNItemsRequest::kQrwVecShopRangeFieldNumber;
const int GetBNItemsRequest::kArgsFieldNumber;
#endif  // !_MSC_VER

GetBNItemsRequest::GetBNItemsRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBNItemsRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetBNItemsRequest::GetBNItemsRequest(const GetBNItemsRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBNItemsRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  algorithmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  source_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baidu_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nm_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  useridtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coor_sys_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  x_ = 0;
  y_ = 0;
  area_id_ = GOOGLE_LONGLONG(0);
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_format_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBNItemsRequest::~GetBNItemsRequest() {
  SharedDtor();
}

void GetBNItemsRequest::SharedDtor() {
  if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithmid_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
    delete baidu_id_;
  }
  if (nm_key_ != &::google::protobuf::internal::kEmptyString) {
    delete nm_key_;
  }
  if (useridtype_ != &::google::protobuf::internal::kEmptyString) {
    delete useridtype_;
  }
  if (coor_sys_ != &::google::protobuf::internal::kEmptyString) {
    delete coor_sys_;
  }
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetBNItemsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBNItemsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBNItemsRequest_descriptor_;
}

const GetBNItemsRequest& GetBNItemsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetBNItemsRequest* GetBNItemsRequest::default_instance_ = NULL;

GetBNItemsRequest* GetBNItemsRequest::New() const {
  return new GetBNItemsRequest;
}

void GetBNItemsRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_algorithmid()) {
      if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
        algorithmid_->clear();
      }
    }
    limit_ = 0;
    source_ = 0;
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    if (has_baidu_id()) {
      if (baidu_id_ != &::google::protobuf::internal::kEmptyString) {
        baidu_id_->clear();
      }
    }
    if (has_nm_key()) {
      if (nm_key_ != &::google::protobuf::internal::kEmptyString) {
        nm_key_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_useridtype()) {
      if (useridtype_ != &::google::protobuf::internal::kEmptyString) {
        useridtype_->clear();
      }
    }
    if (has_coor_sys()) {
      if (coor_sys_ != &::google::protobuf::internal::kEmptyString) {
        coor_sys_->clear();
      }
    }
    x_ = 0;
    y_ = 0;
    area_id_ = GOOGLE_LONGLONG(0);
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    item_id_format_ = 0;
  }
  vec_catg_.Clear();
  vec_subcatg_.Clear();
  vec_thdcatg_.Clear();
  vec_shop_dist_.Clear();
  vec_shop_range_.Clear();
  item_ids_.Clear();
  qrw_vec_brand_id_.Clear();
  qrw_vec_thdcatg_.Clear();
  qrw_vec_subcatg_.Clear();
  qrw_vec_catg_.Clear();
  qrw_vec_shop_city_.Clear();
  qrw_vec_shop_dist_.Clear();
  qrw_vec_shop_range_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBNItemsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_algorithmId;
        break;
      }
      
      // optional bytes algorithmId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithmId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_algorithmid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }
      
      // optional int32 limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_source;
        break;
      }
      
      // optional int32 source = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_userid;
        break;
      }
      
      // optional bytes userid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_cuid;
        break;
      }
      
      // optional bytes cuid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cuid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_baidu_id;
        break;
      }
      
      // optional bytes baidu_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baidu_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_baidu_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_nm_key;
        break;
      }
      
      // optional bytes nm_key = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nm_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nm_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_useridtype;
        break;
      }
      
      // optional bytes useridtype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useridtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_useridtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_coor_sys;
        break;
      }
      
      // optional bytes coor_sys = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coor_sys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_coor_sys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_x;
        break;
      }
      
      // optional float x = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_y;
        break;
      }
      
      // optional float y = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_area_id;
        break;
      }
      
      // optional int64 area_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_area_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &area_id_)));
          set_has_area_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_query;
        break;
      }
      
      // optional bytes query = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_query()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_vec_catg;
        break;
      }
      
      // repeated int64 vec_catg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_catg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 120, input, this->mutable_vec_catg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vec_catg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_vec_catg;
        if (input->ExpectTag(128)) goto parse_vec_subcatg;
        break;
      }
      
      // repeated int64 vec_subcatg = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_subcatg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 128, input, this->mutable_vec_subcatg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vec_subcatg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_vec_subcatg;
        if (input->ExpectTag(136)) goto parse_vec_thdcatg;
        break;
      }
      
      // repeated int64 vec_thdcatg = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_thdcatg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 136, input, this->mutable_vec_thdcatg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vec_thdcatg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vec_thdcatg;
        if (input->ExpectTag(144)) goto parse_vec_shop_dist;
        break;
      }
      
      // repeated int64 vec_shop_dist = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_shop_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 144, input, this->mutable_vec_shop_dist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vec_shop_dist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_vec_shop_dist;
        if (input->ExpectTag(152)) goto parse_vec_shop_range;
        break;
      }
      
      // repeated int64 vec_shop_range = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vec_shop_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 152, input, this->mutable_vec_shop_range())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_vec_shop_range())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_vec_shop_range;
        if (input->ExpectTag(162)) goto parse_item_ids;
        break;
      }
      
      // repeated bytes item_ids = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_ids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_item_ids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_item_ids;
        if (input->ExpectTag(168)) goto parse_item_id_format;
        break;
      }
      
      // optional int32 item_id_format = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id_format:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_id_format_)));
          set_has_item_id_format();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_qrw_vec_brand_id;
        break;
      }
      
      // repeated int64 qrw_vec_brand_id = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_brand_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 176, input, this->mutable_qrw_vec_brand_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_brand_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_qrw_vec_brand_id;
        if (input->ExpectTag(184)) goto parse_qrw_vec_thdcatg;
        break;
      }
      
      // repeated int64 qrw_vec_thdcatg = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_thdcatg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 184, input, this->mutable_qrw_vec_thdcatg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_thdcatg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_qrw_vec_thdcatg;
        if (input->ExpectTag(192)) goto parse_qrw_vec_subcatg;
        break;
      }
      
      // repeated int64 qrw_vec_subcatg = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_subcatg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 192, input, this->mutable_qrw_vec_subcatg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_subcatg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_qrw_vec_subcatg;
        if (input->ExpectTag(200)) goto parse_qrw_vec_catg;
        break;
      }
      
      // repeated int64 qrw_vec_catg = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_catg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 200, input, this->mutable_qrw_vec_catg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_catg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_qrw_vec_catg;
        if (input->ExpectTag(208)) goto parse_qrw_vec_shop_city;
        break;
      }
      
      // repeated int64 qrw_vec_shop_city = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_shop_city:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 208, input, this->mutable_qrw_vec_shop_city())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_shop_city())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_qrw_vec_shop_city;
        if (input->ExpectTag(216)) goto parse_qrw_vec_shop_dist;
        break;
      }
      
      // repeated int64 qrw_vec_shop_dist = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_shop_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 216, input, this->mutable_qrw_vec_shop_dist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_shop_dist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_qrw_vec_shop_dist;
        if (input->ExpectTag(224)) goto parse_qrw_vec_shop_range;
        break;
      }
      
      // repeated int64 qrw_vec_shop_range = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qrw_vec_shop_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 224, input, this->mutable_qrw_vec_shop_range())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_qrw_vec_shop_range())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_qrw_vec_shop_range;
        if (input->ExpectTag(234)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBNItemsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional bytes algorithmId = 2;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->algorithmid(), output);
  }
  
  // optional int32 limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->limit(), output);
  }
  
  // optional int32 source = 4;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->source(), output);
  }
  
  // optional bytes userid = 5;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->userid(), output);
  }
  
  // optional bytes cuid = 6;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->cuid(), output);
  }
  
  // optional bytes baidu_id = 7;
  if (has_baidu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->baidu_id(), output);
  }
  
  // optional bytes nm_key = 8;
  if (has_nm_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->nm_key(), output);
  }
  
  // optional bytes useridtype = 9;
  if (has_useridtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->useridtype(), output);
  }
  
  // optional bytes coor_sys = 10;
  if (has_coor_sys()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->coor_sys(), output);
  }
  
  // optional float x = 11;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x(), output);
  }
  
  // optional float y = 12;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->y(), output);
  }
  
  // optional int64 area_id = 13;
  if (has_area_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->area_id(), output);
  }
  
  // optional bytes query = 14;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->query(), output);
  }
  
  // repeated int64 vec_catg = 15;
  for (int i = 0; i < this->vec_catg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      15, this->vec_catg(i), output);
  }
  
  // repeated int64 vec_subcatg = 16;
  for (int i = 0; i < this->vec_subcatg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      16, this->vec_subcatg(i), output);
  }
  
  // repeated int64 vec_thdcatg = 17;
  for (int i = 0; i < this->vec_thdcatg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      17, this->vec_thdcatg(i), output);
  }
  
  // repeated int64 vec_shop_dist = 18;
  for (int i = 0; i < this->vec_shop_dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      18, this->vec_shop_dist(i), output);
  }
  
  // repeated int64 vec_shop_range = 19;
  for (int i = 0; i < this->vec_shop_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      19, this->vec_shop_range(i), output);
  }
  
  // repeated bytes item_ids = 20;
  for (int i = 0; i < this->item_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      20, this->item_ids(i), output);
  }
  
  // optional int32 item_id_format = 21;
  if (has_item_id_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->item_id_format(), output);
  }
  
  // repeated int64 qrw_vec_brand_id = 22;
  for (int i = 0; i < this->qrw_vec_brand_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      22, this->qrw_vec_brand_id(i), output);
  }
  
  // repeated int64 qrw_vec_thdcatg = 23;
  for (int i = 0; i < this->qrw_vec_thdcatg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      23, this->qrw_vec_thdcatg(i), output);
  }
  
  // repeated int64 qrw_vec_subcatg = 24;
  for (int i = 0; i < this->qrw_vec_subcatg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      24, this->qrw_vec_subcatg(i), output);
  }
  
  // repeated int64 qrw_vec_catg = 25;
  for (int i = 0; i < this->qrw_vec_catg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      25, this->qrw_vec_catg(i), output);
  }
  
  // repeated int64 qrw_vec_shop_city = 26;
  for (int i = 0; i < this->qrw_vec_shop_city_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      26, this->qrw_vec_shop_city(i), output);
  }
  
  // repeated int64 qrw_vec_shop_dist = 27;
  for (int i = 0; i < this->qrw_vec_shop_dist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      27, this->qrw_vec_shop_dist(i), output);
  }
  
  // repeated int64 qrw_vec_shop_range = 28;
  for (int i = 0; i < this->qrw_vec_shop_range_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      28, this->qrw_vec_shop_range(i), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 29;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBNItemsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional bytes algorithmId = 2;
  if (has_algorithmid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->algorithmid(), target);
  }
  
  // optional int32 limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->limit(), target);
  }
  
  // optional int32 source = 4;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->source(), target);
  }
  
  // optional bytes userid = 5;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->userid(), target);
  }
  
  // optional bytes cuid = 6;
  if (has_cuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->cuid(), target);
  }
  
  // optional bytes baidu_id = 7;
  if (has_baidu_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->baidu_id(), target);
  }
  
  // optional bytes nm_key = 8;
  if (has_nm_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->nm_key(), target);
  }
  
  // optional bytes useridtype = 9;
  if (has_useridtype()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->useridtype(), target);
  }
  
  // optional bytes coor_sys = 10;
  if (has_coor_sys()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->coor_sys(), target);
  }
  
  // optional float x = 11;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->x(), target);
  }
  
  // optional float y = 12;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->y(), target);
  }
  
  // optional int64 area_id = 13;
  if (has_area_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->area_id(), target);
  }
  
  // optional bytes query = 14;
  if (has_query()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->query(), target);
  }
  
  // repeated int64 vec_catg = 15;
  for (int i = 0; i < this->vec_catg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(15, this->vec_catg(i), target);
  }
  
  // repeated int64 vec_subcatg = 16;
  for (int i = 0; i < this->vec_subcatg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(16, this->vec_subcatg(i), target);
  }
  
  // repeated int64 vec_thdcatg = 17;
  for (int i = 0; i < this->vec_thdcatg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(17, this->vec_thdcatg(i), target);
  }
  
  // repeated int64 vec_shop_dist = 18;
  for (int i = 0; i < this->vec_shop_dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(18, this->vec_shop_dist(i), target);
  }
  
  // repeated int64 vec_shop_range = 19;
  for (int i = 0; i < this->vec_shop_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(19, this->vec_shop_range(i), target);
  }
  
  // repeated bytes item_ids = 20;
  for (int i = 0; i < this->item_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(20, this->item_ids(i), target);
  }
  
  // optional int32 item_id_format = 21;
  if (has_item_id_format()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->item_id_format(), target);
  }
  
  // repeated int64 qrw_vec_brand_id = 22;
  for (int i = 0; i < this->qrw_vec_brand_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(22, this->qrw_vec_brand_id(i), target);
  }
  
  // repeated int64 qrw_vec_thdcatg = 23;
  for (int i = 0; i < this->qrw_vec_thdcatg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(23, this->qrw_vec_thdcatg(i), target);
  }
  
  // repeated int64 qrw_vec_subcatg = 24;
  for (int i = 0; i < this->qrw_vec_subcatg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(24, this->qrw_vec_subcatg(i), target);
  }
  
  // repeated int64 qrw_vec_catg = 25;
  for (int i = 0; i < this->qrw_vec_catg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(25, this->qrw_vec_catg(i), target);
  }
  
  // repeated int64 qrw_vec_shop_city = 26;
  for (int i = 0; i < this->qrw_vec_shop_city_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(26, this->qrw_vec_shop_city(i), target);
  }
  
  // repeated int64 qrw_vec_shop_dist = 27;
  for (int i = 0; i < this->qrw_vec_shop_dist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(27, this->qrw_vec_shop_dist(i), target);
  }
  
  // repeated int64 qrw_vec_shop_range = 28;
  for (int i = 0; i < this->qrw_vec_shop_range_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(28, this->qrw_vec_shop_range(i), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 29;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBNItemsRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional bytes algorithmId = 2;
    if (has_algorithmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->algorithmid());
    }
    
    // optional int32 limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }
    
    // optional int32 source = 4;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }
    
    // optional bytes userid = 5;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }
    
    // optional bytes cuid = 6;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cuid());
    }
    
    // optional bytes baidu_id = 7;
    if (has_baidu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->baidu_id());
    }
    
    // optional bytes nm_key = 8;
    if (has_nm_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nm_key());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes useridtype = 9;
    if (has_useridtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->useridtype());
    }
    
    // optional bytes coor_sys = 10;
    if (has_coor_sys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->coor_sys());
    }
    
    // optional float x = 11;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 12;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional int64 area_id = 13;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->area_id());
    }
    
    // optional bytes query = 14;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->query());
    }
    
  }
  if (_has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    // optional int32 item_id_format = 21;
    if (has_item_id_format()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_id_format());
    }
    
  }
  // repeated int64 vec_catg = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_catg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vec_catg(i));
    }
    total_size += 1 * this->vec_catg_size() + data_size;
  }
  
  // repeated int64 vec_subcatg = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_subcatg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vec_subcatg(i));
    }
    total_size += 2 * this->vec_subcatg_size() + data_size;
  }
  
  // repeated int64 vec_thdcatg = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_thdcatg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vec_thdcatg(i));
    }
    total_size += 2 * this->vec_thdcatg_size() + data_size;
  }
  
  // repeated int64 vec_shop_dist = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_shop_dist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vec_shop_dist(i));
    }
    total_size += 2 * this->vec_shop_dist_size() + data_size;
  }
  
  // repeated int64 vec_shop_range = 19;
  {
    int data_size = 0;
    for (int i = 0; i < this->vec_shop_range_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->vec_shop_range(i));
    }
    total_size += 2 * this->vec_shop_range_size() + data_size;
  }
  
  // repeated bytes item_ids = 20;
  total_size += 2 * this->item_ids_size();
  for (int i = 0; i < this->item_ids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->item_ids(i));
  }
  
  // repeated int64 qrw_vec_brand_id = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_brand_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_brand_id(i));
    }
    total_size += 2 * this->qrw_vec_brand_id_size() + data_size;
  }
  
  // repeated int64 qrw_vec_thdcatg = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_thdcatg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_thdcatg(i));
    }
    total_size += 2 * this->qrw_vec_thdcatg_size() + data_size;
  }
  
  // repeated int64 qrw_vec_subcatg = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_subcatg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_subcatg(i));
    }
    total_size += 2 * this->qrw_vec_subcatg_size() + data_size;
  }
  
  // repeated int64 qrw_vec_catg = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_catg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_catg(i));
    }
    total_size += 2 * this->qrw_vec_catg_size() + data_size;
  }
  
  // repeated int64 qrw_vec_shop_city = 26;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_shop_city_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_shop_city(i));
    }
    total_size += 2 * this->qrw_vec_shop_city_size() + data_size;
  }
  
  // repeated int64 qrw_vec_shop_dist = 27;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_shop_dist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_shop_dist(i));
    }
    total_size += 2 * this->qrw_vec_shop_dist_size() + data_size;
  }
  
  // repeated int64 qrw_vec_shop_range = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->qrw_vec_shop_range_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->qrw_vec_shop_range(i));
    }
    total_size += 2 * this->qrw_vec_shop_range_size() + data_size;
  }
  
  // repeated .lbs.da.openservice.Arg args = 29;
  total_size += 2 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBNItemsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBNItemsRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBNItemsRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBNItemsRequest::MergeFrom(const GetBNItemsRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  vec_catg_.MergeFrom(from.vec_catg_);
  vec_subcatg_.MergeFrom(from.vec_subcatg_);
  vec_thdcatg_.MergeFrom(from.vec_thdcatg_);
  vec_shop_dist_.MergeFrom(from.vec_shop_dist_);
  vec_shop_range_.MergeFrom(from.vec_shop_range_);
  item_ids_.MergeFrom(from.item_ids_);
  qrw_vec_brand_id_.MergeFrom(from.qrw_vec_brand_id_);
  qrw_vec_thdcatg_.MergeFrom(from.qrw_vec_thdcatg_);
  qrw_vec_subcatg_.MergeFrom(from.qrw_vec_subcatg_);
  qrw_vec_catg_.MergeFrom(from.qrw_vec_catg_);
  qrw_vec_shop_city_.MergeFrom(from.qrw_vec_shop_city_);
  qrw_vec_shop_dist_.MergeFrom(from.qrw_vec_shop_dist_);
  qrw_vec_shop_range_.MergeFrom(from.qrw_vec_shop_range_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_algorithmid()) {
      set_algorithmid(from.algorithmid());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_baidu_id()) {
      set_baidu_id(from.baidu_id());
    }
    if (from.has_nm_key()) {
      set_nm_key(from.nm_key());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_useridtype()) {
      set_useridtype(from.useridtype());
    }
    if (from.has_coor_sys()) {
      set_coor_sys(from.coor_sys());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_area_id()) {
      set_area_id(from.area_id());
    }
    if (from.has_query()) {
      set_query(from.query());
    }
  }
  if (from._has_bits_[20 / 32] & (0xffu << (20 % 32))) {
    if (from.has_item_id_format()) {
      set_item_id_format(from.item_id_format());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBNItemsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBNItemsRequest::CopyFrom(const GetBNItemsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBNItemsRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void GetBNItemsRequest::Swap(GetBNItemsRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(algorithmid_, other->algorithmid_);
    std::swap(limit_, other->limit_);
    std::swap(source_, other->source_);
    std::swap(userid_, other->userid_);
    std::swap(cuid_, other->cuid_);
    std::swap(baidu_id_, other->baidu_id_);
    std::swap(nm_key_, other->nm_key_);
    std::swap(useridtype_, other->useridtype_);
    std::swap(coor_sys_, other->coor_sys_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(area_id_, other->area_id_);
    std::swap(query_, other->query_);
    vec_catg_.Swap(&other->vec_catg_);
    vec_subcatg_.Swap(&other->vec_subcatg_);
    vec_thdcatg_.Swap(&other->vec_thdcatg_);
    vec_shop_dist_.Swap(&other->vec_shop_dist_);
    vec_shop_range_.Swap(&other->vec_shop_range_);
    item_ids_.Swap(&other->item_ids_);
    std::swap(item_id_format_, other->item_id_format_);
    qrw_vec_brand_id_.Swap(&other->qrw_vec_brand_id_);
    qrw_vec_thdcatg_.Swap(&other->qrw_vec_thdcatg_);
    qrw_vec_subcatg_.Swap(&other->qrw_vec_subcatg_);
    qrw_vec_catg_.Swap(&other->qrw_vec_catg_);
    qrw_vec_shop_city_.Swap(&other->qrw_vec_shop_city_);
    qrw_vec_shop_dist_.Swap(&other->qrw_vec_shop_dist_);
    qrw_vec_shop_range_.Swap(&other->qrw_vec_shop_range_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBNItemsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBNItemsRequest_descriptor_;
  metadata.reflection = GetBNItemsRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetBNItemsResponse::kItemsFieldNumber;
const int GetBNItemsResponse::kUseridFieldNumber;
const int GetBNItemsResponse::kAlgorithmIdFieldNumber;
const int GetBNItemsResponse::kUniqIdFieldNumber;
const int GetBNItemsResponse::kBidFieldNumber;
const int GetBNItemsResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

GetBNItemsResponse::GetBNItemsResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetBNItemsResponse::InitAsDefaultInstance() {
}

GetBNItemsResponse::GetBNItemsResponse(const GetBNItemsResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetBNItemsResponse::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algorithmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniqid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetBNItemsResponse::~GetBNItemsResponse() {
  SharedDtor();
}

void GetBNItemsResponse::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithmid_;
  }
  if (uniqid_ != &::google::protobuf::internal::kEmptyString) {
    delete uniqid_;
  }
  if (bid_ != &::google::protobuf::internal::kEmptyString) {
    delete bid_;
  }
  if (this != default_instance_) {
  }
}

void GetBNItemsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetBNItemsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetBNItemsResponse_descriptor_;
}

const GetBNItemsResponse& GetBNItemsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetBNItemsResponse* GetBNItemsResponse::default_instance_ = NULL;

GetBNItemsResponse* GetBNItemsResponse::New() const {
  return new GetBNItemsResponse;
}

void GetBNItemsResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_algorithmid()) {
      if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
        algorithmid_->clear();
      }
    }
    if (has_uniqid()) {
      if (uniqid_ != &::google::protobuf::internal::kEmptyString) {
        uniqid_->clear();
      }
    }
    if (has_bid()) {
      if (bid_ != &::google::protobuf::internal::kEmptyString) {
        bid_->clear();
      }
    }
  }
  items_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetBNItemsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.ItemBytes items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_userid;
        break;
      }
      
      // optional bytes userid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_algorithmId;
        break;
      }
      
      // optional bytes algorithmId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithmId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_algorithmid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_uniqId;
        break;
      }
      
      // optional bytes uniqId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniqId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uniqid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bid;
        break;
      }
      
      // optional bytes bid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetBNItemsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.ItemBytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  // optional bytes userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->userid(), output);
  }
  
  // optional bytes algorithmId = 3;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->algorithmid(), output);
  }
  
  // optional bytes uniqId = 4;
  if (has_uniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->uniqid(), output);
  }
  
  // optional bytes bid = 5;
  if (has_bid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->bid(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetBNItemsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.ItemBytes items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  // optional bytes userid = 2;
  if (has_userid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->userid(), target);
  }
  
  // optional bytes algorithmId = 3;
  if (has_algorithmid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->algorithmid(), target);
  }
  
  // optional bytes uniqId = 4;
  if (has_uniqid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->uniqid(), target);
  }
  
  // optional bytes bid = 5;
  if (has_bid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->bid(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetBNItemsResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userid());
    }
    
    // optional bytes algorithmId = 3;
    if (has_algorithmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->algorithmid());
    }
    
    // optional bytes uniqId = 4;
    if (has_uniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uniqid());
    }
    
    // optional bytes bid = 5;
    if (has_bid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bid());
    }
    
  }
  // repeated .lbs.da.openservice.ItemBytes items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetBNItemsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetBNItemsResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetBNItemsResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetBNItemsResponse::MergeFrom(const GetBNItemsResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_algorithmid()) {
      set_algorithmid(from.algorithmid());
    }
    if (from.has_uniqid()) {
      set_uniqid(from.uniqid());
    }
    if (from.has_bid()) {
      set_bid(from.bid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetBNItemsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBNItemsResponse::CopyFrom(const GetBNItemsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBNItemsResponse::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void GetBNItemsResponse::Swap(GetBNItemsResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(userid_, other->userid_);
    std::swap(algorithmid_, other->algorithmid_);
    std::swap(uniqid_, other->uniqid_);
    std::swap(bid_, other->bid_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetBNItemsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetBNItemsResponse_descriptor_;
  metadata.reflection = GetBNItemsResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLatestUserTrajRequest::kHeaderFieldNumber;
const int GetLatestUserTrajRequest::kCuidFieldNumber;
#endif  // !_MSC_VER

GetLatestUserTrajRequest::GetLatestUserTrajRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLatestUserTrajRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetLatestUserTrajRequest::GetLatestUserTrajRequest(const GetLatestUserTrajRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLatestUserTrajRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLatestUserTrajRequest::~GetLatestUserTrajRequest() {
  SharedDtor();
}

void GetLatestUserTrajRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetLatestUserTrajRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLatestUserTrajRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLatestUserTrajRequest_descriptor_;
}

const GetLatestUserTrajRequest& GetLatestUserTrajRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetLatestUserTrajRequest* GetLatestUserTrajRequest::default_instance_ = NULL;

GetLatestUserTrajRequest* GetLatestUserTrajRequest::New() const {
  return new GetLatestUserTrajRequest;
}

void GetLatestUserTrajRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLatestUserTrajRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // required string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLatestUserTrajRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLatestUserTrajRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLatestUserTrajRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLatestUserTrajRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLatestUserTrajRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLatestUserTrajRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLatestUserTrajRequest::MergeFrom(const GetLatestUserTrajRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLatestUserTrajRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestUserTrajRequest::CopyFrom(const GetLatestUserTrajRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestUserTrajRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void GetLatestUserTrajRequest::Swap(GetLatestUserTrajRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cuid_, other->cuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLatestUserTrajRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLatestUserTrajRequest_descriptor_;
  metadata.reflection = GetLatestUserTrajRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLatestUserTrajResponse::kStatusFieldNumber;
const int GetLatestUserTrajResponse::kIsStickedFieldNumber;
const int GetLatestUserTrajResponse::kLongitudeFieldNumber;
const int GetLatestUserTrajResponse::kLatitudeFieldNumber;
const int GetLatestUserTrajResponse::kStartTimeFieldNumber;
const int GetLatestUserTrajResponse::kUpdateTimeFieldNumber;
const int GetLatestUserTrajResponse::kStaytimeFieldNumber;
#endif  // !_MSC_VER

GetLatestUserTrajResponse::GetLatestUserTrajResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetLatestUserTrajResponse::InitAsDefaultInstance() {
}

GetLatestUserTrajResponse::GetLatestUserTrajResponse(const GetLatestUserTrajResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetLatestUserTrajResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  is_sticked_ = false;
  longitude_ = 0;
  latitude_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  update_time_ = GOOGLE_LONGLONG(0);
  staytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLatestUserTrajResponse::~GetLatestUserTrajResponse() {
  SharedDtor();
}

void GetLatestUserTrajResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetLatestUserTrajResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetLatestUserTrajResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLatestUserTrajResponse_descriptor_;
}

const GetLatestUserTrajResponse& GetLatestUserTrajResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetLatestUserTrajResponse* GetLatestUserTrajResponse::default_instance_ = NULL;

GetLatestUserTrajResponse* GetLatestUserTrajResponse::New() const {
  return new GetLatestUserTrajResponse;
}

void GetLatestUserTrajResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    is_sticked_ = false;
    longitude_ = 0;
    latitude_ = 0;
    start_time_ = GOOGLE_LONGLONG(0);
    update_time_ = GOOGLE_LONGLONG(0);
    staytime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLatestUserTrajResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .lbs.da.openservice.UserTrajStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::UserTrajStatus_IsValid(value)) {
            set_status(static_cast< lbs::da::openservice::UserTrajStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_sticked;
        break;
      }
      
      // optional bool is_sticked = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_sticked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_sticked_)));
          set_has_is_sticked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }
      
      // optional double longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }
      
      // optional double latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }
      
      // optional int64 start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }
      
      // optional int64 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_staytime;
        break;
      }
      
      // optional int32 staytime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_staytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &staytime_)));
          set_has_staytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetLatestUserTrajResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .lbs.da.openservice.UserTrajStatus status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }
  
  // optional bool is_sticked = 2;
  if (has_is_sticked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_sticked(), output);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }
  
  // optional int64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->start_time(), output);
  }
  
  // optional int64 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->update_time(), output);
  }
  
  // optional int32 staytime = 7;
  if (has_staytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->staytime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetLatestUserTrajResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .lbs.da.openservice.UserTrajStatus status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }
  
  // optional bool is_sticked = 2;
  if (has_is_sticked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_sticked(), target);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }
  
  // optional int64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->start_time(), target);
  }
  
  // optional int64 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->update_time(), target);
  }
  
  // optional int32 staytime = 7;
  if (has_staytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->staytime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetLatestUserTrajResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .lbs.da.openservice.UserTrajStatus status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional bool is_sticked = 2;
    if (has_is_sticked()) {
      total_size += 1 + 1;
    }
    
    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // optional int64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }
    
    // optional int64 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->update_time());
    }
    
    // optional int32 staytime = 7;
    if (has_staytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->staytime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLatestUserTrajResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLatestUserTrajResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetLatestUserTrajResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLatestUserTrajResponse::MergeFrom(const GetLatestUserTrajResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_is_sticked()) {
      set_is_sticked(from.is_sticked());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_staytime()) {
      set_staytime(from.staytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLatestUserTrajResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLatestUserTrajResponse::CopyFrom(const GetLatestUserTrajResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLatestUserTrajResponse::IsInitialized() const {
  
  return true;
}

void GetLatestUserTrajResponse::Swap(GetLatestUserTrajResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(is_sticked_, other->is_sticked_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(start_time_, other->start_time_);
    std::swap(update_time_, other->update_time_);
    std::swap(staytime_, other->staytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetLatestUserTrajResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetLatestUserTrajResponse_descriptor_;
  metadata.reflection = GetLatestUserTrajResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatElement::kStatKeyFieldNumber;
const int StatElement::kValueFieldNumber;
#endif  // !_MSC_VER

StatElement::StatElement()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatElement::InitAsDefaultInstance() {
}

StatElement::StatElement(const StatElement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatElement::SharedCtor() {
  _cached_size_ = 0;
  stat_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatElement::~StatElement() {
  SharedDtor();
}

void StatElement::SharedDtor() {
  if (stat_key_ != &::google::protobuf::internal::kEmptyString) {
    delete stat_key_;
  }
  if (this != default_instance_) {
  }
}

void StatElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatElement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatElement_descriptor_;
}

const StatElement& StatElement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

StatElement* StatElement::default_instance_ = NULL;

StatElement* StatElement::New() const {
  return new StatElement;
}

void StatElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stat_key()) {
      if (stat_key_ != &::google::protobuf::internal::kEmptyString) {
        stat_key_->clear();
      }
    }
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string stat_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stat_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stat_key().data(), this->stat_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // required int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string stat_key = 1;
  if (has_stat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_key().data(), this->stat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->stat_key(), output);
  }
  
  // required int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatElement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string stat_key = 1;
  if (has_stat_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stat_key().data(), this->stat_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->stat_key(), target);
  }
  
  // required int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatElement::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string stat_key = 1;
    if (has_stat_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stat_key());
    }
    
    // required int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatElement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatElement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatElement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatElement::MergeFrom(const StatElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stat_key()) {
      set_stat_key(from.stat_key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatElement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatElement::CopyFrom(const StatElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StatElement::Swap(StatElement* other) {
  if (other != this) {
    std::swap(stat_key_, other->stat_key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatElement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatElement_descriptor_;
  metadata.reflection = StatElement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatReportRequest::kHeaderFieldNumber;
const int StatReportRequest::kItemsFieldNumber;
#endif  // !_MSC_VER

StatReportRequest::StatReportRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatReportRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

StatReportRequest::StatReportRequest(const StatReportRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatReportRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatReportRequest::~StatReportRequest() {
  SharedDtor();
}

void StatReportRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void StatReportRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatReportRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatReportRequest_descriptor_;
}

const StatReportRequest& StatReportRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

StatReportRequest* StatReportRequest::default_instance_ = NULL;

StatReportRequest* StatReportRequest::New() const {
  return new StatReportRequest;
}

void StatReportRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatReportRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .lbs.da.openservice.StatElement items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatReportRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .lbs.da.openservice.StatElement items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatReportRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .lbs.da.openservice.StatElement items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatReportRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
  }
  // repeated .lbs.da.openservice.StatElement items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatReportRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatReportRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatReportRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatReportRequest::MergeFrom(const StatReportRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatReportRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatReportRequest::CopyFrom(const StatReportRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReportRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void StatReportRequest::Swap(StatReportRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatReportRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatReportRequest_descriptor_;
  metadata.reflection = StatReportRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatReportResponse::kItemsFieldNumber;
#endif  // !_MSC_VER

StatReportResponse::StatReportResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatReportResponse::InitAsDefaultInstance() {
}

StatReportResponse::StatReportResponse(const StatReportResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatReportResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatReportResponse::~StatReportResponse() {
  SharedDtor();
}

void StatReportResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatReportResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatReportResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatReportResponse_descriptor_;
}

const StatReportResponse& StatReportResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

StatReportResponse* StatReportResponse::default_instance_ = NULL;

StatReportResponse* StatReportResponse::New() const {
  return new StatReportResponse;
}

void StatReportResponse::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatReportResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.StatElement items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatReportResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.StatElement items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatReportResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.StatElement items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatReportResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.StatElement items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatReportResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatReportResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatReportResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatReportResponse::MergeFrom(const StatReportResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatReportResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatReportResponse::CopyFrom(const StatReportResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReportResponse::IsInitialized() const {
  
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void StatReportResponse::Swap(StatReportResponse* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatReportResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatReportResponse_descriptor_;
  metadata.reflection = StatReportResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayRoute::kLvIdFieldNumber;
const int DayRoute::kSceneDuraTimeFieldNumber;
const int DayRoute::kCaterFieldNumber;
const int DayRoute::kHotelFieldNumber;
#endif  // !_MSC_VER

DayRoute::DayRoute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayRoute::InitAsDefaultInstance() {
}

DayRoute::DayRoute(const DayRoute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayRoute::SharedCtor() {
  _cached_size_ = 0;
  scene_dura_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayRoute::~DayRoute() {
  SharedDtor();
}

void DayRoute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayRoute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayRoute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayRoute_descriptor_;
}

const DayRoute& DayRoute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

DayRoute* DayRoute::default_instance_ = NULL;

DayRoute* DayRoute::New() const {
  return new DayRoute;
}

void DayRoute::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    scene_dura_time_ = 0;
  }
  lv_id_.Clear();
  cater_.Clear();
  hotel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayRoute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lv_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lv_id;
        if (input->ExpectTag(17)) goto parse_scene_dura_time;
        break;
      }
      
      // optional double scene_dura_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scene_dura_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scene_dura_time_)));
          set_has_scene_dura_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cater;
        break;
      }
      
      // repeated string cater = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cater(0).data(), this->cater(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cater;
        if (input->ExpectTag(34)) goto parse_hotel;
        break;
      }
      
      // repeated string hotel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hotel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotel(0).data(), this->hotel(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hotel;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayRoute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string lv_id = 1;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lv_id(i), output);
  }
  
  // optional double scene_dura_time = 2;
  if (has_scene_dura_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->scene_dura_time(), output);
  }
  
  // repeated string cater = 3;
  for (int i = 0; i < this->cater_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cater(i).data(), this->cater(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cater(i), output);
  }
  
  // repeated string hotel = 4;
  for (int i = 0; i < this->hotel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hotel(i).data(), this->hotel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hotel(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayRoute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string lv_id = 1;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lv_id(i), target);
  }
  
  // optional double scene_dura_time = 2;
  if (has_scene_dura_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->scene_dura_time(), target);
  }
  
  // repeated string cater = 3;
  for (int i = 0; i < this->cater_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cater(i).data(), this->cater(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cater(i), target);
  }
  
  // repeated string hotel = 4;
  for (int i = 0; i < this->hotel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotel(i).data(), this->hotel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->hotel(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayRoute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double scene_dura_time = 2;
    if (has_scene_dura_time()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated string lv_id = 1;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated string cater = 3;
  total_size += 1 * this->cater_size();
  for (int i = 0; i < this->cater_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cater(i));
  }
  
  // repeated string hotel = 4;
  total_size += 1 * this->hotel_size();
  for (int i = 0; i < this->hotel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hotel(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayRoute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayRoute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayRoute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayRoute::MergeFrom(const DayRoute& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  cater_.MergeFrom(from.cater_);
  hotel_.MergeFrom(from.hotel_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scene_dura_time()) {
      set_scene_dura_time(from.scene_dura_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayRoute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayRoute::CopyFrom(const DayRoute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayRoute::IsInitialized() const {
  
  return true;
}

void DayRoute::Swap(DayRoute* other) {
  if (other != this) {
    lv_id_.Swap(&other->lv_id_);
    std::swap(scene_dura_time_, other->scene_dura_time_);
    cater_.Swap(&other->cater_);
    hotel_.Swap(&other->hotel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayRoute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayRoute_descriptor_;
  metadata.reflection = DayRoute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynamicTripPlanRequest::kHeaderFieldNumber;
const int DynamicTripPlanRequest::kLvIdFieldNumber;
const int DynamicTripPlanRequest::kUseridFieldNumber;
const int DynamicTripPlanRequest::kCaterFieldNumber;
const int DynamicTripPlanRequest::kHotelFieldNumber;
const int DynamicTripPlanRequest::kArgsFieldNumber;
#endif  // !_MSC_VER

DynamicTripPlanRequest::DynamicTripPlanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynamicTripPlanRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

DynamicTripPlanRequest::DynamicTripPlanRequest(const DynamicTripPlanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynamicTripPlanRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicTripPlanRequest::~DynamicTripPlanRequest() {
  SharedDtor();
}

void DynamicTripPlanRequest::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void DynamicTripPlanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicTripPlanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicTripPlanRequest_descriptor_;
}

const DynamicTripPlanRequest& DynamicTripPlanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

DynamicTripPlanRequest* DynamicTripPlanRequest::default_instance_ = NULL;

DynamicTripPlanRequest* DynamicTripPlanRequest::New() const {
  return new DynamicTripPlanRequest;
}

void DynamicTripPlanRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  lv_id_.Clear();
  cater_.Clear();
  hotel_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynamicTripPlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_id;
        break;
      }
      
      // repeated string lv_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_id;
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }
      
      // optional string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cater;
        break;
      }
      
      // repeated string cater = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cater(0).data(), this->cater(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cater;
        if (input->ExpectTag(42)) goto parse_hotel;
        break;
      }
      
      // repeated string hotel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hotel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotel(0).data(), this->hotel(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hotel;
        if (input->ExpectTag(50)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynamicTripPlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated string lv_id = 2;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lv_id(i), output);
  }
  
  // optional string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // repeated string cater = 4;
  for (int i = 0; i < this->cater_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cater(i).data(), this->cater(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cater(i), output);
  }
  
  // repeated string hotel = 5;
  for (int i = 0; i < this->hotel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hotel(i).data(), this->hotel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->hotel(i), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynamicTripPlanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated string lv_id = 2;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->lv_id(i), target);
  }
  
  // optional string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // repeated string cater = 4;
  for (int i = 0; i < this->cater_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cater(i).data(), this->cater(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->cater(i), target);
  }
  
  // repeated string hotel = 5;
  for (int i = 0; i < this->hotel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotel(i).data(), this->hotel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->hotel(i), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynamicTripPlanRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
  }
  // repeated string lv_id = 2;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated string cater = 4;
  total_size += 1 * this->cater_size();
  for (int i = 0; i < this->cater_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cater(i));
  }
  
  // repeated string hotel = 5;
  total_size += 1 * this->hotel_size();
  for (int i = 0; i < this->hotel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hotel(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 6;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicTripPlanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynamicTripPlanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynamicTripPlanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynamicTripPlanRequest::MergeFrom(const DynamicTripPlanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  cater_.MergeFrom(from.cater_);
  hotel_.MergeFrom(from.hotel_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicTripPlanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicTripPlanRequest::CopyFrom(const DynamicTripPlanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicTripPlanRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void DynamicTripPlanRequest::Swap(DynamicTripPlanRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    lv_id_.Swap(&other->lv_id_);
    std::swap(userid_, other->userid_);
    cater_.Swap(&other->cater_);
    hotel_.Swap(&other->hotel_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynamicTripPlanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicTripPlanRequest_descriptor_;
  metadata.reflection = DynamicTripPlanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DynamicTripPlanResponse::kStatusFieldNumber;
const int DynamicTripPlanResponse::kTotalDistanceFieldNumber;
const int DynamicTripPlanResponse::kLvIdFieldNumber;
const int DynamicTripPlanResponse::kDayrouteFieldNumber;
const int DynamicTripPlanResponse::kOriginLvIdFieldNumber;
const int DynamicTripPlanResponse::kUseridFieldNumber;
const int DynamicTripPlanResponse::kUniqIdFieldNumber;
const int DynamicTripPlanResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

DynamicTripPlanResponse::DynamicTripPlanResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DynamicTripPlanResponse::InitAsDefaultInstance() {
}

DynamicTripPlanResponse::DynamicTripPlanResponse(const DynamicTripPlanResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DynamicTripPlanResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  total_distance_ = GOOGLE_LONGLONG(0);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniq_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicTripPlanResponse::~DynamicTripPlanResponse() {
  SharedDtor();
}

void DynamicTripPlanResponse::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (uniq_id_ != &::google::protobuf::internal::kEmptyString) {
    delete uniq_id_;
  }
  if (this != default_instance_) {
  }
}

void DynamicTripPlanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicTripPlanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicTripPlanResponse_descriptor_;
}

const DynamicTripPlanResponse& DynamicTripPlanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

DynamicTripPlanResponse* DynamicTripPlanResponse::default_instance_ = NULL;

DynamicTripPlanResponse* DynamicTripPlanResponse::New() const {
  return new DynamicTripPlanResponse;
}

void DynamicTripPlanResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    total_distance_ = GOOGLE_LONGLONG(0);
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_uniq_id()) {
      if (uniq_id_ != &::google::protobuf::internal::kEmptyString) {
        uniq_id_->clear();
      }
    }
  }
  lv_id_.Clear();
  dayroute_.Clear();
  origin_lv_id_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DynamicTripPlanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_distance;
        break;
      }
      
      // required int64 total_distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_distance_)));
          set_has_total_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lv_id;
        break;
      }
      
      // repeated string lv_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lv_id;
        if (input->ExpectTag(34)) goto parse_dayroute;
        break;
      }
      
      // repeated .lbs.da.openservice.DayRoute dayroute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayroute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayroute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dayroute;
        if (input->ExpectTag(42)) goto parse_origin_lv_id;
        break;
      }
      
      // repeated string origin_lv_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_origin_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origin_lv_id(0).data(), this->origin_lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_origin_lv_id;
        if (input->ExpectTag(50)) goto parse_userid;
        break;
      }
      
      // optional string userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_uniq_id;
        break;
      }
      
      // optional string uniq_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniq_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniq_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniq_id().data(), this->uniq_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DynamicTripPlanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // required int64 total_distance = 2;
  if (has_total_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_distance(), output);
  }
  
  // repeated string lv_id = 3;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lv_id(i), output);
  }
  
  // repeated .lbs.da.openservice.DayRoute dayroute = 4;
  for (int i = 0; i < this->dayroute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dayroute(i), output);
  }
  
  // repeated string origin_lv_id = 5;
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->origin_lv_id(i).data(), this->origin_lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->origin_lv_id(i), output);
  }
  
  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->userid(), output);
  }
  
  // optional string uniq_id = 7;
  if (has_uniq_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_id().data(), this->uniq_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->uniq_id(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DynamicTripPlanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // required int64 total_distance = 2;
  if (has_total_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_distance(), target);
  }
  
  // repeated string lv_id = 3;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->lv_id(i), target);
  }
  
  // repeated .lbs.da.openservice.DayRoute dayroute = 4;
  for (int i = 0; i < this->dayroute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dayroute(i), target);
  }
  
  // repeated string origin_lv_id = 5;
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin_lv_id(i).data(), this->origin_lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->origin_lv_id(i), target);
  }
  
  // optional string userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userid(), target);
  }
  
  // optional string uniq_id = 7;
  if (has_uniq_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_id().data(), this->uniq_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->uniq_id(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DynamicTripPlanResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int64 total_distance = 2;
    if (has_total_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_distance());
    }
    
    // optional string userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string uniq_id = 7;
    if (has_uniq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniq_id());
    }
    
  }
  // repeated string lv_id = 3;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated .lbs.da.openservice.DayRoute dayroute = 4;
  total_size += 1 * this->dayroute_size();
  for (int i = 0; i < this->dayroute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayroute(i));
  }
  
  // repeated string origin_lv_id = 5;
  total_size += 1 * this->origin_lv_id_size();
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->origin_lv_id(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicTripPlanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DynamicTripPlanResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DynamicTripPlanResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DynamicTripPlanResponse::MergeFrom(const DynamicTripPlanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  dayroute_.MergeFrom(from.dayroute_);
  origin_lv_id_.MergeFrom(from.origin_lv_id_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_total_distance()) {
      set_total_distance(from.total_distance());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_uniq_id()) {
      set_uniq_id(from.uniq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DynamicTripPlanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicTripPlanResponse::CopyFrom(const DynamicTripPlanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicTripPlanResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void DynamicTripPlanResponse::Swap(DynamicTripPlanResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(total_distance_, other->total_distance_);
    lv_id_.Swap(&other->lv_id_);
    dayroute_.Swap(&other->dayroute_);
    origin_lv_id_.Swap(&other->origin_lv_id_);
    std::swap(userid_, other->userid_);
    std::swap(uniq_id_, other->uniq_id_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DynamicTripPlanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicTripPlanResponse_descriptor_;
  metadata.reflection = DynamicTripPlanResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayRouteInfo::kLvIdFieldNumber;
const int DayRouteInfo::kSceneDuraTimeFieldNumber;
const int DayRouteInfo::kCaterFieldNumber;
const int DayRouteInfo::kHotelFieldNumber;
const int DayRouteInfo::kLvidCaterHotelFieldNumber;
const int DayRouteInfo::kOptJsonStrFieldNumber;
const int DayRouteInfo::kArgsFieldNumber;
#endif  // !_MSC_VER

DayRouteInfo::DayRouteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayRouteInfo::InitAsDefaultInstance() {
}

DayRouteInfo::DayRouteInfo(const DayRouteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayRouteInfo::SharedCtor() {
  _cached_size_ = 0;
  scene_dura_time_ = 0;
  opt_json_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayRouteInfo::~DayRouteInfo() {
  SharedDtor();
}

void DayRouteInfo::SharedDtor() {
  if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_json_str_;
  }
  if (this != default_instance_) {
  }
}

void DayRouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayRouteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayRouteInfo_descriptor_;
}

const DayRouteInfo& DayRouteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

DayRouteInfo* DayRouteInfo::default_instance_ = NULL;

DayRouteInfo* DayRouteInfo::New() const {
  return new DayRouteInfo;
}

void DayRouteInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    scene_dura_time_ = 0;
    if (has_opt_json_str()) {
      if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
        opt_json_str_->clear();
      }
    }
  }
  lv_id_.Clear();
  cater_.Clear();
  hotel_.Clear();
  lvid_cater_hotel_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayRouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string lv_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lv_id;
        if (input->ExpectTag(17)) goto parse_scene_dura_time;
        break;
      }
      
      // optional double scene_dura_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scene_dura_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scene_dura_time_)));
          set_has_scene_dura_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cater;
        break;
      }
      
      // repeated string cater = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cater(0).data(), this->cater(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cater;
        if (input->ExpectTag(34)) goto parse_hotel;
        break;
      }
      
      // repeated string hotel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hotel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotel(0).data(), this->hotel(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hotel;
        if (input->ExpectTag(42)) goto parse_lvid_cater_hotel;
        break;
      }
      
      // repeated string lvid_cater_hotel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lvid_cater_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lvid_cater_hotel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lvid_cater_hotel(0).data(), this->lvid_cater_hotel(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lvid_cater_hotel;
        if (input->ExpectTag(50)) goto parse_opt_json_str;
        break;
      }
      
      // optional string opt_json_str = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt_json_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_json_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt_json_str().data(), this->opt_json_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayRouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string lv_id = 1;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->lv_id(i), output);
  }
  
  // optional double scene_dura_time = 2;
  if (has_scene_dura_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->scene_dura_time(), output);
  }
  
  // repeated string cater = 3;
  for (int i = 0; i < this->cater_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cater(i).data(), this->cater(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->cater(i), output);
  }
  
  // repeated string hotel = 4;
  for (int i = 0; i < this->hotel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hotel(i).data(), this->hotel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->hotel(i), output);
  }
  
  // repeated string lvid_cater_hotel = 5;
  for (int i = 0; i < this->lvid_cater_hotel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lvid_cater_hotel(i).data(), this->lvid_cater_hotel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->lvid_cater_hotel(i), output);
  }
  
  // optional string opt_json_str = 6;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opt_json_str(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayRouteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string lv_id = 1;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->lv_id(i), target);
  }
  
  // optional double scene_dura_time = 2;
  if (has_scene_dura_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->scene_dura_time(), target);
  }
  
  // repeated string cater = 3;
  for (int i = 0; i < this->cater_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cater(i).data(), this->cater(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->cater(i), target);
  }
  
  // repeated string hotel = 4;
  for (int i = 0; i < this->hotel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotel(i).data(), this->hotel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->hotel(i), target);
  }
  
  // repeated string lvid_cater_hotel = 5;
  for (int i = 0; i < this->lvid_cater_hotel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lvid_cater_hotel(i).data(), this->lvid_cater_hotel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->lvid_cater_hotel(i), target);
  }
  
  // optional string opt_json_str = 6;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->opt_json_str(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayRouteInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double scene_dura_time = 2;
    if (has_scene_dura_time()) {
      total_size += 1 + 8;
    }
    
    // optional string opt_json_str = 6;
    if (has_opt_json_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_json_str());
    }
    
  }
  // repeated string lv_id = 1;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated string cater = 3;
  total_size += 1 * this->cater_size();
  for (int i = 0; i < this->cater_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cater(i));
  }
  
  // repeated string hotel = 4;
  total_size += 1 * this->hotel_size();
  for (int i = 0; i < this->hotel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hotel(i));
  }
  
  // repeated string lvid_cater_hotel = 5;
  total_size += 1 * this->lvid_cater_hotel_size();
  for (int i = 0; i < this->lvid_cater_hotel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lvid_cater_hotel(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 7;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayRouteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayRouteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayRouteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayRouteInfo::MergeFrom(const DayRouteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  cater_.MergeFrom(from.cater_);
  hotel_.MergeFrom(from.hotel_);
  lvid_cater_hotel_.MergeFrom(from.lvid_cater_hotel_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_scene_dura_time()) {
      set_scene_dura_time(from.scene_dura_time());
    }
    if (from.has_opt_json_str()) {
      set_opt_json_str(from.opt_json_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayRouteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayRouteInfo::CopyFrom(const DayRouteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayRouteInfo::IsInitialized() const {
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void DayRouteInfo::Swap(DayRouteInfo* other) {
  if (other != this) {
    lv_id_.Swap(&other->lv_id_);
    std::swap(scene_dura_time_, other->scene_dura_time_);
    cater_.Swap(&other->cater_);
    hotel_.Swap(&other->hotel_);
    lvid_cater_hotel_.Swap(&other->lvid_cater_hotel_);
    std::swap(opt_json_str_, other->opt_json_str_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayRouteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayRouteInfo_descriptor_;
  metadata.reflection = DayRouteInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LvTripPlanRequest::kHeaderFieldNumber;
const int LvTripPlanRequest::kLvIdFieldNumber;
const int LvTripPlanRequest::kUseridFieldNumber;
const int LvTripPlanRequest::kAlgorithmIdFieldNumber;
const int LvTripPlanRequest::kCaterFieldNumber;
const int LvTripPlanRequest::kHotelFieldNumber;
const int LvTripPlanRequest::kOptJsonStrFieldNumber;
const int LvTripPlanRequest::kArgsFieldNumber;
#endif  // !_MSC_VER

LvTripPlanRequest::LvTripPlanRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LvTripPlanRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

LvTripPlanRequest::LvTripPlanRequest(const LvTripPlanRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LvTripPlanRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algorithmid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_json_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LvTripPlanRequest::~LvTripPlanRequest() {
  SharedDtor();
}

void LvTripPlanRequest::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithmid_;
  }
  if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_json_str_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void LvTripPlanRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LvTripPlanRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LvTripPlanRequest_descriptor_;
}

const LvTripPlanRequest& LvTripPlanRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

LvTripPlanRequest* LvTripPlanRequest::default_instance_ = NULL;

LvTripPlanRequest* LvTripPlanRequest::New() const {
  return new LvTripPlanRequest;
}

void LvTripPlanRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_algorithmid()) {
      if (algorithmid_ != &::google::protobuf::internal::kEmptyString) {
        algorithmid_->clear();
      }
    }
    if (has_opt_json_str()) {
      if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
        opt_json_str_->clear();
      }
    }
  }
  lv_id_.Clear();
  cater_.Clear();
  hotel_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LvTripPlanRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_id;
        break;
      }
      
      // repeated string lv_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_id;
        if (input->ExpectTag(26)) goto parse_userid;
        break;
      }
      
      // optional string userid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_algorithmId;
        break;
      }
      
      // optional string algorithmId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithmId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithmid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algorithmid().data(), this->algorithmid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cater;
        break;
      }
      
      // repeated string cater = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cater:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_cater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cater(0).data(), this->cater(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cater;
        if (input->ExpectTag(50)) goto parse_hotel;
        break;
      }
      
      // repeated string hotel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hotel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hotel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hotel(0).data(), this->hotel(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_hotel;
        if (input->ExpectTag(58)) goto parse_opt_json_str;
        break;
      }
      
      // optional string opt_json_str = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt_json_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_json_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt_json_str().data(), this->opt_json_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LvTripPlanRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated string lv_id = 2;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lv_id(i), output);
  }
  
  // optional string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->userid(), output);
  }
  
  // optional string algorithmId = 4;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->algorithmid(), output);
  }
  
  // repeated string cater = 5;
  for (int i = 0; i < this->cater_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->cater(i).data(), this->cater(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cater(i), output);
  }
  
  // repeated string hotel = 6;
  for (int i = 0; i < this->hotel_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hotel(i).data(), this->hotel(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->hotel(i), output);
  }
  
  // optional string opt_json_str = 7;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->opt_json_str(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LvTripPlanRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated string lv_id = 2;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->lv_id(i), target);
  }
  
  // optional string userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->userid(), target);
  }
  
  // optional string algorithmId = 4;
  if (has_algorithmid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithmid().data(), this->algorithmid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algorithmid(), target);
  }
  
  // repeated string cater = 5;
  for (int i = 0; i < this->cater_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cater(i).data(), this->cater(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->cater(i), target);
  }
  
  // repeated string hotel = 6;
  for (int i = 0; i < this->hotel_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hotel(i).data(), this->hotel(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->hotel(i), target);
  }
  
  // optional string opt_json_str = 7;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->opt_json_str(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LvTripPlanRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string algorithmId = 4;
    if (has_algorithmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithmid());
    }
    
    // optional string opt_json_str = 7;
    if (has_opt_json_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_json_str());
    }
    
  }
  // repeated string lv_id = 2;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated string cater = 5;
  total_size += 1 * this->cater_size();
  for (int i = 0; i < this->cater_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->cater(i));
  }
  
  // repeated string hotel = 6;
  total_size += 1 * this->hotel_size();
  for (int i = 0; i < this->hotel_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hotel(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 8;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LvTripPlanRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LvTripPlanRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LvTripPlanRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LvTripPlanRequest::MergeFrom(const LvTripPlanRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  cater_.MergeFrom(from.cater_);
  hotel_.MergeFrom(from.hotel_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_algorithmid()) {
      set_algorithmid(from.algorithmid());
    }
    if (from.has_opt_json_str()) {
      set_opt_json_str(from.opt_json_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LvTripPlanRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LvTripPlanRequest::CopyFrom(const LvTripPlanRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvTripPlanRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void LvTripPlanRequest::Swap(LvTripPlanRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    lv_id_.Swap(&other->lv_id_);
    std::swap(userid_, other->userid_);
    std::swap(algorithmid_, other->algorithmid_);
    cater_.Swap(&other->cater_);
    hotel_.Swap(&other->hotel_);
    std::swap(opt_json_str_, other->opt_json_str_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LvTripPlanRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LvTripPlanRequest_descriptor_;
  metadata.reflection = LvTripPlanRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LvTripPlanResponse::kStatusFieldNumber;
const int LvTripPlanResponse::kOriginalTotalDistanceFieldNumber;
const int LvTripPlanResponse::kOriginalTotalTimeFieldNumber;
const int LvTripPlanResponse::kPlannedTotalDistanceFieldNumber;
const int LvTripPlanResponse::kPlannedTotalTimeFieldNumber;
const int LvTripPlanResponse::kLvIdFieldNumber;
const int LvTripPlanResponse::kDayrouteFieldNumber;
const int LvTripPlanResponse::kOriginLvIdFieldNumber;
const int LvTripPlanResponse::kUseridFieldNumber;
const int LvTripPlanResponse::kUniqIdFieldNumber;
const int LvTripPlanResponse::kOptJsonStrFieldNumber;
const int LvTripPlanResponse::kArgsFieldNumber;
#endif  // !_MSC_VER

LvTripPlanResponse::LvTripPlanResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LvTripPlanResponse::InitAsDefaultInstance() {
}

LvTripPlanResponse::LvTripPlanResponse(const LvTripPlanResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LvTripPlanResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  original_total_distance_ = GOOGLE_LONGLONG(0);
  original_total_time_ = GOOGLE_LONGLONG(0);
  planned_total_distance_ = GOOGLE_LONGLONG(0);
  planned_total_time_ = GOOGLE_LONGLONG(0);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uniq_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opt_json_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LvTripPlanResponse::~LvTripPlanResponse() {
  SharedDtor();
}

void LvTripPlanResponse::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (uniq_id_ != &::google::protobuf::internal::kEmptyString) {
    delete uniq_id_;
  }
  if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
    delete opt_json_str_;
  }
  if (this != default_instance_) {
  }
}

void LvTripPlanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LvTripPlanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LvTripPlanResponse_descriptor_;
}

const LvTripPlanResponse& LvTripPlanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

LvTripPlanResponse* LvTripPlanResponse::default_instance_ = NULL;

LvTripPlanResponse* LvTripPlanResponse::New() const {
  return new LvTripPlanResponse;
}

void LvTripPlanResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    original_total_distance_ = GOOGLE_LONGLONG(0);
    original_total_time_ = GOOGLE_LONGLONG(0);
    planned_total_distance_ = GOOGLE_LONGLONG(0);
    planned_total_time_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_uniq_id()) {
      if (uniq_id_ != &::google::protobuf::internal::kEmptyString) {
        uniq_id_->clear();
      }
    }
    if (has_opt_json_str()) {
      if (opt_json_str_ != &::google::protobuf::internal::kEmptyString) {
        opt_json_str_->clear();
      }
    }
  }
  lv_id_.Clear();
  dayroute_.Clear();
  origin_lv_id_.Clear();
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LvTripPlanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_original_total_distance;
        break;
      }
      
      // required int64 original_total_distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_total_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_total_distance_)));
          set_has_original_total_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_original_total_time;
        break;
      }
      
      // required int64 original_total_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_original_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &original_total_time_)));
          set_has_original_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_planned_total_distance;
        break;
      }
      
      // required int64 planned_total_distance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planned_total_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &planned_total_distance_)));
          set_has_planned_total_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_planned_total_time;
        break;
      }
      
      // required int64 planned_total_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planned_total_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &planned_total_time_)));
          set_has_planned_total_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lv_id;
        break;
      }
      
      // repeated string lv_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lv_id(0).data(), this->lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lv_id;
        if (input->ExpectTag(74)) goto parse_dayroute;
        break;
      }
      
      // repeated .lbs.da.openservice.DayRouteInfo dayroute = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dayroute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dayroute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dayroute;
        if (input->ExpectTag(82)) goto parse_origin_lv_id;
        break;
      }
      
      // repeated string origin_lv_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_lv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_origin_lv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->origin_lv_id(0).data(), this->origin_lv_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_origin_lv_id;
        if (input->ExpectTag(90)) goto parse_userid;
        break;
      }
      
      // optional string userid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_uniq_id;
        break;
      }
      
      // optional string uniq_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uniq_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uniq_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uniq_id().data(), this->uniq_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_opt_json_str;
        break;
      }
      
      // optional string opt_json_str = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opt_json_str:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opt_json_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opt_json_str().data(), this->opt_json_str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_args;
        break;
      }
      
      // repeated .lbs.da.openservice.Arg args = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_args()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_args;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LvTripPlanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }
  
  // required int64 original_total_distance = 2;
  if (has_original_total_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->original_total_distance(), output);
  }
  
  // required int64 original_total_time = 3;
  if (has_original_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->original_total_time(), output);
  }
  
  // required int64 planned_total_distance = 4;
  if (has_planned_total_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->planned_total_distance(), output);
  }
  
  // required int64 planned_total_time = 5;
  if (has_planned_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->planned_total_time(), output);
  }
  
  // repeated string lv_id = 8;
  for (int i = 0; i < this->lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->lv_id(i).data(), this->lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lv_id(i), output);
  }
  
  // repeated .lbs.da.openservice.DayRouteInfo dayroute = 9;
  for (int i = 0; i < this->dayroute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->dayroute(i), output);
  }
  
  // repeated string origin_lv_id = 10;
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->origin_lv_id(i).data(), this->origin_lv_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->origin_lv_id(i), output);
  }
  
  // optional string userid = 11;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->userid(), output);
  }
  
  // optional string uniq_id = 12;
  if (has_uniq_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_id().data(), this->uniq_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->uniq_id(), output);
  }
  
  // optional string opt_json_str = 13;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->opt_json_str(), output);
  }
  
  // repeated .lbs.da.openservice.Arg args = 14;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->args(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LvTripPlanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }
  
  // required int64 original_total_distance = 2;
  if (has_original_total_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->original_total_distance(), target);
  }
  
  // required int64 original_total_time = 3;
  if (has_original_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->original_total_time(), target);
  }
  
  // required int64 planned_total_distance = 4;
  if (has_planned_total_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->planned_total_distance(), target);
  }
  
  // required int64 planned_total_time = 5;
  if (has_planned_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->planned_total_time(), target);
  }
  
  // repeated string lv_id = 8;
  for (int i = 0; i < this->lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lv_id(i).data(), this->lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->lv_id(i), target);
  }
  
  // repeated .lbs.da.openservice.DayRouteInfo dayroute = 9;
  for (int i = 0; i < this->dayroute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->dayroute(i), target);
  }
  
  // repeated string origin_lv_id = 10;
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->origin_lv_id(i).data(), this->origin_lv_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->origin_lv_id(i), target);
  }
  
  // optional string userid = 11;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->userid(), target);
  }
  
  // optional string uniq_id = 12;
  if (has_uniq_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uniq_id().data(), this->uniq_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->uniq_id(), target);
  }
  
  // optional string opt_json_str = 13;
  if (has_opt_json_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opt_json_str().data(), this->opt_json_str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->opt_json_str(), target);
  }
  
  // repeated .lbs.da.openservice.Arg args = 14;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->args(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LvTripPlanResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // required int64 original_total_distance = 2;
    if (has_original_total_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->original_total_distance());
    }
    
    // required int64 original_total_time = 3;
    if (has_original_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->original_total_time());
    }
    
    // required int64 planned_total_distance = 4;
    if (has_planned_total_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->planned_total_distance());
    }
    
    // required int64 planned_total_time = 5;
    if (has_planned_total_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->planned_total_time());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string userid = 11;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }
    
    // optional string uniq_id = 12;
    if (has_uniq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uniq_id());
    }
    
    // optional string opt_json_str = 13;
    if (has_opt_json_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opt_json_str());
    }
    
  }
  // repeated string lv_id = 8;
  total_size += 1 * this->lv_id_size();
  for (int i = 0; i < this->lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->lv_id(i));
  }
  
  // repeated .lbs.da.openservice.DayRouteInfo dayroute = 9;
  total_size += 1 * this->dayroute_size();
  for (int i = 0; i < this->dayroute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dayroute(i));
  }
  
  // repeated string origin_lv_id = 10;
  total_size += 1 * this->origin_lv_id_size();
  for (int i = 0; i < this->origin_lv_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->origin_lv_id(i));
  }
  
  // repeated .lbs.da.openservice.Arg args = 14;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->args(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LvTripPlanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LvTripPlanResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LvTripPlanResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LvTripPlanResponse::MergeFrom(const LvTripPlanResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  lv_id_.MergeFrom(from.lv_id_);
  dayroute_.MergeFrom(from.dayroute_);
  origin_lv_id_.MergeFrom(from.origin_lv_id_);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_original_total_distance()) {
      set_original_total_distance(from.original_total_distance());
    }
    if (from.has_original_total_time()) {
      set_original_total_time(from.original_total_time());
    }
    if (from.has_planned_total_distance()) {
      set_planned_total_distance(from.planned_total_distance());
    }
    if (from.has_planned_total_time()) {
      set_planned_total_time(from.planned_total_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_uniq_id()) {
      set_uniq_id(from.uniq_id());
    }
    if (from.has_opt_json_str()) {
      set_opt_json_str(from.opt_json_str());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LvTripPlanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LvTripPlanResponse::CopyFrom(const LvTripPlanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LvTripPlanResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  for (int i = 0; i < dayroute_size(); i++) {
    if (!this->dayroute(i).IsInitialized()) return false;
  }
  for (int i = 0; i < args_size(); i++) {
    if (!this->args(i).IsInitialized()) return false;
  }
  return true;
}

void LvTripPlanResponse::Swap(LvTripPlanResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(original_total_distance_, other->original_total_distance_);
    std::swap(original_total_time_, other->original_total_time_);
    std::swap(planned_total_distance_, other->planned_total_distance_);
    std::swap(planned_total_time_, other->planned_total_time_);
    lv_id_.Swap(&other->lv_id_);
    dayroute_.Swap(&other->dayroute_);
    origin_lv_id_.Swap(&other->origin_lv_id_);
    std::swap(userid_, other->userid_);
    std::swap(uniq_id_, other->uniq_id_);
    std::swap(opt_json_str_, other->opt_json_str_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LvTripPlanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LvTripPlanResponse_descriptor_;
  metadata.reflection = LvTripPlanResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WifiFinger::kMacAddrFieldNumber;
const int WifiFinger::kStrengthFieldNumber;
#endif  // !_MSC_VER

WifiFinger::WifiFinger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WifiFinger::InitAsDefaultInstance() {
}

WifiFinger::WifiFinger(const WifiFinger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WifiFinger::SharedCtor() {
  _cached_size_ = 0;
  mac_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strength_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WifiFinger::~WifiFinger() {
  SharedDtor();
}

void WifiFinger::SharedDtor() {
  if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete mac_addr_;
  }
  if (this != default_instance_) {
  }
}

void WifiFinger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WifiFinger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WifiFinger_descriptor_;
}

const WifiFinger& WifiFinger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

WifiFinger* WifiFinger::default_instance_ = NULL;

WifiFinger* WifiFinger::New() const {
  return new WifiFinger;
}

void WifiFinger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mac_addr()) {
      if (mac_addr_ != &::google::protobuf::internal::kEmptyString) {
        mac_addr_->clear();
      }
    }
    strength_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WifiFinger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mac_addr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mac_addr().data(), this->mac_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strength;
        break;
      }
      
      // required int32 strength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WifiFinger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string mac_addr = 1;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mac_addr(), output);
  }
  
  // required int32 strength = 2;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strength(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WifiFinger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string mac_addr = 1;
  if (has_mac_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mac_addr().data(), this->mac_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mac_addr(), target);
  }
  
  // required int32 strength = 2;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strength(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WifiFinger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mac_addr = 1;
    if (has_mac_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mac_addr());
    }
    
    // required int32 strength = 2;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WifiFinger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WifiFinger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WifiFinger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WifiFinger::MergeFrom(const WifiFinger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac_addr()) {
      set_mac_addr(from.mac_addr());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WifiFinger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WifiFinger::CopyFrom(const WifiFinger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WifiFinger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WifiFinger::Swap(WifiFinger* other) {
  if (other != this) {
    std::swap(mac_addr_, other->mac_addr_);
    std::swap(strength_, other->strength_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WifiFinger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WifiFinger_descriptor_;
  metadata.reflection = WifiFinger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceSemanticRequest::kHeaderFieldNumber;
const int PlaceSemanticRequest::kWifiFieldNumber;
const int PlaceSemanticRequest::kLongitudeFieldNumber;
const int PlaceSemanticRequest::kLatitudeFieldNumber;
const int PlaceSemanticRequest::kCuidFieldNumber;
const int PlaceSemanticRequest::kDistanceFieldNumber;
const int PlaceSemanticRequest::kSimilarityThreadholdFieldNumber;
const int PlaceSemanticRequest::kAlgorithmIdFieldNumber;
#endif  // !_MSC_VER

PlaceSemanticRequest::PlaceSemanticRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceSemanticRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

PlaceSemanticRequest::PlaceSemanticRequest(const PlaceSemanticRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceSemanticRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  longitude_ = 0;
  latitude_ = 0;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  distance_ = 0;
  similarity_threadhold_ = 0;
  algorithm_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceSemanticRequest::~PlaceSemanticRequest() {
  SharedDtor();
}

void PlaceSemanticRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (algorithm_id_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithm_id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void PlaceSemanticRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceSemanticRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceSemanticRequest_descriptor_;
}

const PlaceSemanticRequest& PlaceSemanticRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

PlaceSemanticRequest* PlaceSemanticRequest::default_instance_ = NULL;

PlaceSemanticRequest* PlaceSemanticRequest::New() const {
  return new PlaceSemanticRequest;
}

void PlaceSemanticRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    longitude_ = 0;
    latitude_ = 0;
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    distance_ = 0;
    similarity_threadhold_ = 0;
    if (has_algorithm_id()) {
      if (algorithm_id_ != &::google::protobuf::internal::kEmptyString) {
        algorithm_id_->clear();
      }
    }
  }
  wifi_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceSemanticRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wifi;
        break;
      }
      
      // repeated .lbs.da.openservice.WifiFinger wifi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wifi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wifi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wifi;
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }
      
      // optional double longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }
      
      // optional double latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_distance;
        break;
      }
      
      // optional int32 distance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_similarity_threadhold;
        break;
      }
      
      // optional double similarity_threadhold = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_similarity_threadhold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &similarity_threadhold_)));
          set_has_similarity_threadhold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_algorithm_id;
        break;
      }
      
      // optional string algorithm_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithm_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algorithm_id().data(), this->algorithm_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceSemanticRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // repeated .lbs.da.openservice.WifiFinger wifi = 2;
  for (int i = 0; i < this->wifi_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wifi(i), output);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }
  
  // optional string cuid = 5;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->cuid(), output);
  }
  
  // optional int32 distance = 6;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->distance(), output);
  }
  
  // optional double similarity_threadhold = 7;
  if (has_similarity_threadhold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->similarity_threadhold(), output);
  }
  
  // optional string algorithm_id = 8;
  if (has_algorithm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithm_id().data(), this->algorithm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->algorithm_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceSemanticRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // repeated .lbs.da.openservice.WifiFinger wifi = 2;
  for (int i = 0; i < this->wifi_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wifi(i), target);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }
  
  // optional string cuid = 5;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->cuid(), target);
  }
  
  // optional int32 distance = 6;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->distance(), target);
  }
  
  // optional double similarity_threadhold = 7;
  if (has_similarity_threadhold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->similarity_threadhold(), target);
  }
  
  // optional string algorithm_id = 8;
  if (has_algorithm_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithm_id().data(), this->algorithm_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->algorithm_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceSemanticRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // optional string cuid = 5;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional int32 distance = 6;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }
    
    // optional double similarity_threadhold = 7;
    if (has_similarity_threadhold()) {
      total_size += 1 + 8;
    }
    
    // optional string algorithm_id = 8;
    if (has_algorithm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithm_id());
    }
    
  }
  // repeated .lbs.da.openservice.WifiFinger wifi = 2;
  total_size += 1 * this->wifi_size();
  for (int i = 0; i < this->wifi_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wifi(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceSemanticRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceSemanticRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceSemanticRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceSemanticRequest::MergeFrom(const PlaceSemanticRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  wifi_.MergeFrom(from.wifi_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_similarity_threadhold()) {
      set_similarity_threadhold(from.similarity_threadhold());
    }
    if (from.has_algorithm_id()) {
      set_algorithm_id(from.algorithm_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceSemanticRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceSemanticRequest::CopyFrom(const PlaceSemanticRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceSemanticRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < wifi_size(); i++) {
    if (!this->wifi(i).IsInitialized()) return false;
  }
  return true;
}

void PlaceSemanticRequest::Swap(PlaceSemanticRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    wifi_.Swap(&other->wifi_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(cuid_, other->cuid_);
    std::swap(distance_, other->distance_);
    std::swap(similarity_threadhold_, other->similarity_threadhold_);
    std::swap(algorithm_id_, other->algorithm_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceSemanticRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceSemanticRequest_descriptor_;
  metadata.reflection = PlaceSemanticRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoiProbability::kPoiFieldNumber;
const int PoiProbability::kProbabilityFieldNumber;
#endif  // !_MSC_VER

PoiProbability::PoiProbability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoiProbability::InitAsDefaultInstance() {
}

PoiProbability::PoiProbability(const PoiProbability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoiProbability::SharedCtor() {
  _cached_size_ = 0;
  poi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  probability_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiProbability::~PoiProbability() {
  SharedDtor();
}

void PoiProbability::SharedDtor() {
  if (poi_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_;
  }
  if (this != default_instance_) {
  }
}

void PoiProbability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiProbability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiProbability_descriptor_;
}

const PoiProbability& PoiProbability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

PoiProbability* PoiProbability::default_instance_ = NULL;

PoiProbability* PoiProbability::New() const {
  return new PoiProbability;
}

void PoiProbability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poi()) {
      if (poi_ != &::google::protobuf::internal::kEmptyString) {
        poi_->clear();
      }
    }
    probability_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoiProbability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string poi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi().data(), this->poi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_probability;
        break;
      }
      
      // required double probability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoiProbability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string poi = 1;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poi(), output);
  }
  
  // required double probability = 2;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->probability(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoiProbability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string poi = 1;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poi(), target);
  }
  
  // required double probability = 2;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->probability(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoiProbability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string poi = 1;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi());
    }
    
    // required double probability = 2;
    if (has_probability()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiProbability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoiProbability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoiProbability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoiProbability::MergeFrom(const PoiProbability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poi()) {
      set_poi(from.poi());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoiProbability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiProbability::CopyFrom(const PoiProbability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiProbability::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PoiProbability::Swap(PoiProbability* other) {
  if (other != this) {
    std::swap(poi_, other->poi_);
    std::swap(probability_, other->probability_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoiProbability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiProbability_descriptor_;
  metadata.reflection = PoiProbability_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlaceSemanticResponse::kAoiIdFieldNumber;
const int PlaceSemanticResponse::kPoiProbListFieldNumber;
#endif  // !_MSC_VER

PlaceSemanticResponse::PlaceSemanticResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlaceSemanticResponse::InitAsDefaultInstance() {
}

PlaceSemanticResponse::PlaceSemanticResponse(const PlaceSemanticResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlaceSemanticResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlaceSemanticResponse::~PlaceSemanticResponse() {
  SharedDtor();
}

void PlaceSemanticResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlaceSemanticResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlaceSemanticResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlaceSemanticResponse_descriptor_;
}

const PlaceSemanticResponse& PlaceSemanticResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

PlaceSemanticResponse* PlaceSemanticResponse::default_instance_ = NULL;

PlaceSemanticResponse* PlaceSemanticResponse::New() const {
  return new PlaceSemanticResponse;
}

void PlaceSemanticResponse::Clear() {
  aoi_id_.Clear();
  poi_prob_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlaceSemanticResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string aoi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoi_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_aoi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_id(0).data(), this->aoi_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aoi_id;
        if (input->ExpectTag(18)) goto parse_poi_prob_list;
        break;
      }
      
      // repeated .lbs.da.openservice.PoiProbability poi_prob_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi_prob_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poi_prob_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poi_prob_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlaceSemanticResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string aoi_id = 1;
  for (int i = 0; i < this->aoi_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->aoi_id(i).data(), this->aoi_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->aoi_id(i), output);
  }
  
  // repeated .lbs.da.openservice.PoiProbability poi_prob_list = 2;
  for (int i = 0; i < this->poi_prob_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poi_prob_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlaceSemanticResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string aoi_id = 1;
  for (int i = 0; i < this->aoi_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id(i).data(), this->aoi_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->aoi_id(i), target);
  }
  
  // repeated .lbs.da.openservice.PoiProbability poi_prob_list = 2;
  for (int i = 0; i < this->poi_prob_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->poi_prob_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlaceSemanticResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string aoi_id = 1;
  total_size += 1 * this->aoi_id_size();
  for (int i = 0; i < this->aoi_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->aoi_id(i));
  }
  
  // repeated .lbs.da.openservice.PoiProbability poi_prob_list = 2;
  total_size += 1 * this->poi_prob_list_size();
  for (int i = 0; i < this->poi_prob_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poi_prob_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlaceSemanticResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlaceSemanticResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlaceSemanticResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlaceSemanticResponse::MergeFrom(const PlaceSemanticResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  aoi_id_.MergeFrom(from.aoi_id_);
  poi_prob_list_.MergeFrom(from.poi_prob_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlaceSemanticResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceSemanticResponse::CopyFrom(const PlaceSemanticResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceSemanticResponse::IsInitialized() const {
  
  for (int i = 0; i < poi_prob_list_size(); i++) {
    if (!this->poi_prob_list(i).IsInitialized()) return false;
  }
  return true;
}

void PlaceSemanticResponse::Swap(PlaceSemanticResponse* other) {
  if (other != this) {
    aoi_id_.Swap(&other->aoi_id_);
    poi_prob_list_.Swap(&other->poi_prob_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlaceSemanticResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlaceSemanticResponse_descriptor_;
  metadata.reflection = PlaceSemanticResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NuomiUserPreferenceRequest::kHeaderFieldNumber;
const int NuomiUserPreferenceRequest::kIdTypeFieldNumber;
const int NuomiUserPreferenceRequest::kIdFieldNumber;
const int NuomiUserPreferenceRequest::kDataTypeFieldNumber;
const int NuomiUserPreferenceRequest::kFeatureNamesFieldNumber;
#endif  // !_MSC_VER

NuomiUserPreferenceRequest::NuomiUserPreferenceRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NuomiUserPreferenceRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

NuomiUserPreferenceRequest::NuomiUserPreferenceRequest(const NuomiUserPreferenceRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NuomiUserPreferenceRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  id_type_ = 1;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NuomiUserPreferenceRequest::~NuomiUserPreferenceRequest() {
  SharedDtor();
}

void NuomiUserPreferenceRequest::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void NuomiUserPreferenceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NuomiUserPreferenceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NuomiUserPreferenceRequest_descriptor_;
}

const NuomiUserPreferenceRequest& NuomiUserPreferenceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

NuomiUserPreferenceRequest* NuomiUserPreferenceRequest::default_instance_ = NULL;

NuomiUserPreferenceRequest* NuomiUserPreferenceRequest::New() const {
  return new NuomiUserPreferenceRequest;
}

void NuomiUserPreferenceRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    id_type_ = 1;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    data_type_ = 1;
  }
  feature_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NuomiUserPreferenceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_type;
        break;
      }
      
      // required .lbs.da.openservice.RequestIdType id_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::RequestIdType_IsValid(value)) {
            set_id_type(static_cast< lbs::da::openservice::RequestIdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }
      
      // required string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_data_type;
        break;
      }
      
      // optional .lbs.da.openservice.NuomiDataType data_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::NuomiDataType_IsValid(value)) {
            set_data_type(static_cast< lbs::da::openservice::NuomiDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_feature_names;
        break;
      }
      
      // repeated string feature_names = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_feature_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_feature_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feature_names(0).data(), this->feature_names(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_feature_names;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NuomiUserPreferenceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // required .lbs.da.openservice.RequestIdType id_type = 2;
  if (has_id_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->id_type(), output);
  }
  
  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 4;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->data_type(), output);
  }
  
  // repeated string feature_names = 5;
  for (int i = 0; i < this->feature_names_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->feature_names(i).data(), this->feature_names(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->feature_names(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NuomiUserPreferenceRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // required .lbs.da.openservice.RequestIdType id_type = 2;
  if (has_id_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->id_type(), target);
  }
  
  // required string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 4;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->data_type(), target);
  }
  
  // repeated string feature_names = 5;
  for (int i = 0; i < this->feature_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature_names(i).data(), this->feature_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->feature_names(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NuomiUserPreferenceRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // required .lbs.da.openservice.RequestIdType id_type = 2;
    if (has_id_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->id_type());
    }
    
    // required string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional .lbs.da.openservice.NuomiDataType data_type = 4;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }
    
  }
  // repeated string feature_names = 5;
  total_size += 1 * this->feature_names_size();
  for (int i = 0; i < this->feature_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->feature_names(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NuomiUserPreferenceRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NuomiUserPreferenceRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NuomiUserPreferenceRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NuomiUserPreferenceRequest::MergeFrom(const NuomiUserPreferenceRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  feature_names_.MergeFrom(from.feature_names_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_id_type()) {
      set_id_type(from.id_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NuomiUserPreferenceRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NuomiUserPreferenceRequest::CopyFrom(const NuomiUserPreferenceRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NuomiUserPreferenceRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void NuomiUserPreferenceRequest::Swap(NuomiUserPreferenceRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(id_type_, other->id_type_);
    std::swap(id_, other->id_);
    std::swap(data_type_, other->data_type_);
    feature_names_.Swap(&other->feature_names_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NuomiUserPreferenceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NuomiUserPreferenceRequest_descriptor_;
  metadata.reflection = NuomiUserPreferenceRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreInfo::kFeatureidFieldNumber;
const int ScoreInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreInfo::ScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreInfo::InitAsDefaultInstance() {
}

ScoreInfo::ScoreInfo(const ScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreInfo::~ScoreInfo() {
  SharedDtor();
}

void ScoreInfo::SharedDtor() {
  if (featureid_ != &::google::protobuf::internal::kEmptyString) {
    delete featureid_;
  }
  if (this != default_instance_) {
  }
}

void ScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreInfo_descriptor_;
}

const ScoreInfo& ScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

ScoreInfo* ScoreInfo::default_instance_ = NULL;

ScoreInfo* ScoreInfo::New() const {
  return new ScoreInfo;
}

void ScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_featureid()) {
      if (featureid_ != &::google::protobuf::internal::kEmptyString) {
        featureid_->clear();
      }
    }
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string featureid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureid().data(), this->featureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_score;
        break;
      }
      
      // required double score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string featureid = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->featureid(), output);
  }
  
  // required double score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string featureid = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->featureid(), target);
  }
  
  // required double score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string featureid = 1;
    if (has_featureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureid());
    }
    
    // required double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreInfo::MergeFrom(const ScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_featureid()) {
      set_featureid(from.featureid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreInfo::CopyFrom(const ScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ScoreInfo::Swap(ScoreInfo* other) {
  if (other != this) {
    std::swap(featureid_, other->featureid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreInfo_descriptor_;
  metadata.reflection = ScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FeatureInfo::kFeatureNameFieldNumber;
const int FeatureInfo::kScoreInfoFieldNumber;
const int FeatureInfo::kDataTypeFieldNumber;
#endif  // !_MSC_VER

FeatureInfo::FeatureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FeatureInfo::InitAsDefaultInstance() {
  score_info_ = const_cast< ::lbs::da::openservice::ScoreInfo*>(&::lbs::da::openservice::ScoreInfo::default_instance());
}

FeatureInfo::FeatureInfo(const FeatureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FeatureInfo::SharedCtor() {
  _cached_size_ = 0;
  feature_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_info_ = NULL;
  data_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureInfo::~FeatureInfo() {
  SharedDtor();
}

void FeatureInfo::SharedDtor() {
  if (feature_name_ != &::google::protobuf::internal::kEmptyString) {
    delete feature_name_;
  }
  if (this != default_instance_) {
    delete score_info_;
  }
}

void FeatureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureInfo_descriptor_;
}

const FeatureInfo& FeatureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

FeatureInfo* FeatureInfo::default_instance_ = NULL;

FeatureInfo* FeatureInfo::New() const {
  return new FeatureInfo;
}

void FeatureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_feature_name()) {
      if (feature_name_ != &::google::protobuf::internal::kEmptyString) {
        feature_name_->clear();
      }
    }
    if (has_score_info()) {
      if (score_info_ != NULL) score_info_->::lbs::da::openservice::ScoreInfo::Clear();
    }
    data_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FeatureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string feature_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feature_name().data(), this->feature_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_score_info;
        break;
      }
      
      // required .lbs.da.openservice.ScoreInfo score_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }
      
      // optional .lbs.da.openservice.NuomiDataType data_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::NuomiDataType_IsValid(value)) {
            set_data_type(static_cast< lbs::da::openservice::NuomiDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FeatureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string feature_name = 1;
  if (has_feature_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature_name().data(), this->feature_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feature_name(), output);
  }
  
  // required .lbs.da.openservice.ScoreInfo score_info = 2;
  if (has_score_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->score_info(), output);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 3;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FeatureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string feature_name = 1;
  if (has_feature_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature_name().data(), this->feature_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feature_name(), target);
  }
  
  // required .lbs.da.openservice.ScoreInfo score_info = 2;
  if (has_score_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->score_info(), target);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 3;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FeatureInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string feature_name = 1;
    if (has_feature_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_name());
    }
    
    // required .lbs.da.openservice.ScoreInfo score_info = 2;
    if (has_score_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_info());
    }
    
    // optional .lbs.da.openservice.NuomiDataType data_type = 3;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FeatureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FeatureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FeatureInfo::MergeFrom(const FeatureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_name()) {
      set_feature_name(from.feature_name());
    }
    if (from.has_score_info()) {
      mutable_score_info()->::lbs::da::openservice::ScoreInfo::MergeFrom(from.score_info());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FeatureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureInfo::CopyFrom(const FeatureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_score_info()) {
    if (!this->score_info().IsInitialized()) return false;
  }
  return true;
}

void FeatureInfo::Swap(FeatureInfo* other) {
  if (other != this) {
    std::swap(feature_name_, other->feature_name_);
    std::swap(score_info_, other->score_info_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FeatureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureInfo_descriptor_;
  metadata.reflection = FeatureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrInfo::kFeatureidFieldNumber;
const int StrInfo::kValueFieldNumber;
#endif  // !_MSC_VER

StrInfo::StrInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrInfo::InitAsDefaultInstance() {
}

StrInfo::StrInfo(const StrInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrInfo::SharedCtor() {
  _cached_size_ = 0;
  featureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrInfo::~StrInfo() {
  SharedDtor();
}

void StrInfo::SharedDtor() {
  if (featureid_ != &::google::protobuf::internal::kEmptyString) {
    delete featureid_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StrInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrInfo_descriptor_;
}

const StrInfo& StrInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

StrInfo* StrInfo::default_instance_ = NULL;

StrInfo* StrInfo::New() const {
  return new StrInfo;
}

void StrInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_featureid()) {
      if (featureid_ != &::google::protobuf::internal::kEmptyString) {
        featureid_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string featureid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_featureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->featureid().data(), this->featureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string featureid = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->featureid(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string featureid = 1;
  if (has_featureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->featureid().data(), this->featureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->featureid(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string featureid = 1;
    if (has_featureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->featureid());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrInfo::MergeFrom(const StrInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_featureid()) {
      set_featureid(from.featureid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrInfo::CopyFrom(const StrInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void StrInfo::Swap(StrInfo* other) {
  if (other != this) {
    std::swap(featureid_, other->featureid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrInfo_descriptor_;
  metadata.reflection = StrInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StrFeatureInfo::kFeatureNameFieldNumber;
const int StrFeatureInfo::kStrInfoFieldNumber;
const int StrFeatureInfo::kDataTypeFieldNumber;
#endif  // !_MSC_VER

StrFeatureInfo::StrFeatureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StrFeatureInfo::InitAsDefaultInstance() {
  str_info_ = const_cast< ::lbs::da::openservice::StrInfo*>(&::lbs::da::openservice::StrInfo::default_instance());
}

StrFeatureInfo::StrFeatureInfo(const StrFeatureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StrFeatureInfo::SharedCtor() {
  _cached_size_ = 0;
  feature_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  str_info_ = NULL;
  data_type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StrFeatureInfo::~StrFeatureInfo() {
  SharedDtor();
}

void StrFeatureInfo::SharedDtor() {
  if (feature_name_ != &::google::protobuf::internal::kEmptyString) {
    delete feature_name_;
  }
  if (this != default_instance_) {
    delete str_info_;
  }
}

void StrFeatureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StrFeatureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StrFeatureInfo_descriptor_;
}

const StrFeatureInfo& StrFeatureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

StrFeatureInfo* StrFeatureInfo::default_instance_ = NULL;

StrFeatureInfo* StrFeatureInfo::New() const {
  return new StrFeatureInfo;
}

void StrFeatureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_feature_name()) {
      if (feature_name_ != &::google::protobuf::internal::kEmptyString) {
        feature_name_->clear();
      }
    }
    if (has_str_info()) {
      if (str_info_ != NULL) str_info_->::lbs::da::openservice::StrInfo::Clear();
    }
    data_type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StrFeatureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string feature_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feature_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->feature_name().data(), this->feature_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_info;
        break;
      }
      
      // required .lbs.da.openservice.StrInfo str_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_str_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_type;
        break;
      }
      
      // optional .lbs.da.openservice.NuomiDataType data_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::NuomiDataType_IsValid(value)) {
            set_data_type(static_cast< lbs::da::openservice::NuomiDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StrFeatureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string feature_name = 1;
  if (has_feature_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature_name().data(), this->feature_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->feature_name(), output);
  }
  
  // required .lbs.da.openservice.StrInfo str_info = 2;
  if (has_str_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->str_info(), output);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 3;
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->data_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StrFeatureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string feature_name = 1;
  if (has_feature_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->feature_name().data(), this->feature_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->feature_name(), target);
  }
  
  // required .lbs.da.openservice.StrInfo str_info = 2;
  if (has_str_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->str_info(), target);
  }
  
  // optional .lbs.da.openservice.NuomiDataType data_type = 3;
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StrFeatureInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string feature_name = 1;
    if (has_feature_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->feature_name());
    }
    
    // required .lbs.da.openservice.StrInfo str_info = 2;
    if (has_str_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->str_info());
    }
    
    // optional .lbs.da.openservice.NuomiDataType data_type = 3;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StrFeatureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StrFeatureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StrFeatureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StrFeatureInfo::MergeFrom(const StrFeatureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feature_name()) {
      set_feature_name(from.feature_name());
    }
    if (from.has_str_info()) {
      mutable_str_info()->::lbs::da::openservice::StrInfo::MergeFrom(from.str_info());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StrFeatureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StrFeatureInfo::CopyFrom(const StrFeatureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrFeatureInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_str_info()) {
    if (!this->str_info().IsInitialized()) return false;
  }
  return true;
}

void StrFeatureInfo::Swap(StrFeatureInfo* other) {
  if (other != this) {
    std::swap(feature_name_, other->feature_name_);
    std::swap(str_info_, other->str_info_);
    std::swap(data_type_, other->data_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StrFeatureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StrFeatureInfo_descriptor_;
  metadata.reflection = StrFeatureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUpInfo::kIdFieldNumber;
const int ItemUpInfo::kScoreFieldNumber;
const int ItemUpInfo::kInfoFieldNumber;
const int ItemUpInfo::kDateFieldNumber;
#endif  // !_MSC_VER

ItemUpInfo::ItemUpInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemUpInfo::InitAsDefaultInstance() {
}

ItemUpInfo::ItemUpInfo(const ItemUpInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemUpInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUpInfo::~ItemUpInfo() {
  SharedDtor();
}

void ItemUpInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (this != default_instance_) {
  }
}

void ItemUpInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUpInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUpInfo_descriptor_;
}

const ItemUpInfo& ItemUpInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

ItemUpInfo* ItemUpInfo::default_instance_ = NULL;

ItemUpInfo* ItemUpInfo::New() const {
  return new ItemUpInfo;
}

void ItemUpInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    score_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUpInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_score;
        break;
      }
      
      // optional double score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // optional string info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_date;
        break;
      }
      
      // optional string date = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemUpInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // optional double score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }
  
  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->info(), output);
  }
  
  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->date(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemUpInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // optional double score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }
  
  // optional string info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->info(), target);
  }
  
  // optional string date = 4;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->date(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemUpInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // optional double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }
    
    // optional string info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }
    
    // optional string date = 4;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUpInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUpInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUpInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUpInfo::MergeFrom(const ItemUpInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUpInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUpInfo::CopyFrom(const ItemUpInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUpInfo::IsInitialized() const {
  
  return true;
}

void ItemUpInfo::Swap(ItemUpInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(score_, other->score_);
    std::swap(info_, other->info_);
    std::swap(date_, other->date_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUpInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUpInfo_descriptor_;
  metadata.reflection = ItemUpInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NuomiUserPreferenceResponse::kFeaturesFieldNumber;
const int NuomiUserPreferenceResponse::kResultTypeFieldNumber;
const int NuomiUserPreferenceResponse::kIdFieldNumber;
const int NuomiUserPreferenceResponse::kOtherInfosFieldNumber;
const int NuomiUserPreferenceResponse::kItemInfosFieldNumber;
#endif  // !_MSC_VER

NuomiUserPreferenceResponse::NuomiUserPreferenceResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NuomiUserPreferenceResponse::InitAsDefaultInstance() {
}

NuomiUserPreferenceResponse::NuomiUserPreferenceResponse(const NuomiUserPreferenceResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NuomiUserPreferenceResponse::SharedCtor() {
  _cached_size_ = 0;
  result_type_ = 1;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NuomiUserPreferenceResponse::~NuomiUserPreferenceResponse() {
  SharedDtor();
}

void NuomiUserPreferenceResponse::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void NuomiUserPreferenceResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NuomiUserPreferenceResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NuomiUserPreferenceResponse_descriptor_;
}

const NuomiUserPreferenceResponse& NuomiUserPreferenceResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

NuomiUserPreferenceResponse* NuomiUserPreferenceResponse::default_instance_ = NULL;

NuomiUserPreferenceResponse* NuomiUserPreferenceResponse::New() const {
  return new NuomiUserPreferenceResponse;
}

void NuomiUserPreferenceResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_type_ = 1;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  features_.Clear();
  other_infos_.Clear();
  item_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NuomiUserPreferenceResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.FeatureInfo features = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_features:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_features()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_features;
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }
      
      // optional .lbs.da.openservice.NuomiUpResultType result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (lbs::da::openservice::NuomiUpResultType_IsValid(value)) {
            set_result_type(static_cast< lbs::da::openservice::NuomiUpResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_id;
        break;
      }
      
      // optional string id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other_infos;
        break;
      }
      
      // repeated .lbs.da.openservice.StrFeatureInfo other_infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_other_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_other_infos;
        if (input->ExpectTag(42)) goto parse_item_infos;
        break;
      }
      
      // repeated .lbs.da.openservice.ItemUpInfo item_infos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NuomiUserPreferenceResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.FeatureInfo features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->features(i), output);
  }
  
  // optional .lbs.da.openservice.NuomiUpResultType result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result_type(), output);
  }
  
  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->id(), output);
  }
  
  // repeated .lbs.da.openservice.StrFeatureInfo other_infos = 4;
  for (int i = 0; i < this->other_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->other_infos(i), output);
  }
  
  // repeated .lbs.da.openservice.ItemUpInfo item_infos = 5;
  for (int i = 0; i < this->item_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item_infos(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NuomiUserPreferenceResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.FeatureInfo features = 1;
  for (int i = 0; i < this->features_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->features(i), target);
  }
  
  // optional .lbs.da.openservice.NuomiUpResultType result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result_type(), target);
  }
  
  // optional string id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->id(), target);
  }
  
  // repeated .lbs.da.openservice.StrFeatureInfo other_infos = 4;
  for (int i = 0; i < this->other_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->other_infos(i), target);
  }
  
  // repeated .lbs.da.openservice.ItemUpInfo item_infos = 5;
  for (int i = 0; i < this->item_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item_infos(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NuomiUserPreferenceResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .lbs.da.openservice.NuomiUpResultType result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result_type());
    }
    
    // optional string id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
  }
  // repeated .lbs.da.openservice.FeatureInfo features = 1;
  total_size += 1 * this->features_size();
  for (int i = 0; i < this->features_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->features(i));
  }
  
  // repeated .lbs.da.openservice.StrFeatureInfo other_infos = 4;
  total_size += 1 * this->other_infos_size();
  for (int i = 0; i < this->other_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->other_infos(i));
  }
  
  // repeated .lbs.da.openservice.ItemUpInfo item_infos = 5;
  total_size += 1 * this->item_infos_size();
  for (int i = 0; i < this->item_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_infos(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NuomiUserPreferenceResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NuomiUserPreferenceResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NuomiUserPreferenceResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NuomiUserPreferenceResponse::MergeFrom(const NuomiUserPreferenceResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  features_.MergeFrom(from.features_);
  other_infos_.MergeFrom(from.other_infos_);
  item_infos_.MergeFrom(from.item_infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NuomiUserPreferenceResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NuomiUserPreferenceResponse::CopyFrom(const NuomiUserPreferenceResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NuomiUserPreferenceResponse::IsInitialized() const {
  
  for (int i = 0; i < features_size(); i++) {
    if (!this->features(i).IsInitialized()) return false;
  }
  for (int i = 0; i < other_infos_size(); i++) {
    if (!this->other_infos(i).IsInitialized()) return false;
  }
  return true;
}

void NuomiUserPreferenceResponse::Swap(NuomiUserPreferenceResponse* other) {
  if (other != this) {
    features_.Swap(&other->features_);
    std::swap(result_type_, other->result_type_);
    std::swap(id_, other->id_);
    other_infos_.Swap(&other->other_infos_);
    item_infos_.Swap(&other->item_infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NuomiUserPreferenceResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NuomiUserPreferenceResponse_descriptor_;
  metadata.reflection = NuomiUserPreferenceResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAOIRequest::kHeaderFieldNumber;
const int GetAOIRequest::kCuidFieldNumber;
const int GetAOIRequest::kMercatorXFieldNumber;
const int GetAOIRequest::kMercatorYFieldNumber;
#endif  // !_MSC_VER

GetAOIRequest::GetAOIRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAOIRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetAOIRequest::GetAOIRequest(const GetAOIRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAOIRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  cuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mercator_x_ = 0;
  mercator_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAOIRequest::~GetAOIRequest() {
  SharedDtor();
}

void GetAOIRequest::SharedDtor() {
  if (cuid_ != &::google::protobuf::internal::kEmptyString) {
    delete cuid_;
  }
  if (this != default_instance_) {
    delete header_;
  }
}

void GetAOIRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAOIRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAOIRequest_descriptor_;
}

const GetAOIRequest& GetAOIRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetAOIRequest* GetAOIRequest::default_instance_ = NULL;

GetAOIRequest* GetAOIRequest::New() const {
  return new GetAOIRequest;
}

void GetAOIRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    if (has_cuid()) {
      if (cuid_ != &::google::protobuf::internal::kEmptyString) {
        cuid_->clear();
      }
    }
    mercator_x_ = 0;
    mercator_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAOIRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cuid;
        break;
      }
      
      // optional string cuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cuid().data(), this->cuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_mercator_x;
        break;
      }
      
      // optional double mercator_x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_x_)));
          set_has_mercator_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_mercator_y;
        break;
      }
      
      // optional double mercator_y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mercator_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mercator_y_)));
          set_has_mercator_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAOIRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cuid(), output);
  }
  
  // optional double mercator_x = 3;
  if (has_mercator_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->mercator_x(), output);
  }
  
  // optional double mercator_y = 4;
  if (has_mercator_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mercator_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAOIRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional string cuid = 2;
  if (has_cuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cuid().data(), this->cuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cuid(), target);
  }
  
  // optional double mercator_x = 3;
  if (has_mercator_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->mercator_x(), target);
  }
  
  // optional double mercator_y = 4;
  if (has_mercator_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mercator_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAOIRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional string cuid = 2;
    if (has_cuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cuid());
    }
    
    // optional double mercator_x = 3;
    if (has_mercator_x()) {
      total_size += 1 + 8;
    }
    
    // optional double mercator_y = 4;
    if (has_mercator_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAOIRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAOIRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAOIRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAOIRequest::MergeFrom(const GetAOIRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_cuid()) {
      set_cuid(from.cuid());
    }
    if (from.has_mercator_x()) {
      set_mercator_x(from.mercator_x());
    }
    if (from.has_mercator_y()) {
      set_mercator_y(from.mercator_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAOIRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAOIRequest::CopyFrom(const GetAOIRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAOIRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAOIRequest::Swap(GetAOIRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(cuid_, other->cuid_);
    std::swap(mercator_x_, other->mercator_x_);
    std::swap(mercator_y_, other->mercator_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAOIRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAOIRequest_descriptor_;
  metadata.reflection = GetAOIRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAOIResponse::kAoiIdFieldNumber;
#endif  // !_MSC_VER

GetAOIResponse::GetAOIResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAOIResponse::InitAsDefaultInstance() {
}

GetAOIResponse::GetAOIResponse(const GetAOIResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAOIResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAOIResponse::~GetAOIResponse() {
  SharedDtor();
}

void GetAOIResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAOIResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAOIResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAOIResponse_descriptor_;
}

const GetAOIResponse& GetAOIResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetAOIResponse* GetAOIResponse::default_instance_ = NULL;

GetAOIResponse* GetAOIResponse::New() const {
  return new GetAOIResponse;
}

void GetAOIResponse::Clear() {
  aoi_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAOIResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string aoi_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aoi_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_aoi_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->aoi_id(0).data(), this->aoi_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_aoi_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAOIResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string aoi_id = 1;
  for (int i = 0; i < this->aoi_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->aoi_id(i).data(), this->aoi_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->aoi_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAOIResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string aoi_id = 1;
  for (int i = 0; i < this->aoi_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->aoi_id(i).data(), this->aoi_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->aoi_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAOIResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated string aoi_id = 1;
  total_size += 1 * this->aoi_id_size();
  for (int i = 0; i < this->aoi_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->aoi_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAOIResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAOIResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAOIResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAOIResponse::MergeFrom(const GetAOIResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  aoi_id_.MergeFrom(from.aoi_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAOIResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAOIResponse::CopyFrom(const GetAOIResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAOIResponse::IsInitialized() const {
  
  return true;
}

void GetAOIResponse::Swap(GetAOIResponse* other) {
  if (other != this) {
    aoi_id_.Swap(&other->aoi_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAOIResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAOIResponse_descriptor_;
  metadata.reflection = GetAOIResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNearPoiRequest::kHeaderFieldNumber;
const int GetNearPoiRequest::kLongitudeFieldNumber;
const int GetNearPoiRequest::kLatitudeFieldNumber;
const int GetNearPoiRequest::kRadiusFieldNumber;
#endif  // !_MSC_VER

GetNearPoiRequest::GetNearPoiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNearPoiRequest::InitAsDefaultInstance() {
  header_ = const_cast< ::lbs::da::openservice::RequestHeader*>(&::lbs::da::openservice::RequestHeader::default_instance());
}

GetNearPoiRequest::GetNearPoiRequest(const GetNearPoiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNearPoiRequest::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  longitude_ = 0;
  latitude_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNearPoiRequest::~GetNearPoiRequest() {
  SharedDtor();
}

void GetNearPoiRequest::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
  }
}

void GetNearPoiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNearPoiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNearPoiRequest_descriptor_;
}

const GetNearPoiRequest& GetNearPoiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetNearPoiRequest* GetNearPoiRequest::default_instance_ = NULL;

GetNearPoiRequest* GetNearPoiRequest::New() const {
  return new GetNearPoiRequest;
}

void GetNearPoiRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::lbs::da::openservice::RequestHeader::Clear();
    }
    longitude_ = 0;
    latitude_ = 0;
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNearPoiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .lbs.da.openservice.RequestHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }
      
      // optional double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }
      
      // optional double latitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_radius;
        break;
      }
      
      // optional double radius = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNearPoiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }
  
  // optional double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }
  
  // optional double radius = 4;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNearPoiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .lbs.da.openservice.RequestHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }
  
  // optional double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }
  
  // optional double radius = 4;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNearPoiRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .lbs.da.openservice.RequestHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // optional double radius = 4;
    if (has_radius()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNearPoiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNearPoiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNearPoiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNearPoiRequest::MergeFrom(const GetNearPoiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::lbs::da::openservice::RequestHeader::MergeFrom(from.header());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNearPoiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearPoiRequest::CopyFrom(const GetNearPoiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearPoiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetNearPoiRequest::Swap(GetNearPoiRequest* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNearPoiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNearPoiRequest_descriptor_;
  metadata.reflection = GetNearPoiRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PoiInfo::kPoiFieldNumber;
const int PoiInfo::kNameFieldNumber;
const int PoiInfo::kLongitudeFieldNumber;
const int PoiInfo::kLatitudeFieldNumber;
#endif  // !_MSC_VER

PoiInfo::PoiInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PoiInfo::InitAsDefaultInstance() {
}

PoiInfo::PoiInfo(const PoiInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PoiInfo::SharedCtor() {
  _cached_size_ = 0;
  poi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  longitude_ = 0;
  latitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PoiInfo::~PoiInfo() {
  SharedDtor();
}

void PoiInfo::SharedDtor() {
  if (poi_ != &::google::protobuf::internal::kEmptyString) {
    delete poi_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PoiInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PoiInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PoiInfo_descriptor_;
}

const PoiInfo& PoiInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

PoiInfo* PoiInfo::default_instance_ = NULL;

PoiInfo* PoiInfo::New() const {
  return new PoiInfo;
}

void PoiInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poi()) {
      if (poi_ != &::google::protobuf::internal::kEmptyString) {
        poi_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    longitude_ = 0;
    latitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PoiInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poi = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poi().data(), this->poi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_longitude;
        break;
      }
      
      // optional double longitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_latitude;
        break;
      }
      
      // optional double latitude = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PoiInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poi = 1;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poi(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->longitude(), output);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PoiInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poi = 1;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poi().data(), this->poi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poi(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional double longitude = 3;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->longitude(), target);
  }
  
  // optional double latitude = 4;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PoiInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poi = 1;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poi());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional double longitude = 3;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional double latitude = 4;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PoiInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PoiInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PoiInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PoiInfo::MergeFrom(const PoiInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poi()) {
      set_poi(from.poi());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PoiInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoiInfo::CopyFrom(const PoiInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoiInfo::IsInitialized() const {
  
  return true;
}

void PoiInfo::Swap(PoiInfo* other) {
  if (other != this) {
    std::swap(poi_, other->poi_);
    std::swap(name_, other->name_);
    std::swap(longitude_, other->longitude_);
    std::swap(latitude_, other->latitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PoiInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PoiInfo_descriptor_;
  metadata.reflection = PoiInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetNearPoiResponse::kPoiListFieldNumber;
#endif  // !_MSC_VER

GetNearPoiResponse::GetNearPoiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetNearPoiResponse::InitAsDefaultInstance() {
}

GetNearPoiResponse::GetNearPoiResponse(const GetNearPoiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetNearPoiResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetNearPoiResponse::~GetNearPoiResponse() {
  SharedDtor();
}

void GetNearPoiResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetNearPoiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetNearPoiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetNearPoiResponse_descriptor_;
}

const GetNearPoiResponse& GetNearPoiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_pbrpc_2eproto();  return *default_instance_;
}

GetNearPoiResponse* GetNearPoiResponse::default_instance_ = NULL;

GetNearPoiResponse* GetNearPoiResponse::New() const {
  return new GetNearPoiResponse;
}

void GetNearPoiResponse::Clear() {
  poi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetNearPoiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .lbs.da.openservice.PoiInfo poi_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poi_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_poi_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetNearPoiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .lbs.da.openservice.PoiInfo poi_list = 1;
  for (int i = 0; i < this->poi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poi_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetNearPoiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .lbs.da.openservice.PoiInfo poi_list = 1;
  for (int i = 0; i < this->poi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poi_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetNearPoiResponse::ByteSize() const {
  int total_size = 0;
  
  // repeated .lbs.da.openservice.PoiInfo poi_list = 1;
  total_size += 1 * this->poi_list_size();
  for (int i = 0; i < this->poi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poi_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetNearPoiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetNearPoiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetNearPoiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetNearPoiResponse::MergeFrom(const GetNearPoiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  poi_list_.MergeFrom(from.poi_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetNearPoiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNearPoiResponse::CopyFrom(const GetNearPoiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNearPoiResponse::IsInitialized() const {
  
  return true;
}

void GetNearPoiResponse::Swap(GetNearPoiResponse* other) {
  if (other != this) {
    poi_list_.Swap(&other->poi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetNearPoiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetNearPoiResponse_descriptor_;
  metadata.reflection = GetNearPoiResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace openservice
}  // namespace da
}  // namespace lbs

// @@protoc_insertion_point(global_scope)
